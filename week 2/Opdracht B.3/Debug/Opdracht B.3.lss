
Opdracht B.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002fd  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d4  00000000  00000000  000006b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000830  00000000  00000000  00000885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011266  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000200  00000000  00000000  00012446  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00012646  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003a3e  00000000  00000000  0001268e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	c8 c0       	rjmp	.+400    	; 0x19a <__vector_2>
   a:	00 00       	nop
   c:	9f c0       	rjmp	.+318    	; 0x14c <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	92 d0       	rcall	.+292    	; 0x1e8 <main>
  c4:	b9 c0       	rjmp	.+370    	; 0x238 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
  c8:	08 95       	ret

000000ca <wait>:
*/

int INDEX;

void wait(int milliseconds){
	for(int i = 0; i < milliseconds; i++){
  ca:	18 16       	cp	r1, r24
  cc:	19 06       	cpc	r1, r25
  ce:	6c f4       	brge	.+26     	; 0xea <wait+0x20>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	e9 ef       	ldi	r30, 0xF9	; 249
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <wait+0xe>
  dc:	00 c0       	rjmp	.+0      	; 0xde <wait+0x14>
  de:	00 00       	nop
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	a9 f7       	brne	.-22     	; 0xd4 <wait+0xa>
  ea:	08 95       	ret

000000ec <valueUP>:
		_delay_ms(1);
	}
}

valueUP(){
	if(INDEX <15)
  ec:	80 91 10 01 	lds	r24, 0x0110
  f0:	90 91 11 01 	lds	r25, 0x0111
  f4:	8f 30       	cpi	r24, 0x0F	; 15
  f6:	91 05       	cpc	r25, r1
  f8:	2c f4       	brge	.+10     	; 0x104 <valueUP+0x18>
		INDEX ++;
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	90 93 11 01 	sts	0x0111, r25
 100:	80 93 10 01 	sts	0x0110, r24
	PORTC = segments[INDEX];
 104:	e0 91 10 01 	lds	r30, 0x0110
 108:	f0 91 11 01 	lds	r31, 0x0111
 10c:	e0 50       	subi	r30, 0x00	; 0
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 81       	ld	r24, Z
 112:	85 bb       	out	0x15, r24	; 21
	wait(250);
 114:	8a ef       	ldi	r24, 0xFA	; 250
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	d8 cf       	rjmp	.-80     	; 0xca <wait>
}
 11a:	08 95       	ret

0000011c <valueDown>:

valueDown(){
	if(INDEX > 0)
 11c:	80 91 10 01 	lds	r24, 0x0110
 120:	90 91 11 01 	lds	r25, 0x0111
 124:	18 16       	cp	r1, r24
 126:	19 06       	cpc	r1, r25
 128:	2c f4       	brge	.+10     	; 0x134 <valueDown+0x18>
	INDEX --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	90 93 11 01 	sts	0x0111, r25
 130:	80 93 10 01 	sts	0x0110, r24
	PORTC = segments[INDEX];
 134:	e0 91 10 01 	lds	r30, 0x0110
 138:	f0 91 11 01 	lds	r31, 0x0111
 13c:	e0 50       	subi	r30, 0x00	; 0
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	80 81       	ld	r24, Z
 142:	85 bb       	out	0x15, r24	; 21
	wait(250);
 144:	8a ef       	ldi	r24, 0xFA	; 250
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	c0 cf       	rjmp	.-128    	; 0xca <wait>
}
 14a:	08 95       	ret

0000014c <__vector_3>:

ISR(INT2_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	0b b6       	in	r0, 0x3b	; 59
 158:	0f 92       	push	r0
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	valueDown();
 172:	d4 df       	rcall	.-88     	; 0x11c <valueDown>
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0b be       	out	0x3b, r0	; 59
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_2>:

ISR(INT1_vect){
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	valueUP();
 1c0:	95 df       	rcall	.-214    	; 0xec <valueUP>
	
}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0b be       	out	0x3b, r0	; 59
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <main>:

int main (void)
{
	DDRD = 0b11110000;			//set pin 0 - 4 input
 1e8:	80 ef       	ldi	r24, 0xF0	; 240
 1ea:	81 bb       	out	0x11, r24	; 17
								//set pin 4 - 7 output
	DDRC = 0b11111111;			// PORTC all output 
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	84 bb       	out	0x14, r24	; 20

	//Init Interrupt hardware
	EICRA |= 0b00111100;		//int 1 rising edge, int 2 rising edge
 1f0:	ea e6       	ldi	r30, 0x6A	; 106
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	8c 63       	ori	r24, 0x3C	; 60
 1f8:	80 83       	st	Z, r24
	EIMSK |= 0b00000110;		//enable INT 1 & INT 2
 1fa:	89 b7       	in	r24, 0x39	; 57
 1fc:	86 60       	ori	r24, 0x06	; 6
 1fe:	89 bf       	out	0x39, r24	; 57
	sei();
 200:	78 94       	sei
	board_init();
 202:	62 df       	rcall	.-316    	; 0xc8 <board_init>
	INDEX = 0;
 204:	10 92 11 01 	sts	0x0111, r1
 208:	10 92 10 01 	sts	0x0110, r1
	PORTC = segments[INDEX];
 20c:	80 91 00 01 	lds	r24, 0x0100
 210:	85 bb       	out	0x15, r24	; 21
	while(1){
		if(PIND == 0b00000110){
			INDEX = 0;
			PORTC = segments[INDEX];
 212:	c0 e0       	ldi	r28, 0x00	; 0
 214:	d1 e0       	ldi	r29, 0x01	; 1
	sei();
	board_init();
	INDEX = 0;
	PORTC = segments[INDEX];
	while(1){
		if(PIND == 0b00000110){
 216:	80 b3       	in	r24, 0x10	; 16
 218:	86 30       	cpi	r24, 0x06	; 6
 21a:	51 f4       	brne	.+20     	; 0x230 <main+0x48>
			INDEX = 0;
 21c:	10 92 11 01 	sts	0x0111, r1
 220:	10 92 10 01 	sts	0x0110, r1
			PORTC = segments[INDEX];
 224:	88 81       	ld	r24, Y
 226:	85 bb       	out	0x15, r24	; 21
			wait(500);
 228:	84 ef       	ldi	r24, 0xF4	; 244
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	4e df       	rcall	.-356    	; 0xca <wait>
 22e:	f3 cf       	rjmp	.-26     	; 0x216 <main+0x2e>
		}
		else{
			wait(500);
 230:	84 ef       	ldi	r24, 0xF4	; 244
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	4a df       	rcall	.-364    	; 0xca <wait>
 236:	ef cf       	rjmp	.-34     	; 0x216 <main+0x2e>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
