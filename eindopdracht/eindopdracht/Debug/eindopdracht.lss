
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000950  000009e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  00800166  00800166  00000a4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001116  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000612  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001170  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001152f  00000000  00000000  000036f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4e  00000000  00000000  00014c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00015671  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003dfa  00000000  00000000  000157f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 36       	cpi	r26, 0x66	; 102
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e6       	ldi	r26, 0x66	; 102
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 3f       	cpi	r26, 0xFB	; 251
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d2 d2       	rcall	.+1444   	; 0x668 <main>
  c4:	43 c4       	rjmp	.+2182   	; 0x94c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_command>:
		lcd_command(value);
	}
	else
	{
		value = 0x80 + position;
		lcd_command(value);
  c8:	98 2f       	mov	r25, r24
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	95 bb       	out	0x15, r25	; 21
  ce:	ab 9a       	sbi	0x15, 3	; 21
  d0:	e9 e6       	ldi	r30, 0x69	; 105
  d2:	f8 e1       	ldi	r31, 0x18	; 24
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_command+0xc>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_command+0x12>
  da:	00 00       	nop
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	95 bb       	out	0x15, r25	; 21
  e0:	f0 e1       	ldi	r31, 0x10	; 16
  e2:	8f 9f       	mul	r24, r31
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	ab 9a       	sbi	0x15, 3	; 21
  ec:	89 e6       	ldi	r24, 0x69	; 105
  ee:	98 e1       	ldi	r25, 0x18	; 24
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_command+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_command+0x2e>
  f6:	00 00       	nop
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	08 95       	ret

000000fc <init_lcd>:
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	84 bb       	out	0x14, r24	; 20
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <init_lcd+0x8>
 108:	00 c0       	rjmp	.+0      	; 0x10a <init_lcd+0xe>
 10a:	00 00       	nop
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	dc df       	rcall	.-72     	; 0xc8 <lcd_command>
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	98 e1       	ldi	r25, 0x18	; 24
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <init_lcd+0x18>
 118:	00 c0       	rjmp	.+0      	; 0x11a <init_lcd+0x1e>
 11a:	00 00       	nop
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	d4 df       	rcall	.-88     	; 0xc8 <lcd_command>
 120:	89 e6       	ldi	r24, 0x69	; 105
 122:	98 e1       	ldi	r25, 0x18	; 24
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <init_lcd+0x28>
 128:	00 c0       	rjmp	.+0      	; 0x12a <init_lcd+0x2e>
 12a:	00 00       	nop
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	cc df       	rcall	.-104    	; 0xc8 <lcd_command>
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <init_lcd+0x38>
 138:	00 c0       	rjmp	.+0      	; 0x13a <init_lcd+0x3e>
 13a:	00 00       	nop
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	c4 df       	rcall	.-120    	; 0xc8 <lcd_command>
 140:	89 e6       	ldi	r24, 0x69	; 105
 142:	98 e1       	ldi	r25, 0x18	; 24
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <init_lcd+0x48>
 148:	00 c0       	rjmp	.+0      	; 0x14a <init_lcd+0x4e>
 14a:	00 00       	nop
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	bc df       	rcall	.-136    	; 0xc8 <lcd_command>
 150:	89 e6       	ldi	r24, 0x69	; 105
 152:	98 e1       	ldi	r25, 0x18	; 24
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <init_lcd+0x58>
 158:	00 c0       	rjmp	.+0      	; 0x15a <init_lcd+0x5e>
 15a:	00 00       	nop
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	b4 df       	rcall	.-152    	; 0xc8 <lcd_command>
 160:	89 e6       	ldi	r24, 0x69	; 105
 162:	98 e1       	ldi	r25, 0x18	; 24
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <init_lcd+0x68>
 168:	00 c0       	rjmp	.+0      	; 0x16a <init_lcd+0x6e>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <lcd_writeChar>:
 16e:	98 2f       	mov	r25, r24
 170:	90 7f       	andi	r25, 0xF0	; 240
 172:	95 bb       	out	0x15, r25	; 21
 174:	95 b3       	in	r25, 0x15	; 21
 176:	9c 60       	ori	r25, 0x0C	; 12
 178:	95 bb       	out	0x15, r25	; 21
 17a:	e9 e6       	ldi	r30, 0x69	; 105
 17c:	f8 e1       	ldi	r31, 0x18	; 24
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_writeChar+0x10>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_writeChar+0x16>
 184:	00 00       	nop
 186:	94 e0       	ldi	r25, 0x04	; 4
 188:	95 bb       	out	0x15, r25	; 21
 18a:	f0 e1       	ldi	r31, 0x10	; 16
 18c:	8f 9f       	mul	r24, r31
 18e:	c0 01       	movw	r24, r0
 190:	11 24       	eor	r1, r1
 192:	85 bb       	out	0x15, r24	; 21
 194:	85 b3       	in	r24, 0x15	; 21
 196:	8c 60       	ori	r24, 0x0C	; 12
 198:	85 bb       	out	0x15, r24	; 21
 19a:	89 e6       	ldi	r24, 0x69	; 105
 19c:	98 e1       	ldi	r25, 0x18	; 24
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_writeChar+0x30>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_writeChar+0x36>
 1a4:	00 00       	nop
 1a6:	15 ba       	out	0x15, r1	; 21
 1a8:	08 95       	ret

000001aa <lcd_writeLine>:
	}
 }

 void lcd_writeLine( char text[], int line)
 {
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
	 // eerst de eerste 8 karakters = regel 1
	 // eerste pos regel 1
	 if(line == 2)
 1b8:	62 30       	cpi	r22, 0x02	; 2
 1ba:	71 05       	cpc	r23, r1
 1bc:	b9 f4       	brne	.+46     	; 0x1ec <lcd_writeLine+0x42>
	 {
		 lcd_command(0xC0);
 1be:	80 ec       	ldi	r24, 0xC0	; 192
 1c0:	83 df       	rcall	.-250    	; 0xc8 <lcd_command>
 1c2:	7e 01       	movw	r14, r28
			for (int i=0; i < strlen(text); i++) {
 1c4:	00 e0       	ldi	r16, 0x00	; 0
 1c6:	10 e0       	ldi	r17, 0x00	; 0
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <lcd_writeLine+0x2c>
			 lcd_writeChar( text[i] );
 1ca:	f7 01       	movw	r30, r14
 1cc:	81 91       	ld	r24, Z+
 1ce:	7f 01       	movw	r14, r30
 1d0:	ce df       	rcall	.-100    	; 0x16e <lcd_writeChar>
	 // eerst de eerste 8 karakters = regel 1
	 // eerste pos regel 1
	 if(line == 2)
	 {
		 lcd_command(0xC0);
			for (int i=0; i < strlen(text); i++) {
 1d2:	0f 5f       	subi	r16, 0xFF	; 255
 1d4:	1f 4f       	sbci	r17, 0xFF	; 255
 1d6:	fe 01       	movw	r30, r28
 1d8:	01 90       	ld	r0, Z+
 1da:	00 20       	and	r0, r0
 1dc:	e9 f7       	brne	.-6      	; 0x1d8 <lcd_writeLine+0x2e>
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	ec 1b       	sub	r30, r28
 1e2:	fd 0b       	sbc	r31, r29
 1e4:	0e 17       	cp	r16, r30
 1e6:	1f 07       	cpc	r17, r31
 1e8:	80 f3       	brcs	.-32     	; 0x1ca <lcd_writeLine+0x20>
 1ea:	16 c0       	rjmp	.+44     	; 0x218 <lcd_writeLine+0x6e>
			 lcd_writeChar( text[i] );
			}
	 }
	 else
	 {
	 	 lcd_command(0x80);
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	6c df       	rcall	.-296    	; 0xc8 <lcd_command>
 1f0:	7e 01       	movw	r14, r28
	 	 for (int i=0; i < strlen(text); i++) {
 1f2:	00 e0       	ldi	r16, 0x00	; 0
 1f4:	10 e0       	ldi	r17, 0x00	; 0
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_writeLine+0x5a>
		 	 lcd_writeChar( text[i] );
 1f8:	f7 01       	movw	r30, r14
 1fa:	81 91       	ld	r24, Z+
 1fc:	7f 01       	movw	r14, r30
 1fe:	b7 df       	rcall	.-146    	; 0x16e <lcd_writeChar>
			}
	 }
	 else
	 {
	 	 lcd_command(0x80);
	 	 for (int i=0; i < strlen(text); i++) {
 200:	0f 5f       	subi	r16, 0xFF	; 255
 202:	1f 4f       	sbci	r17, 0xFF	; 255
 204:	fe 01       	movw	r30, r28
 206:	01 90       	ld	r0, Z+
 208:	00 20       	and	r0, r0
 20a:	e9 f7       	brne	.-6      	; 0x206 <lcd_writeLine+0x5c>
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	ec 1b       	sub	r30, r28
 210:	fd 0b       	sbc	r31, r29
 212:	0e 17       	cp	r16, r30
 214:	1f 07       	cpc	r17, r31
 216:	80 f3       	brcs	.-32     	; 0x1f8 <lcd_writeLine+0x4e>
		 	 lcd_writeChar( text[i] );
	 	 }
	 }
 }
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	08 95       	ret

00000226 <twi_init>:
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 226:	10 92 71 00 	sts	0x0071, r1
 22a:	80 e2       	ldi	r24, 0x20	; 32
 22c:	80 93 70 00 	sts	0x0070, r24
 230:	08 95       	ret

00000232 <twi_start>:
 232:	84 ea       	ldi	r24, 0xA4	; 164
 234:	80 93 74 00 	sts	0x0074, r24
 238:	e4 e7       	ldi	r30, 0x74	; 116
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	88 23       	and	r24, r24
 240:	ec f7       	brge	.-6      	; 0x23c <twi_start+0xa>
 242:	08 95       	ret

00000244 <twi_tx>:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 
	 TWDR = data;
 244:	80 93 73 00 	sts	0x0073, r24
	 TWCR = (1<<TWINT) | (1<<TWEN);
 248:	84 e8       	ldi	r24, 0x84	; 132
 24a:	80 93 74 00 	sts	0x0074, r24

	 while(!(TWCR & (1<<TWINT)));
 24e:	e4 e7       	ldi	r30, 0x74	; 116
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	88 23       	and	r24, r24
 256:	ec f7       	brge	.-6      	; 0x252 <twi_tx+0xe>

	 //TWCR = (0x80 | 0x04);
	 //while( 0 == (TWCR & 0x80) );
 258:	08 95       	ret

0000025a <twi_clear>:
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 }

 void twi_clear(void){
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	c0 e0       	ldi	r28, 0x00	; 0
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 264:	04 e7       	ldi	r16, 0x74	; 116
 266:	10 e0       	ldi	r17, 0x00	; 0
 268:	d4 e9       	ldi	r29, 0x94	; 148
 }

 void twi_clear(void){
	 int i = 0x00;
	 for(; i <= 0x0E; i += 0x02){
		 twi_start();
 26a:	e3 df       	rcall	.-58     	; 0x232 <twi_start>
		 twi_tx(0xE0);	// Display I2C addres + R/W bit
 26c:	80 ee       	ldi	r24, 0xE0	; 224
 26e:	ea df       	rcall	.-44     	; 0x244 <twi_tx>
		 twi_tx(i);	// Address
 270:	8c 2f       	mov	r24, r28
 272:	e8 df       	rcall	.-48     	; 0x244 <twi_tx>
		 twi_tx(0x00);	// data
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	e6 df       	rcall	.-52     	; 0x244 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 278:	f8 01       	movw	r30, r16
 27a:	d0 83       	st	Z, r29
 27c:	ce 5f       	subi	r28, 0xFE	; 254
 }

 void twi_clear(void){
	 int i = 0x00;
	 for(; i <= 0x0E; i += 0x02){
 27e:	c0 31       	cpi	r28, 0x10	; 16
 280:	a1 f7       	brne	.-24     	; 0x26a <twi_clear+0x10>
		 twi_tx(0xE0);	// Display I2C addres + R/W bit
		 twi_tx(i);	// Address
		 twi_tx(0x00);	// data
		 twi_stop();
	 }
 }
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	08 95       	ret

0000028c <initMatrix>:


 yPositions[8] = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
 xPositions[8] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E};

 void initMatrix(){
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
	wait(25);
 292:	89 e1       	ldi	r24, 0x19	; 25
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	08 d1       	rcall	.+528    	; 0x4a8 <wait>
	twi_init();		// Init TWI interface
 298:	c6 df       	rcall	.-116    	; 0x226 <twi_init>
	buttoninit();	// Init buttons for snake
 29a:	6c d0       	rcall	.+216    	; 0x374 <buttoninit>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 29c:	ca df       	rcall	.-108    	; 0x232 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 29e:	80 ee       	ldi	r24, 0xE0	; 224
 2a0:	d1 df       	rcall	.-94     	; 0x244 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 2a2:	81 e2       	ldi	r24, 0x21	; 33
 2a4:	cf df       	rcall	.-98     	; 0x244 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 2a6:	c4 e7       	ldi	r28, 0x74	; 116
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	14 e9       	ldi	r17, 0x94	; 148
 2ac:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
	
	twi_start();
 2ae:	c1 df       	rcall	.-126    	; 0x232 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 2b0:	80 ee       	ldi	r24, 0xE0	; 224
 2b2:	c8 df       	rcall	.-112    	; 0x244 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 2b4:	80 ea       	ldi	r24, 0xA0	; 160
 2b6:	c6 df       	rcall	.-116    	; 0x244 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 2b8:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 2ba:	bb df       	rcall	.-138    	; 0x232 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 2bc:	80 ee       	ldi	r24, 0xE0	; 224
 2be:	c2 df       	rcall	.-124    	; 0x244 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 2c0:	83 ee       	ldi	r24, 0xE3	; 227
 2c2:	c0 df       	rcall	.-128    	; 0x244 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 2c4:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 2c6:	b5 df       	rcall	.-150    	; 0x232 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 2c8:	80 ee       	ldi	r24, 0xE0	; 224
 2ca:	bc df       	rcall	.-136    	; 0x244 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 2cc:	81 e8       	ldi	r24, 0x81	; 129
 2ce:	ba df       	rcall	.-140    	; 0x244 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 2d0:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();

	twi_clear();
 2d2:	c3 df       	rcall	.-122    	; 0x25a <twi_clear>
 }
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	08 95       	ret

000002dc <twi_fill>:
		 twi_tx(0x00);	// data
		 twi_stop();
	 }
 }

 void twi_fill(){
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	c0 e0       	ldi	r28, 0x00	; 0
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 2e6:	04 e7       	ldi	r16, 0x74	; 116
 2e8:	10 e0       	ldi	r17, 0x00	; 0
 2ea:	d4 e9       	ldi	r29, 0x94	; 148
 }

 void twi_fill(){
	 int i = 0x00;
	 for(; i <= 0x0E; i += 0x02){
		 twi_start();
 2ec:	a2 df       	rcall	.-188    	; 0x232 <twi_start>
		 twi_tx(0xE0);	// Display I2C addres + R/W bit
 2ee:	80 ee       	ldi	r24, 0xE0	; 224
 2f0:	a9 df       	rcall	.-174    	; 0x244 <twi_tx>
		 twi_tx(i);	// Address
 2f2:	8c 2f       	mov	r24, r28
 2f4:	a7 df       	rcall	.-178    	; 0x244 <twi_tx>
		 twi_tx(0xFF);	// data
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	a5 df       	rcall	.-182    	; 0x244 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 2fa:	f8 01       	movw	r30, r16
 2fc:	d0 83       	st	Z, r29
 2fe:	ce 5f       	subi	r28, 0xFE	; 254
	 }
 }

 void twi_fill(){
	 int i = 0x00;
	 for(; i <= 0x0E; i += 0x02){
 300:	c0 31       	cpi	r28, 0x10	; 16
 302:	a1 f7       	brne	.-24     	; 0x2ec <twi_fill+0x10>
		 twi_tx(0xE0);	// Display I2C addres + R/W bit
		 twi_tx(i);	// Address
		 twi_tx(0xFF);	// data
		 twi_stop();
	 }
 }
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret

0000030e <twi_position>:

 void twi_position(POSITION position){
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	08 2f       	mov	r16, r24
 318:	d9 2f       	mov	r29, r25
 31a:	c8 2f       	mov	r28, r24
 31c:	19 2f       	mov	r17, r25
	 

	 twi_start();
 31e:	89 df       	rcall	.-238    	; 0x232 <twi_start>
	 twi_tx(0xE0);	// Display I2C addres + R/W bit
 320:	80 ee       	ldi	r24, 0xE0	; 224
 322:	90 df       	rcall	.-224    	; 0x244 <twi_tx>
	 twi_tx(position.x);	// Address
 324:	80 2f       	mov	r24, r16
 326:	8e df       	rcall	.-228    	; 0x244 <twi_tx>
	 int y = position.y;
 328:	6d 2f       	mov	r22, r29
 32a:	70 e0       	ldi	r23, 0x00	; 0
	 for(int i = 0; i <= snakelength; i++){
 32c:	40 91 26 01 	lds	r20, 0x0126
 330:	50 91 27 01 	lds	r21, 0x0127
 334:	55 23       	and	r21, r21
 336:	a4 f0       	brlt	.+40     	; 0x360 <twi_position+0x52>
 338:	ec e6       	ldi	r30, 0x6C	; 108
 33a:	f1 e0       	ldi	r31, 0x01	; 1
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	df 01       	movw	r26, r30
 342:	11 97       	sbiw	r26, 0x01	; 1
		 if(position.x == allPositions[i].x && position.y != allPositions[i].y){
 344:	9c 91       	ld	r25, X
 346:	9c 13       	cpse	r25, r28
 348:	05 c0       	rjmp	.+10     	; 0x354 <twi_position+0x46>
 34a:	90 81       	ld	r25, Z
 34c:	91 17       	cp	r25, r17
 34e:	11 f0       	breq	.+4      	; 0x354 <twi_position+0x46>
			 y = allPositions[i].y + y;
 350:	69 0f       	add	r22, r25
 352:	71 1d       	adc	r23, r1

	 twi_start();
	 twi_tx(0xE0);	// Display I2C addres + R/W bit
	 twi_tx(position.x);	// Address
	 int y = position.y;
	 for(int i = 0; i <= snakelength; i++){
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	3f 4f       	sbci	r19, 0xFF	; 255
 358:	32 96       	adiw	r30, 0x02	; 2
 35a:	42 17       	cp	r20, r18
 35c:	53 07       	cpc	r21, r19
 35e:	84 f7       	brge	.-32     	; 0x340 <twi_position+0x32>
		 if(position.x == allPositions[i].x && position.y != allPositions[i].y){
			 y = allPositions[i].y + y;
		}
	 }
	 
	 twi_tx(y);	// data
 360:	86 2f       	mov	r24, r22
 362:	70 df       	rcall	.-288    	; 0x244 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 364:	84 e9       	ldi	r24, 0x94	; 148
 366:	80 93 74 00 	sts	0x0074, r24
		}
	 }
	 
	 twi_tx(y);	// data
	 twi_stop();
 }
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <buttoninit>:
	if(a.x == b.x){
		if(a.y == b.y)
			return 1;
	}
	return 0;
}
 374:	17 ba       	out	0x17, r1	; 23
 376:	14 ba       	out	0x14, r1	; 20
 378:	08 95       	ret

0000037a <checkinput>:
 37a:	80 91 66 01 	lds	r24, 0x0166
 37e:	90 91 67 01 	lds	r25, 0x0167
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	81 31       	cpi	r24, 0x11	; 17
 386:	27 e2       	ldi	r18, 0x27	; 39
 388:	92 07       	cpc	r25, r18
 38a:	28 f4       	brcc	.+10     	; 0x396 <checkinput+0x1c>
 38c:	90 93 67 01 	sts	0x0167, r25
 390:	80 93 66 01 	sts	0x0166, r24
 394:	04 c0       	rjmp	.+8      	; 0x39e <checkinput+0x24>
 396:	10 92 67 01 	sts	0x0167, r1
 39a:	10 92 66 01 	sts	0x0166, r1
 39e:	c8 9b       	sbis	0x19, 0	; 25
 3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <checkinput+0x36>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	90 93 25 01 	sts	0x0125, r25
 3aa:	80 93 24 01 	sts	0x0124, r24
 3ae:	08 95       	ret
 3b0:	c9 9b       	sbis	0x19, 1	; 25
 3b2:	07 c0       	rjmp	.+14     	; 0x3c2 <checkinput+0x48>
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 25 01 	sts	0x0125, r25
 3bc:	80 93 24 01 	sts	0x0124, r24
 3c0:	08 95       	ret
 3c2:	ca 9b       	sbis	0x19, 2	; 25
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <checkinput+0x5a>
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	90 93 25 01 	sts	0x0125, r25
 3ce:	80 93 24 01 	sts	0x0124, r24
 3d2:	08 95       	ret
 3d4:	b1 9b       	sbis	0x16, 1	; 22
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <checkinput+0x68>
 3d8:	10 92 25 01 	sts	0x0125, r1
 3dc:	10 92 24 01 	sts	0x0124, r1
 3e0:	08 95       	ret
 3e2:	b0 9b       	sbis	0x16, 0	; 22
 3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <checkinput+0x7a>
 3e6:	80 91 6a 01 	lds	r24, 0x016A
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	19 f0       	breq	.+6      	; 0x3f4 <checkinput+0x7a>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	80 93 6a 01 	sts	0x016A, r24
 3f4:	08 95       	ret

000003f6 <changePosition>:
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	91 05       	cpc	r25, r1
 3fa:	81 f0       	breq	.+32     	; 0x41c <changePosition+0x26>
 3fc:	dc 01       	movw	r26, r24
 3fe:	aa 0f       	add	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	a7 59       	subi	r26, 0x97	; 151
 404:	be 4f       	sbci	r27, 0xFE	; 254
 406:	2c 91       	ld	r18, X
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	fc 01       	movw	r30, r24
 40e:	e5 59       	subi	r30, 0x95	; 149
 410:	fe 4f       	sbci	r31, 0xFE	; 254
 412:	20 83       	st	Z, r18
 414:	11 96       	adiw	r26, 0x01	; 1
 416:	8c 91       	ld	r24, X
 418:	81 83       	std	Z+1, r24	; 0x01
 41a:	08 95       	ret
 41c:	61 30       	cpi	r22, 0x01	; 1
 41e:	71 05       	cpc	r23, r1
 420:	59 f0       	breq	.+22     	; 0x438 <changePosition+0x42>
 422:	1c f4       	brge	.+6      	; 0x42a <changePosition+0x34>
 424:	67 2b       	or	r22, r23
 426:	31 f1       	breq	.+76     	; 0x474 <changePosition+0x7e>
 428:	08 95       	ret
 42a:	62 30       	cpi	r22, 0x02	; 2
 42c:	71 05       	cpc	r23, r1
 42e:	61 f0       	breq	.+24     	; 0x448 <changePosition+0x52>
 430:	63 30       	cpi	r22, 0x03	; 3
 432:	71 05       	cpc	r23, r1
 434:	b9 f0       	breq	.+46     	; 0x464 <changePosition+0x6e>
 436:	08 95       	ret
 438:	80 91 6d 01 	lds	r24, 0x016D
 43c:	88 23       	and	r24, r24
 43e:	49 f1       	breq	.+82     	; 0x492 <changePosition+0x9c>
 440:	82 50       	subi	r24, 0x02	; 2
 442:	80 93 6d 01 	sts	0x016D, r24
 446:	08 95       	ret
 448:	80 91 6e 01 	lds	r24, 0x016E
 44c:	80 34       	cpi	r24, 0x40	; 64
 44e:	20 f4       	brcc	.+8      	; 0x458 <changePosition+0x62>
 450:	88 0f       	add	r24, r24
 452:	80 93 6e 01 	sts	0x016E, r24
 456:	08 95       	ret
 458:	80 38       	cpi	r24, 0x80	; 128
 45a:	d9 f4       	brne	.+54     	; 0x492 <changePosition+0x9c>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	80 93 6e 01 	sts	0x016E, r24
 462:	08 95       	ret
 464:	80 91 6d 01 	lds	r24, 0x016D
 468:	8e 30       	cpi	r24, 0x0E	; 14
 46a:	98 f4       	brcc	.+38     	; 0x492 <changePosition+0x9c>
 46c:	8e 5f       	subi	r24, 0xFE	; 254
 46e:	80 93 6d 01 	sts	0x016D, r24
 472:	08 95       	ret
 474:	80 91 6e 01 	lds	r24, 0x016E
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	21 f4       	brne	.+8      	; 0x484 <changePosition+0x8e>
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	80 93 6e 01 	sts	0x016E, r24
 482:	08 95       	ret
 484:	82 30       	cpi	r24, 0x02	; 2
 486:	28 f0       	brcs	.+10     	; 0x492 <changePosition+0x9c>
 488:	80 38       	cpi	r24, 0x80	; 128
 48a:	19 f0       	breq	.+6      	; 0x492 <changePosition+0x9c>
 48c:	86 95       	lsr	r24
 48e:	80 93 6e 01 	sts	0x016E, r24
 492:	08 95       	ret

00000494 <addSnakeLength>:
 494:	80 91 26 01 	lds	r24, 0x0126
 498:	90 91 27 01 	lds	r25, 0x0127
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	90 93 27 01 	sts	0x0127, r25
 4a2:	80 93 26 01 	sts	0x0126, r24
 4a6:	08 95       	ret

000004a8 <wait>:
 4a8:	18 16       	cp	r1, r24
 4aa:	19 06       	cpc	r1, r25
 4ac:	6c f4       	brge	.+26     	; 0x4c8 <wait+0x20>
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	e9 ef       	ldi	r30, 0xF9	; 249
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <wait+0xe>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <wait+0x14>
 4bc:	00 00       	nop
 4be:	2f 5f       	subi	r18, 0xFF	; 255
 4c0:	3f 4f       	sbci	r19, 0xFF	; 255
 4c2:	28 17       	cp	r18, r24
 4c4:	39 07       	cpc	r19, r25
 4c6:	a9 f7       	brne	.-22     	; 0x4b2 <wait+0xa>
 4c8:	08 95       	ret

000004ca <setLootPosition>:
 4ca:	af 92       	push	r10
 4cc:	bf 92       	push	r11
 4ce:	cf 92       	push	r12
 4d0:	df 92       	push	r13
 4d2:	ef 92       	push	r14
 4d4:	ff 92       	push	r15
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	80 91 66 01 	lds	r24, 0x0166
 4e2:	90 91 67 01 	lds	r25, 0x0167
 4e6:	d9 d1       	rcall	.+946    	; 0x89a <srand>
 4e8:	cb e6       	ldi	r28, 0x6B	; 107
 4ea:	d1 e0       	ldi	r29, 0x01	; 1
 4ec:	0e e6       	ldi	r16, 0x6E	; 110
 4ee:	11 e0       	ldi	r17, 0x01	; 1
 4f0:	cc 24       	eor	r12, r12
 4f2:	c3 94       	inc	r12
 4f4:	d1 2c       	mov	r13, r1
 4f6:	e1 2c       	mov	r14, r1
 4f8:	f1 2c       	mov	r15, r1
 4fa:	cc d1       	rcall	.+920    	; 0x894 <rand>
 4fc:	87 70       	andi	r24, 0x07	; 7
 4fe:	90 78       	andi	r25, 0x80	; 128
 500:	99 23       	and	r25, r25
 502:	24 f4       	brge	.+8      	; 0x50c <setLootPosition+0x42>
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	88 6f       	ori	r24, 0xF8	; 248
 508:	9f 6f       	ori	r25, 0xFF	; 255
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	fc 01       	movw	r30, r24
 512:	ec 5f       	subi	r30, 0xFC	; 252
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	80 81       	ld	r24, Z
 518:	88 83       	st	Y, r24
 51a:	bc d1       	rcall	.+888    	; 0x894 <rand>
 51c:	87 70       	andi	r24, 0x07	; 7
 51e:	90 78       	andi	r25, 0x80	; 128
 520:	99 23       	and	r25, r25
 522:	24 f4       	brge	.+8      	; 0x52c <setLootPosition+0x62>
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	88 6f       	ori	r24, 0xF8	; 248
 528:	9f 6f       	ori	r25, 0xFF	; 255
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	fc 01       	movw	r30, r24
 532:	ec 5e       	subi	r30, 0xEC	; 236
 534:	fe 4f       	sbci	r31, 0xFE	; 254
 536:	80 81       	ld	r24, Z
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	60 91 26 01 	lds	r22, 0x0126
 53e:	70 91 27 01 	lds	r23, 0x0127
 542:	16 16       	cp	r1, r22
 544:	17 06       	cpc	r1, r23
 546:	cc f4       	brge	.+50     	; 0x57a <setLootPosition+0xb0>
 548:	b8 80       	ld	r11, Y
 54a:	a8 2e       	mov	r10, r24
 54c:	f8 01       	movw	r30, r16
 54e:	8c 2d       	mov	r24, r12
 550:	9d 2d       	mov	r25, r13
 552:	4c 2d       	mov	r20, r12
 554:	5d 2d       	mov	r21, r13
 556:	30 81       	ld	r19, Z
 558:	df 01       	movw	r26, r30
 55a:	11 97       	sbiw	r26, 0x01	; 1
 55c:	2c 91       	ld	r18, X
 55e:	2b 11       	cpse	r18, r11
 560:	04 c0       	rjmp	.+8      	; 0x56a <setLootPosition+0xa0>
 562:	a3 12       	cpse	r10, r19
 564:	02 c0       	rjmp	.+4      	; 0x56a <setLootPosition+0xa0>
 566:	4e 2d       	mov	r20, r14
 568:	5f 2d       	mov	r21, r15
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	32 96       	adiw	r30, 0x02	; 2
 56e:	68 17       	cp	r22, r24
 570:	79 07       	cpc	r23, r25
 572:	8c f7       	brge	.-30     	; 0x556 <setLootPosition+0x8c>
 574:	45 2b       	or	r20, r21
 576:	09 f4       	brne	.+2      	; 0x57a <setLootPosition+0xb0>
 578:	c0 cf       	rjmp	.-128    	; 0x4fa <setLootPosition+0x30>
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	1f 91       	pop	r17
 580:	0f 91       	pop	r16
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	df 90       	pop	r13
 588:	cf 90       	pop	r12
 58a:	bf 90       	pop	r11
 58c:	af 90       	pop	r10
 58e:	08 95       	ret

00000590 <checkColission>:
 590:	9f 92       	push	r9
 592:	af 92       	push	r10
 594:	bf 92       	push	r11
 596:	cf 92       	push	r12
 598:	df 92       	push	r13
 59a:	ef 92       	push	r14
 59c:	ff 92       	push	r15
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	eb e6       	ldi	r30, 0x6B	; 107
 5a8:	f1 e0       	ldi	r31, 0x01	; 1
 5aa:	83 81       	ldd	r24, Z+3	; 0x03
 5ac:	91 81       	ldd	r25, Z+1	; 0x01
 5ae:	30 81       	ld	r19, Z
 5b0:	22 81       	ldd	r18, Z+2	; 0x02
 5b2:	32 13       	cpse	r19, r18
 5b4:	33 c0       	rjmp	.+102    	; 0x61c <checkColission+0x8c>
 5b6:	98 13       	cpse	r25, r24
 5b8:	31 c0       	rjmp	.+98     	; 0x61c <checkColission+0x8c>
 5ba:	24 c0       	rjmp	.+72     	; 0x604 <checkColission+0x74>
 5bc:	40 81       	ld	r20, Z
 5be:	38 81       	ld	r19, Y
 5c0:	df 01       	movw	r26, r30
 5c2:	11 97       	sbiw	r26, 0x01	; 1
 5c4:	2c 91       	ld	r18, X
 5c6:	32 13       	cpse	r19, r18
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <checkColission+0x44>
 5ca:	b4 12       	cpse	r11, r20
 5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <checkColission+0x44>
 5ce:	3b c0       	rjmp	.+118    	; 0x646 <checkColission+0xb6>
 5d0:	50 93 6a 01 	sts	0x016A, r21
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	32 96       	adiw	r30, 0x02	; 2
 5d8:	68 17       	cp	r22, r24
 5da:	79 07       	cpc	r23, r25
 5dc:	7c f7       	brge	.-34     	; 0x5bc <checkColission+0x2c>
 5de:	0f 5f       	subi	r16, 0xFF	; 255
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	e8 0e       	add	r14, r24
 5e6:	f1 1c       	adc	r15, r1
 5e8:	60 17       	cp	r22, r16
 5ea:	71 07       	cpc	r23, r17
 5ec:	8c f1       	brlt	.+98     	; 0x650 <checkColission+0xc0>
 5ee:	16 16       	cp	r1, r22
 5f0:	17 06       	cpc	r1, r23
 5f2:	ac f7       	brge	.-22     	; 0x5de <checkColission+0x4e>
 5f4:	f7 01       	movw	r30, r14
 5f6:	b0 80       	ld	r11, Z
 5f8:	f6 01       	movw	r30, r12
 5fa:	89 2d       	mov	r24, r9
 5fc:	9a 2d       	mov	r25, r10
 5fe:	e7 01       	movw	r28, r14
 600:	21 97       	sbiw	r28, 0x01	; 1
 602:	dc cf       	rjmp	.-72     	; 0x5bc <checkColission+0x2c>
 604:	47 df       	rcall	.-370    	; 0x494 <addSnakeLength>
 606:	61 df       	rcall	.-318    	; 0x4ca <setLootPosition>
 608:	80 91 68 01 	lds	r24, 0x0168
 60c:	90 91 69 01 	lds	r25, 0x0169
 610:	01 96       	adiw	r24, 0x01	; 1
 612:	90 93 69 01 	sts	0x0169, r25
 616:	80 93 68 01 	sts	0x0168, r24
 61a:	1a c0       	rjmp	.+52     	; 0x650 <checkColission+0xc0>
 61c:	60 91 26 01 	lds	r22, 0x0126
 620:	70 91 27 01 	lds	r23, 0x0127
 624:	16 16       	cp	r1, r22
 626:	17 06       	cpc	r1, r23
 628:	9c f4       	brge	.+38     	; 0x650 <checkColission+0xc0>
 62a:	0f 2e       	mov	r0, r31
 62c:	fe e6       	ldi	r31, 0x6E	; 110
 62e:	ef 2e       	mov	r14, r31
 630:	f1 e0       	ldi	r31, 0x01	; 1
 632:	ff 2e       	mov	r15, r31
 634:	f0 2d       	mov	r31, r0
 636:	01 e0       	ldi	r16, 0x01	; 1
 638:	10 e0       	ldi	r17, 0x00	; 0
 63a:	67 01       	movw	r12, r14
 63c:	99 24       	eor	r9, r9
 63e:	93 94       	inc	r9
 640:	a1 2c       	mov	r10, r1
 642:	52 e0       	ldi	r21, 0x02	; 2
 644:	d4 cf       	rjmp	.-88     	; 0x5ee <checkColission+0x5e>
 646:	08 17       	cp	r16, r24
 648:	19 07       	cpc	r17, r25
 64a:	09 f0       	breq	.+2      	; 0x64e <checkColission+0xbe>
 64c:	c1 cf       	rjmp	.-126    	; 0x5d0 <checkColission+0x40>
 64e:	c2 cf       	rjmp	.-124    	; 0x5d4 <checkColission+0x44>
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	0f 91       	pop	r16
 658:	ff 90       	pop	r15
 65a:	ef 90       	pop	r14
 65c:	df 90       	pop	r13
 65e:	cf 90       	pop	r12
 660:	bf 90       	pop	r11
 662:	af 90       	pop	r10
 664:	9f 90       	pop	r9
 666:	08 95       	ret

00000668 <main>:
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	//init dot
	initMatrix();
 668:	11 de       	rcall	.-990    	; 0x28c <initMatrix>

	//init lcd
	init_lcd();
 66a:	48 dd       	rcall	.-1392   	; 0xfc <init_lcd>

	//set position of head snake
	allPositions[HEAD].x = 0x08;
 66c:	eb e6       	ldi	r30, 0x6B	; 107
 66e:	f1 e0       	ldi	r31, 0x01	; 1
 670:	88 e0       	ldi	r24, 0x08	; 8
 672:	82 83       	std	Z+2, r24	; 0x02
	allPositions[HEAD].y = 0x08;
 674:	83 83       	std	Z+3, r24	; 0x03
	//allPositions[HEAD +1].x = 0x06;
	//allPositions[HEAD +1].y = 0x08;
	//snakelength ++;

	//set loot at random position
	setLootPosition();
 676:	29 df       	rcall	.-430    	; 0x4ca <setLootPosition>
	//twi_position(allPositions[HEAD]);
	lcd_writeLine("b0 to start", 0);
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	88 e2       	ldi	r24, 0x28	; 40
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	94 dd       	rcall	.-1240   	; 0x1aa <lcd_writeLine>
	lcd_writeLine("ctrl:A0,A1,A2,B1", 2);
 682:	62 e0       	ldi	r22, 0x02	; 2
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	84 e3       	ldi	r24, 0x34	; 52
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	8f dd       	rcall	.-1250   	; 0x1aa <lcd_writeLine>

				//clear the screen
				twi_clear();

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
 68c:	0f 2e       	mov	r0, r31
 68e:	f4 e1       	ldi	r31, 0x14	; 20
 690:	8f 2e       	mov	r8, r31
 692:	f0 2d       	mov	r31, r0
 694:	91 2c       	mov	r9, r1
			case GAMEOVER:
				lcd_writeLine("GAME OVER!  s:", 0);
				lcd_writeChar('0' + score/10);
				lcd_writeChar('0' + score %10);

				snakelength = 1;
 696:	cc 24       	eor	r12, r12
 698:	c3 94       	inc	r12
 69a:	d1 2c       	mov	r13, r1
				lastPressed = -1;
 69c:	ee 24       	eor	r14, r14
 69e:	ea 94       	dec	r14
 6a0:	fe 2c       	mov	r15, r14
				allPositions[HEAD].y = 0x08;
 6a2:	0b e6       	ldi	r16, 0x6B	; 107
 6a4:	11 e0       	ldi	r17, 0x01	; 1
 6a6:	68 94       	set
 6a8:	bb 24       	eor	r11, r11
 6aa:	b3 f8       	bld	r11, 3
				allPositions[HEAD].x = 0x08;
				score = 0;
 6ac:	0f 2e       	mov	r0, r31
 6ae:	f5 e0       	ldi	r31, 0x05	; 5
 6b0:	af 2e       	mov	r10, r31
 6b2:	f0 2d       	mov	r31, r0
 6b4:	71 2c       	mov	r7, r1
	//twi_position(allPositions[HEAD]);
	lcd_writeLine("b0 to start", 0);
	lcd_writeLine("ctrl:A0,A1,A2,B1", 2);
	while (1)
	{
		switch(status)
 6b6:	80 91 6a 01 	lds	r24, 0x016A
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	51 f0       	breq	.+20     	; 0x6d2 <main+0x6a>
 6be:	20 f0       	brcs	.+8      	; 0x6c8 <main+0x60>
 6c0:	82 30       	cpi	r24, 0x02	; 2
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <main+0x5e>
 6c4:	3d c0       	rjmp	.+122    	; 0x740 <main+0xd8>
 6c6:	f9 cf       	rjmp	.-14     	; 0x6ba <main+0x52>
		{
			case MENU:
				
				checkinput();
 6c8:	58 de       	rcall	.-848    	; 0x37a <checkinput>
				wait(250);
 6ca:	8a ef       	ldi	r24, 0xFA	; 250
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	ec de       	rcall	.-552    	; 0x4a8 <wait>
				//twi_write(MatrixText);
				break;
 6d0:	f2 cf       	rjmp	.-28     	; 0x6b6 <main+0x4e>

			case PLAYING:
				lcd_writeLine("in game         ", 0);
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	85 e4       	ldi	r24, 0x45	; 69
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	67 dd       	rcall	.-1330   	; 0x1aa <lcd_writeLine>
				//refresh locations of the snake:
				for(int i = snakelength; i > 0; i--)
 6dc:	c0 91 26 01 	lds	r28, 0x0126
 6e0:	d0 91 27 01 	lds	r29, 0x0127
 6e4:	1c 16       	cp	r1, r28
 6e6:	1d 06       	cpc	r1, r29
 6e8:	44 f4       	brge	.+16     	; 0x6fa <main+0x92>
					changePosition(i, lastPressed);
 6ea:	60 91 24 01 	lds	r22, 0x0124
 6ee:	70 91 25 01 	lds	r23, 0x0125
 6f2:	ce 01       	movw	r24, r28
 6f4:	80 de       	rcall	.-768    	; 0x3f6 <changePosition>
				break;

			case PLAYING:
				lcd_writeLine("in game         ", 0);
				//refresh locations of the snake:
				for(int i = snakelength; i > 0; i--)
 6f6:	21 97       	sbiw	r28, 0x01	; 1
 6f8:	c1 f7       	brne	.-16     	; 0x6ea <main+0x82>
					changePosition(i, lastPressed);
				//check for collision
				checkColission();
 6fa:	4a df       	rcall	.-364    	; 0x590 <checkColission>

				//clear the screen
				twi_clear();
 6fc:	ae dd       	rcall	.-1188   	; 0x25a <twi_clear>

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
 6fe:	80 91 26 01 	lds	r24, 0x0126
 702:	90 91 27 01 	lds	r25, 0x0127
 706:	99 23       	and	r25, r25
 708:	0c f4       	brge	.+2      	; 0x70c <main+0xa4>
 70a:	6b c0       	rjmp	.+214    	; 0x7e2 <main+0x17a>
 70c:	c0 e0       	ldi	r28, 0x00	; 0
 70e:	d0 e0       	ldi	r29, 0x00	; 0
					twi_position(allPositions[i]);
 710:	fe 01       	movw	r30, r28
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	e5 59       	subi	r30, 0x95	; 149
 718:	fe 4f       	sbci	r31, 0xFE	; 254
 71a:	80 81       	ld	r24, Z
 71c:	91 81       	ldd	r25, Z+1	; 0x01
 71e:	f7 dd       	rcall	.-1042   	; 0x30e <twi_position>

				//clear the screen
				twi_clear();

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
 720:	21 96       	adiw	r28, 0x01	; 1
 722:	80 91 26 01 	lds	r24, 0x0126
 726:	90 91 27 01 	lds	r25, 0x0127
 72a:	8c 17       	cp	r24, r28
 72c:	9d 07       	cpc	r25, r29
 72e:	84 f7       	brge	.-32     	; 0x710 <main+0xa8>
 730:	58 c0       	rjmp	.+176    	; 0x7e2 <main+0x17a>
					twi_position(allPositions[i]);
				
				for(int i = 0; i < 20; i++){
					checkinput();
 732:	23 de       	rcall	.-954    	; 0x37a <checkinput>
					wait(100);
 734:	84 e6       	ldi	r24, 0x64	; 100
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	b7 de       	rcall	.-658    	; 0x4a8 <wait>
 73a:	21 97       	sbiw	r28, 0x01	; 1

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
					twi_position(allPositions[i]);
				
				for(int i = 0; i < 20; i++){
 73c:	d1 f7       	brne	.-12     	; 0x732 <main+0xca>
 73e:	bb cf       	rjmp	.-138    	; 0x6b6 <main+0x4e>
				}
					
				break;

			case GAMEOVER:
				lcd_writeLine("GAME OVER!  s:", 0);
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	86 e5       	ldi	r24, 0x56	; 86
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	30 dd       	rcall	.-1440   	; 0x1aa <lcd_writeLine>
				lcd_writeChar('0' + score/10);
 74a:	20 91 68 01 	lds	r18, 0x0168
 74e:	30 91 69 01 	lds	r19, 0x0169
 752:	ad ec       	ldi	r26, 0xCD	; 205
 754:	bc ec       	ldi	r27, 0xCC	; 204
 756:	48 d0       	rcall	.+144    	; 0x7e8 <__umulhisi3>
 758:	96 95       	lsr	r25
 75a:	87 95       	ror	r24
 75c:	96 95       	lsr	r25
 75e:	87 95       	ror	r24
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	80 5d       	subi	r24, 0xD0	; 208
 766:	03 dd       	rcall	.-1530   	; 0x16e <lcd_writeChar>
				lcd_writeChar('0' + score %10);
 768:	40 91 68 01 	lds	r20, 0x0168
 76c:	50 91 69 01 	lds	r21, 0x0169
 770:	9a 01       	movw	r18, r20
 772:	ad ec       	ldi	r26, 0xCD	; 205
 774:	bc ec       	ldi	r27, 0xCC	; 204
 776:	38 d0       	rcall	.+112    	; 0x7e8 <__umulhisi3>
 778:	96 95       	lsr	r25
 77a:	87 95       	ror	r24
 77c:	96 95       	lsr	r25
 77e:	87 95       	ror	r24
 780:	96 95       	lsr	r25
 782:	87 95       	ror	r24
 784:	9c 01       	movw	r18, r24
 786:	22 0f       	add	r18, r18
 788:	33 1f       	adc	r19, r19
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	82 0f       	add	r24, r18
 798:	93 1f       	adc	r25, r19
 79a:	9a 01       	movw	r18, r20
 79c:	28 1b       	sub	r18, r24
 79e:	39 0b       	sbc	r19, r25
 7a0:	c9 01       	movw	r24, r18
 7a2:	80 5d       	subi	r24, 0xD0	; 208
 7a4:	e4 dc       	rcall	.-1592   	; 0x16e <lcd_writeChar>

				snakelength = 1;
 7a6:	d0 92 27 01 	sts	0x0127, r13
 7aa:	c0 92 26 01 	sts	0x0126, r12
				lastPressed = -1;
 7ae:	f0 92 25 01 	sts	0x0125, r15
 7b2:	e0 92 24 01 	sts	0x0124, r14
				allPositions[HEAD].y = 0x08;
 7b6:	f8 01       	movw	r30, r16
 7b8:	b3 82       	std	Z+3, r11	; 0x03
				allPositions[HEAD].x = 0x08;
 7ba:	b2 82       	std	Z+2, r11	; 0x02
				score = 0;
 7bc:	10 92 69 01 	sts	0x0169, r1
 7c0:	10 92 68 01 	sts	0x0168, r1
 7c4:	ca 2d       	mov	r28, r10
 7c6:	d7 2d       	mov	r29, r7
				for(int i = 0; i <5; i++){
					twi_fill();
 7c8:	89 dd       	rcall	.-1262   	; 0x2dc <twi_fill>
					wait(1000);
 7ca:	88 ee       	ldi	r24, 0xE8	; 232
 7cc:	93 e0       	ldi	r25, 0x03	; 3
 7ce:	6c de       	rcall	.-808    	; 0x4a8 <wait>
					twi_clear();
 7d0:	44 dd       	rcall	.-1400   	; 0x25a <twi_clear>
					wait(1000);
 7d2:	88 ee       	ldi	r24, 0xE8	; 232
 7d4:	93 e0       	ldi	r25, 0x03	; 3
 7d6:	68 de       	rcall	.-816    	; 0x4a8 <wait>
 7d8:	21 97       	sbiw	r28, 0x01	; 1
				snakelength = 1;
				lastPressed = -1;
				allPositions[HEAD].y = 0x08;
				allPositions[HEAD].x = 0x08;
				score = 0;
				for(int i = 0; i <5; i++){
 7da:	b1 f7       	brne	.-20     	; 0x7c8 <main+0x160>
					twi_fill();
					wait(1000);
					twi_clear();
					wait(1000);
				}
				status = MENU;
 7dc:	10 92 6a 01 	sts	0x016A, r1
				//checkinput()
				break;
 7e0:	6a cf       	rjmp	.-300    	; 0x6b6 <main+0x4e>

				//clear the screen
				twi_clear();

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
 7e2:	c8 2d       	mov	r28, r8
 7e4:	d9 2d       	mov	r29, r9
 7e6:	a5 cf       	rjmp	.-182    	; 0x732 <main+0xca>

000007e8 <__umulhisi3>:
 7e8:	a2 9f       	mul	r26, r18
 7ea:	b0 01       	movw	r22, r0
 7ec:	b3 9f       	mul	r27, r19
 7ee:	c0 01       	movw	r24, r0
 7f0:	a3 9f       	mul	r26, r19
 7f2:	70 0d       	add	r23, r0
 7f4:	81 1d       	adc	r24, r1
 7f6:	11 24       	eor	r1, r1
 7f8:	91 1d       	adc	r25, r1
 7fa:	b2 9f       	mul	r27, r18
 7fc:	70 0d       	add	r23, r0
 7fe:	81 1d       	adc	r24, r1
 800:	11 24       	eor	r1, r1
 802:	91 1d       	adc	r25, r1
 804:	08 95       	ret

00000806 <do_rand>:
 806:	8f 92       	push	r8
 808:	9f 92       	push	r9
 80a:	af 92       	push	r10
 80c:	bf 92       	push	r11
 80e:	cf 92       	push	r12
 810:	df 92       	push	r13
 812:	ef 92       	push	r14
 814:	ff 92       	push	r15
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	ec 01       	movw	r28, r24
 81c:	68 81       	ld	r22, Y
 81e:	79 81       	ldd	r23, Y+1	; 0x01
 820:	8a 81       	ldd	r24, Y+2	; 0x02
 822:	9b 81       	ldd	r25, Y+3	; 0x03
 824:	61 15       	cp	r22, r1
 826:	71 05       	cpc	r23, r1
 828:	81 05       	cpc	r24, r1
 82a:	91 05       	cpc	r25, r1
 82c:	21 f4       	brne	.+8      	; 0x836 <do_rand+0x30>
 82e:	64 e2       	ldi	r22, 0x24	; 36
 830:	79 ed       	ldi	r23, 0xD9	; 217
 832:	8b e5       	ldi	r24, 0x5B	; 91
 834:	97 e0       	ldi	r25, 0x07	; 7
 836:	2d e1       	ldi	r18, 0x1D	; 29
 838:	33 ef       	ldi	r19, 0xF3	; 243
 83a:	41 e0       	ldi	r20, 0x01	; 1
 83c:	50 e0       	ldi	r21, 0x00	; 0
 83e:	38 d0       	rcall	.+112    	; 0x8b0 <__divmodsi4>
 840:	49 01       	movw	r8, r18
 842:	5a 01       	movw	r10, r20
 844:	9b 01       	movw	r18, r22
 846:	ac 01       	movw	r20, r24
 848:	a7 ea       	ldi	r26, 0xA7	; 167
 84a:	b1 e4       	ldi	r27, 0x41	; 65
 84c:	4d d0       	rcall	.+154    	; 0x8e8 <__muluhisi3>
 84e:	6b 01       	movw	r12, r22
 850:	7c 01       	movw	r14, r24
 852:	ac ee       	ldi	r26, 0xEC	; 236
 854:	b4 ef       	ldi	r27, 0xF4	; 244
 856:	a5 01       	movw	r20, r10
 858:	94 01       	movw	r18, r8
 85a:	52 d0       	rcall	.+164    	; 0x900 <__mulohisi3>
 85c:	dc 01       	movw	r26, r24
 85e:	cb 01       	movw	r24, r22
 860:	8c 0d       	add	r24, r12
 862:	9d 1d       	adc	r25, r13
 864:	ae 1d       	adc	r26, r14
 866:	bf 1d       	adc	r27, r15
 868:	b7 ff       	sbrs	r27, 7
 86a:	03 c0       	rjmp	.+6      	; 0x872 <do_rand+0x6c>
 86c:	01 97       	sbiw	r24, 0x01	; 1
 86e:	a1 09       	sbc	r26, r1
 870:	b0 48       	sbci	r27, 0x80	; 128
 872:	88 83       	st	Y, r24
 874:	99 83       	std	Y+1, r25	; 0x01
 876:	aa 83       	std	Y+2, r26	; 0x02
 878:	bb 83       	std	Y+3, r27	; 0x03
 87a:	9f 77       	andi	r25, 0x7F	; 127
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	ff 90       	pop	r15
 882:	ef 90       	pop	r14
 884:	df 90       	pop	r13
 886:	cf 90       	pop	r12
 888:	bf 90       	pop	r11
 88a:	af 90       	pop	r10
 88c:	9f 90       	pop	r9
 88e:	8f 90       	pop	r8
 890:	08 95       	ret

00000892 <rand_r>:
 892:	b9 cf       	rjmp	.-142    	; 0x806 <do_rand>

00000894 <rand>:
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	b6 cf       	rjmp	.-148    	; 0x806 <do_rand>

0000089a <srand>:
 89a:	a0 e0       	ldi	r26, 0x00	; 0
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	80 93 00 01 	sts	0x0100, r24
 8a2:	90 93 01 01 	sts	0x0101, r25
 8a6:	a0 93 02 01 	sts	0x0102, r26
 8aa:	b0 93 03 01 	sts	0x0103, r27
 8ae:	08 95       	ret

000008b0 <__divmodsi4>:
 8b0:	05 2e       	mov	r0, r21
 8b2:	97 fb       	bst	r25, 7
 8b4:	16 f4       	brtc	.+4      	; 0x8ba <__divmodsi4+0xa>
 8b6:	00 94       	com	r0
 8b8:	0f d0       	rcall	.+30     	; 0x8d8 <__negsi2>
 8ba:	57 fd       	sbrc	r21, 7
 8bc:	05 d0       	rcall	.+10     	; 0x8c8 <__divmodsi4_neg2>
 8be:	24 d0       	rcall	.+72     	; 0x908 <__udivmodsi4>
 8c0:	07 fc       	sbrc	r0, 7
 8c2:	02 d0       	rcall	.+4      	; 0x8c8 <__divmodsi4_neg2>
 8c4:	46 f4       	brtc	.+16     	; 0x8d6 <__divmodsi4_exit>
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__negsi2>

000008c8 <__divmodsi4_neg2>:
 8c8:	50 95       	com	r21
 8ca:	40 95       	com	r20
 8cc:	30 95       	com	r19
 8ce:	21 95       	neg	r18
 8d0:	3f 4f       	sbci	r19, 0xFF	; 255
 8d2:	4f 4f       	sbci	r20, 0xFF	; 255
 8d4:	5f 4f       	sbci	r21, 0xFF	; 255

000008d6 <__divmodsi4_exit>:
 8d6:	08 95       	ret

000008d8 <__negsi2>:
 8d8:	90 95       	com	r25
 8da:	80 95       	com	r24
 8dc:	70 95       	com	r23
 8de:	61 95       	neg	r22
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
 8e2:	8f 4f       	sbci	r24, 0xFF	; 255
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	08 95       	ret

000008e8 <__muluhisi3>:
 8e8:	7f df       	rcall	.-258    	; 0x7e8 <__umulhisi3>
 8ea:	a5 9f       	mul	r26, r21
 8ec:	90 0d       	add	r25, r0
 8ee:	b4 9f       	mul	r27, r20
 8f0:	90 0d       	add	r25, r0
 8f2:	a4 9f       	mul	r26, r20
 8f4:	80 0d       	add	r24, r0
 8f6:	91 1d       	adc	r25, r1
 8f8:	11 24       	eor	r1, r1
 8fa:	08 95       	ret

000008fc <__mulshisi3>:
 8fc:	b7 ff       	sbrs	r27, 7
 8fe:	f4 cf       	rjmp	.-24     	; 0x8e8 <__muluhisi3>

00000900 <__mulohisi3>:
 900:	f3 df       	rcall	.-26     	; 0x8e8 <__muluhisi3>
 902:	82 1b       	sub	r24, r18
 904:	93 0b       	sbc	r25, r19
 906:	08 95       	ret

00000908 <__udivmodsi4>:
 908:	a1 e2       	ldi	r26, 0x21	; 33
 90a:	1a 2e       	mov	r1, r26
 90c:	aa 1b       	sub	r26, r26
 90e:	bb 1b       	sub	r27, r27
 910:	fd 01       	movw	r30, r26
 912:	0d c0       	rjmp	.+26     	; 0x92e <__udivmodsi4_ep>

00000914 <__udivmodsi4_loop>:
 914:	aa 1f       	adc	r26, r26
 916:	bb 1f       	adc	r27, r27
 918:	ee 1f       	adc	r30, r30
 91a:	ff 1f       	adc	r31, r31
 91c:	a2 17       	cp	r26, r18
 91e:	b3 07       	cpc	r27, r19
 920:	e4 07       	cpc	r30, r20
 922:	f5 07       	cpc	r31, r21
 924:	20 f0       	brcs	.+8      	; 0x92e <__udivmodsi4_ep>
 926:	a2 1b       	sub	r26, r18
 928:	b3 0b       	sbc	r27, r19
 92a:	e4 0b       	sbc	r30, r20
 92c:	f5 0b       	sbc	r31, r21

0000092e <__udivmodsi4_ep>:
 92e:	66 1f       	adc	r22, r22
 930:	77 1f       	adc	r23, r23
 932:	88 1f       	adc	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	1a 94       	dec	r1
 938:	69 f7       	brne	.-38     	; 0x914 <__udivmodsi4_loop>
 93a:	60 95       	com	r22
 93c:	70 95       	com	r23
 93e:	80 95       	com	r24
 940:	90 95       	com	r25
 942:	9b 01       	movw	r18, r22
 944:	ac 01       	movw	r20, r24
 946:	bd 01       	movw	r22, r26
 948:	cf 01       	movw	r24, r30
 94a:	08 95       	ret

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
