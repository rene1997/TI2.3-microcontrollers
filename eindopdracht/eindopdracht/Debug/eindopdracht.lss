
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000537  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c1  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ec  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000701d  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000228  00000000  00000000  000081ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00008415  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000250  00000000  00000000  000084ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	bc d0       	rcall	.+376    	; 0x222 <main>
  aa:	ee c0       	rjmp	.+476    	; 0x288 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <buttoninit>:
		twi_tx(0xE0);	// Display I2C addres + R/W bit
		twi_tx(i);	// Address
		twi_tx(0xFF);	// data
		twi_stop();
	}
}
  ae:	17 ba       	out	0x17, r1	; 23
  b0:	14 ba       	out	0x14, r1	; 20
  b2:	08 95       	ret

000000b4 <changePosition>:
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	51 f0       	breq	.+20     	; 0xce <changePosition+0x1a>
  ba:	1c f4       	brge	.+6      	; 0xc2 <changePosition+0xe>
  bc:	89 2b       	or	r24, r25
  be:	29 f1       	breq	.+74     	; 0x10a <changePosition+0x56>
  c0:	08 95       	ret
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	91 05       	cpc	r25, r1
  c6:	59 f0       	breq	.+22     	; 0xde <changePosition+0x2a>
  c8:	03 97       	sbiw	r24, 0x03	; 3
  ca:	b9 f0       	breq	.+46     	; 0xfa <changePosition+0x46>
  cc:	08 95       	ret
  ce:	80 91 02 01 	lds	r24, 0x0102
  d2:	88 23       	and	r24, r24
  d4:	49 f1       	breq	.+82     	; 0x128 <changePosition+0x74>
  d6:	82 50       	subi	r24, 0x02	; 2
  d8:	80 93 02 01 	sts	0x0102, r24
  dc:	08 95       	ret
  de:	80 91 03 01 	lds	r24, 0x0103
  e2:	80 34       	cpi	r24, 0x40	; 64
  e4:	20 f4       	brcc	.+8      	; 0xee <changePosition+0x3a>
  e6:	88 0f       	add	r24, r24
  e8:	80 93 03 01 	sts	0x0103, r24
  ec:	08 95       	ret
  ee:	80 38       	cpi	r24, 0x80	; 128
  f0:	d9 f4       	brne	.+54     	; 0x128 <changePosition+0x74>
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 03 01 	sts	0x0103, r24
  f8:	08 95       	ret
  fa:	80 91 02 01 	lds	r24, 0x0102
  fe:	8e 30       	cpi	r24, 0x0E	; 14
 100:	98 f4       	brcc	.+38     	; 0x128 <changePosition+0x74>
 102:	8e 5f       	subi	r24, 0xFE	; 254
 104:	80 93 02 01 	sts	0x0102, r24
 108:	08 95       	ret
 10a:	80 91 03 01 	lds	r24, 0x0103
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	21 f4       	brne	.+8      	; 0x11a <changePosition+0x66>
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	80 93 03 01 	sts	0x0103, r24
 118:	08 95       	ret
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	28 f0       	brcs	.+10     	; 0x128 <changePosition+0x74>
 11e:	80 38       	cpi	r24, 0x80	; 128
 120:	19 f0       	breq	.+6      	; 0x128 <changePosition+0x74>
 122:	86 95       	lsr	r24
 124:	80 93 03 01 	sts	0x0103, r24
 128:	08 95       	ret

0000012a <checkinput>:
 12a:	b0 9b       	sbis	0x16, 0	; 22
 12c:	07 c0       	rjmp	.+14     	; 0x13c <checkinput+0x12>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 01 01 	sts	0x0101, r25
 136:	80 93 00 01 	sts	0x0100, r24
 13a:	18 c0       	rjmp	.+48     	; 0x16c <checkinput+0x42>
 13c:	b1 9b       	sbis	0x16, 1	; 22
 13e:	07 c0       	rjmp	.+14     	; 0x14e <checkinput+0x24>
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 01 01 	sts	0x0101, r25
 148:	80 93 00 01 	sts	0x0100, r24
 14c:	0f c0       	rjmp	.+30     	; 0x16c <checkinput+0x42>
 14e:	b2 9b       	sbis	0x16, 2	; 22
 150:	07 c0       	rjmp	.+14     	; 0x160 <checkinput+0x36>
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 01 01 	sts	0x0101, r25
 15a:	80 93 00 01 	sts	0x0100, r24
 15e:	06 c0       	rjmp	.+12     	; 0x16c <checkinput+0x42>
 160:	99 9b       	sbis	0x13, 1	; 19
 162:	04 c0       	rjmp	.+8      	; 0x16c <checkinput+0x42>
 164:	10 92 01 01 	sts	0x0101, r1
 168:	10 92 00 01 	sts	0x0100, r1
 16c:	80 91 00 01 	lds	r24, 0x0100
 170:	90 91 01 01 	lds	r25, 0x0101
 174:	9f cf       	rjmp	.-194    	; 0xb4 <changePosition>
 176:	08 95       	ret

00000178 <twi_init>:
 178:	10 92 71 00 	sts	0x0071, r1
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	80 93 70 00 	sts	0x0070, r24
 182:	08 95       	ret

00000184 <twi_start>:
 184:	84 ea       	ldi	r24, 0xA4	; 164
 186:	80 93 74 00 	sts	0x0074, r24
 18a:	e4 e7       	ldi	r30, 0x74	; 116
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	88 23       	and	r24, r24
 192:	ec f7       	brge	.-6      	; 0x18e <twi_start+0xa>
 194:	08 95       	ret

00000196 <twi_tx>:
 196:	80 93 73 00 	sts	0x0073, r24
 19a:	84 e8       	ldi	r24, 0x84	; 132
 19c:	80 93 74 00 	sts	0x0074, r24
 1a0:	e4 e7       	ldi	r30, 0x74	; 116
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	ec f7       	brge	.-6      	; 0x1a4 <twi_tx+0xe>
 1aa:	08 95       	ret

000001ac <twi_clear>:
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	04 e7       	ldi	r16, 0x74	; 116
 1b8:	10 e0       	ldi	r17, 0x00	; 0
 1ba:	d4 e9       	ldi	r29, 0x94	; 148
 1bc:	e3 df       	rcall	.-58     	; 0x184 <twi_start>
 1be:	80 ee       	ldi	r24, 0xE0	; 224
 1c0:	ea df       	rcall	.-44     	; 0x196 <twi_tx>
 1c2:	8c 2f       	mov	r24, r28
 1c4:	e8 df       	rcall	.-48     	; 0x196 <twi_tx>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	e6 df       	rcall	.-52     	; 0x196 <twi_tx>
 1ca:	f8 01       	movw	r30, r16
 1cc:	d0 83       	st	Z, r29
 1ce:	ce 5f       	subi	r28, 0xFE	; 254
 1d0:	c0 31       	cpi	r28, 0x10	; 16
 1d2:	a1 f7       	brne	.-24     	; 0x1bc <twi_clear+0x10>
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <twi_position>:

void twi_position(POSITION position){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	d8 2f       	mov	r29, r24
 1e4:	c9 2f       	mov	r28, r25
	

	twi_start();
 1e6:	ce df       	rcall	.-100    	; 0x184 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 1e8:	80 ee       	ldi	r24, 0xE0	; 224
 1ea:	d5 df       	rcall	.-86     	; 0x196 <twi_tx>
	twi_tx(position.x);	// Address
 1ec:	8d 2f       	mov	r24, r29
 1ee:	d3 df       	rcall	.-90     	; 0x196 <twi_tx>
	twi_tx(position.y);	// data
 1f0:	8c 2f       	mov	r24, r28
 1f2:	d1 df       	rcall	.-94     	; 0x196 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1f4:	84 e9       	ldi	r24, 0x94	; 148
 1f6:	80 93 74 00 	sts	0x0074, r24
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(position.x);	// Address
	twi_tx(position.y);	// data
	twi_stop();
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 200:	18 16       	cp	r1, r24
 202:	19 06       	cpc	r1, r25
 204:	6c f4       	brge	.+26     	; 0x220 <wait+0x20>
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	e9 ef       	ldi	r30, 0xF9	; 249
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <wait+0xe>
 212:	00 c0       	rjmp	.+0      	; 0x214 <wait+0x14>
 214:	00 00       	nop
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	28 17       	cp	r18, r24
 21c:	39 07       	cpc	r19, r25
 21e:	a9 f7       	brne	.-22     	; 0x20a <wait+0xa>
 220:	08 95       	ret

00000222 <main>:
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	
	twi_init();		// Init TWI interface
 222:	aa df       	rcall	.-172    	; 0x178 <twi_init>
	buttoninit();	// Init buttons for snake
 224:	44 df       	rcall	.-376    	; 0xae <buttoninit>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 226:	ae df       	rcall	.-164    	; 0x184 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 228:	80 ee       	ldi	r24, 0xE0	; 224
 22a:	b5 df       	rcall	.-150    	; 0x196 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 22c:	81 e2       	ldi	r24, 0x21	; 33
 22e:	b3 df       	rcall	.-154    	; 0x196 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 230:	c4 e7       	ldi	r28, 0x74	; 116
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	14 e9       	ldi	r17, 0x94	; 148
 236:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
	
	twi_start();
 238:	a5 df       	rcall	.-182    	; 0x184 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 23a:	80 ee       	ldi	r24, 0xE0	; 224
 23c:	ac df       	rcall	.-168    	; 0x196 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 23e:	80 ea       	ldi	r24, 0xA0	; 160
 240:	aa df       	rcall	.-172    	; 0x196 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 242:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 244:	9f df       	rcall	.-194    	; 0x184 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 246:	80 ee       	ldi	r24, 0xE0	; 224
 248:	a6 df       	rcall	.-180    	; 0x196 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 24a:	83 ee       	ldi	r24, 0xE3	; 227
 24c:	a4 df       	rcall	.-184    	; 0x196 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 24e:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 250:	99 df       	rcall	.-206    	; 0x184 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 252:	80 ee       	ldi	r24, 0xE0	; 224
 254:	a0 df       	rcall	.-192    	; 0x196 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 256:	81 e8       	ldi	r24, 0x81	; 129
 258:	9e df       	rcall	.-196    	; 0x196 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 25a:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();

	twi_clear();
 25c:	a7 df       	rcall	.-178    	; 0x1ac <twi_clear>

	position.x = 0x08;
 25e:	e2 e0       	ldi	r30, 0x02	; 2
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	80 83       	st	Z, r24
	position.y = 0x08;
 266:	81 83       	std	Z+1, r24	; 0x01
	twi_position(position);
 268:	80 91 02 01 	lds	r24, 0x0102
 26c:	90 91 03 01 	lds	r25, 0x0103
 270:	b6 df       	rcall	.-148    	; 0x1de <twi_position>
	while (1)
	{
		
		checkinput();
 272:	5b df       	rcall	.-330    	; 0x12a <checkinput>
		twi_clear();
 274:	9b df       	rcall	.-202    	; 0x1ac <twi_clear>
		twi_position(position);
 276:	80 91 02 01 	lds	r24, 0x0102
 27a:	90 91 03 01 	lds	r25, 0x0103
 27e:	af df       	rcall	.-162    	; 0x1de <twi_position>
		wait(1000);
 280:	88 ee       	ldi	r24, 0xE8	; 232
 282:	93 e0       	ldi	r25, 0x03	; 3
 284:	bd df       	rcall	.-134    	; 0x200 <wait>
		twi_tx(0x55);	// data
		//twi_tx(0x00);	// data
		twi_stop();	

		wait(1000);*/
	}
 286:	f5 cf       	rjmp	.-22     	; 0x272 <main+0x50>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
