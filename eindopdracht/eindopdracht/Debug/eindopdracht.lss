
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000778  0000080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  0080012a  0080012a  00000836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a83  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000044a  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b93  00000000  00000000  00001831  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  000023c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007490  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006cf  00000000  00000000  00009a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000a167  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002c79  00000000  00000000  0000a2bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 3a       	cpi	r26, 0xAE	; 174
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	63 d2       	rcall	.+1222   	; 0x58a <main>
  c4:	57 c3       	rjmp	.+1710   	; 0x774 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
  c8:	10 92 71 00 	sts	0x0071, r1
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 
	 TWDR = data;
  e6:	80 93 73 00 	sts	0x0073, r24
	 TWCR = (1<<TWINT) | (1<<TWEN);
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24

	 while(!(TWCR & (1<<TWINT)));
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>

	 //TWCR = (0x80 | 0x04);
	 //while( 0 == (TWCR & 0x80) );
  fa:	08 95       	ret

000000fc <twi_clear>:
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 }

 void twi_clear(void){
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	c0 e0       	ldi	r28, 0x00	; 0
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 106:	04 e7       	ldi	r16, 0x74	; 116
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	d4 e9       	ldi	r29, 0x94	; 148
 }

 void twi_clear(void){
	 int i = 0x00;
	 for(; i <= 0x0E; i += 0x02){
		 twi_start();
 10c:	e3 df       	rcall	.-58     	; 0xd4 <twi_start>
		 twi_tx(0xE0);	// Display I2C addres + R/W bit
 10e:	80 ee       	ldi	r24, 0xE0	; 224
 110:	ea df       	rcall	.-44     	; 0xe6 <twi_tx>
		 twi_tx(i);	// Address
 112:	8c 2f       	mov	r24, r28
 114:	e8 df       	rcall	.-48     	; 0xe6 <twi_tx>
		 twi_tx(0x00);	// data
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	e6 df       	rcall	.-52     	; 0xe6 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 11a:	f8 01       	movw	r30, r16
 11c:	d0 83       	st	Z, r29
 11e:	ce 5f       	subi	r28, 0xFE	; 254
 }

 void twi_clear(void){
	 int i = 0x00;
	 for(; i <= 0x0E; i += 0x02){
 120:	c0 31       	cpi	r28, 0x10	; 16
 122:	a1 f7       	brne	.-24     	; 0x10c <twi_clear+0x10>
		 twi_tx(0xE0);	// Display I2C addres + R/W bit
		 twi_tx(i);	// Address
		 twi_tx(0x00);	// data
		 twi_stop();
	 }
 }
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <initMatrix>:


 yPositions[8] = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
 xPositions[8] = {0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E};

 void initMatrix(){
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
	wait(25);
 134:	89 e1       	ldi	r24, 0x19	; 25
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 d1       	rcall	.+528    	; 0x34a <wait>
	twi_init();		// Init TWI interface
 13a:	c6 df       	rcall	.-116    	; 0xc8 <twi_init>
	buttoninit();	// Init buttons for snake
 13c:	6c d0       	rcall	.+216    	; 0x216 <buttoninit>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 13e:	ca df       	rcall	.-108    	; 0xd4 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 140:	80 ee       	ldi	r24, 0xE0	; 224
 142:	d1 df       	rcall	.-94     	; 0xe6 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 144:	81 e2       	ldi	r24, 0x21	; 33
 146:	cf df       	rcall	.-98     	; 0xe6 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 148:	c4 e7       	ldi	r28, 0x74	; 116
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	14 e9       	ldi	r17, 0x94	; 148
 14e:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
	
	twi_start();
 150:	c1 df       	rcall	.-126    	; 0xd4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 152:	80 ee       	ldi	r24, 0xE0	; 224
 154:	c8 df       	rcall	.-112    	; 0xe6 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 156:	80 ea       	ldi	r24, 0xA0	; 160
 158:	c6 df       	rcall	.-116    	; 0xe6 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 15a:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 15c:	bb df       	rcall	.-138    	; 0xd4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 15e:	80 ee       	ldi	r24, 0xE0	; 224
 160:	c2 df       	rcall	.-124    	; 0xe6 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 162:	83 ee       	ldi	r24, 0xE3	; 227
 164:	c0 df       	rcall	.-128    	; 0xe6 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 166:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 168:	b5 df       	rcall	.-150    	; 0xd4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 16a:	80 ee       	ldi	r24, 0xE0	; 224
 16c:	bc df       	rcall	.-136    	; 0xe6 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 16e:	81 e8       	ldi	r24, 0x81	; 129
 170:	ba df       	rcall	.-140    	; 0xe6 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 172:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();

	twi_clear();
 174:	c3 df       	rcall	.-122    	; 0xfc <twi_clear>
 }
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	08 95       	ret

0000017e <twi_fill>:
		 twi_tx(0x00);	// data
		 twi_stop();
	 }
 }

 void twi_fill(){
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	c0 e0       	ldi	r28, 0x00	; 0
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 188:	04 e7       	ldi	r16, 0x74	; 116
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	d4 e9       	ldi	r29, 0x94	; 148
 }

 void twi_fill(){
	 int i = 0x00;
	 for(; i <= 0x0E; i += 0x02){
		 twi_start();
 18e:	a2 df       	rcall	.-188    	; 0xd4 <twi_start>
		 twi_tx(0xE0);	// Display I2C addres + R/W bit
 190:	80 ee       	ldi	r24, 0xE0	; 224
 192:	a9 df       	rcall	.-174    	; 0xe6 <twi_tx>
		 twi_tx(i);	// Address
 194:	8c 2f       	mov	r24, r28
 196:	a7 df       	rcall	.-178    	; 0xe6 <twi_tx>
		 twi_tx(0xFF);	// data
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	a5 df       	rcall	.-182    	; 0xe6 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 19c:	f8 01       	movw	r30, r16
 19e:	d0 83       	st	Z, r29
 1a0:	ce 5f       	subi	r28, 0xFE	; 254
	 }
 }

 void twi_fill(){
	 int i = 0x00;
	 for(; i <= 0x0E; i += 0x02){
 1a2:	c0 31       	cpi	r28, 0x10	; 16
 1a4:	a1 f7       	brne	.-24     	; 0x18e <twi_fill+0x10>
		 twi_tx(0xE0);	// Display I2C addres + R/W bit
		 twi_tx(i);	// Address
		 twi_tx(0xFF);	// data
		 twi_stop();
	 }
 }
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <twi_position>:

 void twi_position(POSITION position){
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	08 2f       	mov	r16, r24
 1ba:	d9 2f       	mov	r29, r25
 1bc:	c8 2f       	mov	r28, r24
 1be:	19 2f       	mov	r17, r25
	 

	 twi_start();
 1c0:	89 df       	rcall	.-238    	; 0xd4 <twi_start>
	 twi_tx(0xE0);	// Display I2C addres + R/W bit
 1c2:	80 ee       	ldi	r24, 0xE0	; 224
 1c4:	90 df       	rcall	.-224    	; 0xe6 <twi_tx>
	 twi_tx(position.x);	// Address
 1c6:	80 2f       	mov	r24, r16
 1c8:	8e df       	rcall	.-228    	; 0xe6 <twi_tx>
	 int y = position.y;
 1ca:	6d 2f       	mov	r22, r29
 1cc:	70 e0       	ldi	r23, 0x00	; 0
	 for(int i = 0; i <= snakelength; i++){
 1ce:	40 91 26 01 	lds	r20, 0x0126
 1d2:	50 91 27 01 	lds	r21, 0x0127
 1d6:	55 23       	and	r21, r21
 1d8:	a4 f0       	brlt	.+40     	; 0x202 <twi_position+0x52>
 1da:	ef e2       	ldi	r30, 0x2F	; 47
 1dc:	f1 e0       	ldi	r31, 0x01	; 1
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	df 01       	movw	r26, r30
 1e4:	11 97       	sbiw	r26, 0x01	; 1
		 if(position.x == allPositions[i].x && position.y != allPositions[i].y){
 1e6:	9c 91       	ld	r25, X
 1e8:	9c 13       	cpse	r25, r28
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <twi_position+0x46>
 1ec:	90 81       	ld	r25, Z
 1ee:	91 17       	cp	r25, r17
 1f0:	11 f0       	breq	.+4      	; 0x1f6 <twi_position+0x46>
			 y = allPositions[i].y + y;
 1f2:	69 0f       	add	r22, r25
 1f4:	71 1d       	adc	r23, r1

	 twi_start();
	 twi_tx(0xE0);	// Display I2C addres + R/W bit
	 twi_tx(position.x);	// Address
	 int y = position.y;
	 for(int i = 0; i <= snakelength; i++){
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	32 96       	adiw	r30, 0x02	; 2
 1fc:	42 17       	cp	r20, r18
 1fe:	53 07       	cpc	r21, r19
 200:	84 f7       	brge	.-32     	; 0x1e2 <twi_position+0x32>
		 if(position.x == allPositions[i].x && position.y != allPositions[i].y){
			 y = allPositions[i].y + y;
		}
	 }
	 
	 twi_tx(y);	// data
 202:	86 2f       	mov	r24, r22
 204:	70 df       	rcall	.-288    	; 0xe6 <twi_tx>
 outputs:
 notes:
 Version :    	DMK, Initial code
 *******************************************************************/
 {
	 TWCR = (0x80 | 0x10 | 0x04);
 206:	84 e9       	ldi	r24, 0x94	; 148
 208:	80 93 74 00 	sts	0x0074, r24
		}
	 }
	 
	 twi_tx(y);	// data
	 twi_stop();
 }
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <buttoninit>:
	if(a.x == b.x){
		if(a.y == b.y)
			return 1;
	}
	return 0;
}
 216:	17 ba       	out	0x17, r1	; 23
 218:	14 ba       	out	0x14, r1	; 20
 21a:	08 95       	ret

0000021c <checkinput>:
 21c:	80 91 2a 01 	lds	r24, 0x012A
 220:	90 91 2b 01 	lds	r25, 0x012B
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	81 31       	cpi	r24, 0x11	; 17
 228:	27 e2       	ldi	r18, 0x27	; 39
 22a:	92 07       	cpc	r25, r18
 22c:	28 f4       	brcc	.+10     	; 0x238 <checkinput+0x1c>
 22e:	90 93 2b 01 	sts	0x012B, r25
 232:	80 93 2a 01 	sts	0x012A, r24
 236:	04 c0       	rjmp	.+8      	; 0x240 <checkinput+0x24>
 238:	10 92 2b 01 	sts	0x012B, r1
 23c:	10 92 2a 01 	sts	0x012A, r1
 240:	b0 9b       	sbis	0x16, 0	; 22
 242:	07 c0       	rjmp	.+14     	; 0x252 <checkinput+0x36>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 25 01 	sts	0x0125, r25
 24c:	80 93 24 01 	sts	0x0124, r24
 250:	08 95       	ret
 252:	b1 9b       	sbis	0x16, 1	; 22
 254:	07 c0       	rjmp	.+14     	; 0x264 <checkinput+0x48>
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	90 93 25 01 	sts	0x0125, r25
 25e:	80 93 24 01 	sts	0x0124, r24
 262:	08 95       	ret
 264:	b2 9b       	sbis	0x16, 2	; 22
 266:	07 c0       	rjmp	.+14     	; 0x276 <checkinput+0x5a>
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 25 01 	sts	0x0125, r25
 270:	80 93 24 01 	sts	0x0124, r24
 274:	08 95       	ret
 276:	99 9b       	sbis	0x13, 1	; 19
 278:	05 c0       	rjmp	.+10     	; 0x284 <checkinput+0x68>
 27a:	10 92 25 01 	sts	0x0125, r1
 27e:	10 92 24 01 	sts	0x0124, r1
 282:	08 95       	ret
 284:	98 9b       	sbis	0x13, 0	; 19
 286:	07 c0       	rjmp	.+14     	; 0x296 <checkinput+0x7a>
 288:	80 91 28 01 	lds	r24, 0x0128
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	19 f0       	breq	.+6      	; 0x296 <checkinput+0x7a>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 28 01 	sts	0x0128, r24
 296:	08 95       	ret

00000298 <changePosition>:
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	91 05       	cpc	r25, r1
 29c:	81 f0       	breq	.+32     	; 0x2be <changePosition+0x26>
 29e:	dc 01       	movw	r26, r24
 2a0:	aa 0f       	add	r26, r26
 2a2:	bb 1f       	adc	r27, r27
 2a4:	a4 5d       	subi	r26, 0xD4	; 212
 2a6:	be 4f       	sbci	r27, 0xFE	; 254
 2a8:	2c 91       	ld	r18, X
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	fc 01       	movw	r30, r24
 2b0:	e2 5d       	subi	r30, 0xD2	; 210
 2b2:	fe 4f       	sbci	r31, 0xFE	; 254
 2b4:	20 83       	st	Z, r18
 2b6:	11 96       	adiw	r26, 0x01	; 1
 2b8:	8c 91       	ld	r24, X
 2ba:	81 83       	std	Z+1, r24	; 0x01
 2bc:	08 95       	ret
 2be:	61 30       	cpi	r22, 0x01	; 1
 2c0:	71 05       	cpc	r23, r1
 2c2:	59 f0       	breq	.+22     	; 0x2da <changePosition+0x42>
 2c4:	1c f4       	brge	.+6      	; 0x2cc <changePosition+0x34>
 2c6:	67 2b       	or	r22, r23
 2c8:	31 f1       	breq	.+76     	; 0x316 <changePosition+0x7e>
 2ca:	08 95       	ret
 2cc:	62 30       	cpi	r22, 0x02	; 2
 2ce:	71 05       	cpc	r23, r1
 2d0:	61 f0       	breq	.+24     	; 0x2ea <changePosition+0x52>
 2d2:	63 30       	cpi	r22, 0x03	; 3
 2d4:	71 05       	cpc	r23, r1
 2d6:	b9 f0       	breq	.+46     	; 0x306 <changePosition+0x6e>
 2d8:	08 95       	ret
 2da:	80 91 30 01 	lds	r24, 0x0130
 2de:	88 23       	and	r24, r24
 2e0:	49 f1       	breq	.+82     	; 0x334 <changePosition+0x9c>
 2e2:	82 50       	subi	r24, 0x02	; 2
 2e4:	80 93 30 01 	sts	0x0130, r24
 2e8:	08 95       	ret
 2ea:	80 91 31 01 	lds	r24, 0x0131
 2ee:	80 34       	cpi	r24, 0x40	; 64
 2f0:	20 f4       	brcc	.+8      	; 0x2fa <changePosition+0x62>
 2f2:	88 0f       	add	r24, r24
 2f4:	80 93 31 01 	sts	0x0131, r24
 2f8:	08 95       	ret
 2fa:	80 38       	cpi	r24, 0x80	; 128
 2fc:	d9 f4       	brne	.+54     	; 0x334 <changePosition+0x9c>
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 31 01 	sts	0x0131, r24
 304:	08 95       	ret
 306:	80 91 30 01 	lds	r24, 0x0130
 30a:	8e 30       	cpi	r24, 0x0E	; 14
 30c:	98 f4       	brcc	.+38     	; 0x334 <changePosition+0x9c>
 30e:	8e 5f       	subi	r24, 0xFE	; 254
 310:	80 93 30 01 	sts	0x0130, r24
 314:	08 95       	ret
 316:	80 91 31 01 	lds	r24, 0x0131
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	21 f4       	brne	.+8      	; 0x326 <changePosition+0x8e>
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	80 93 31 01 	sts	0x0131, r24
 324:	08 95       	ret
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	28 f0       	brcs	.+10     	; 0x334 <changePosition+0x9c>
 32a:	80 38       	cpi	r24, 0x80	; 128
 32c:	19 f0       	breq	.+6      	; 0x334 <changePosition+0x9c>
 32e:	86 95       	lsr	r24
 330:	80 93 31 01 	sts	0x0131, r24
 334:	08 95       	ret

00000336 <addSnakeLength>:
 336:	80 91 26 01 	lds	r24, 0x0126
 33a:	90 91 27 01 	lds	r25, 0x0127
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 27 01 	sts	0x0127, r25
 344:	80 93 26 01 	sts	0x0126, r24
 348:	08 95       	ret

0000034a <wait>:
 34a:	18 16       	cp	r1, r24
 34c:	19 06       	cpc	r1, r25
 34e:	6c f4       	brge	.+26     	; 0x36a <wait+0x20>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	e9 ef       	ldi	r30, 0xF9	; 249
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <wait+0xe>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <wait+0x14>
 35e:	00 00       	nop
 360:	2f 5f       	subi	r18, 0xFF	; 255
 362:	3f 4f       	sbci	r19, 0xFF	; 255
 364:	28 17       	cp	r18, r24
 366:	39 07       	cpc	r19, r25
 368:	a9 f7       	brne	.-22     	; 0x354 <wait+0xa>
 36a:	08 95       	ret

0000036c <setLootPosition>:
 36c:	af 92       	push	r10
 36e:	bf 92       	push	r11
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	80 91 2a 01 	lds	r24, 0x012A
 384:	90 91 2b 01 	lds	r25, 0x012B
 388:	8d d1       	rcall	.+794    	; 0x6a4 <srand>
 38a:	ce e2       	ldi	r28, 0x2E	; 46
 38c:	d1 e0       	ldi	r29, 0x01	; 1
 38e:	01 e3       	ldi	r16, 0x31	; 49
 390:	11 e0       	ldi	r17, 0x01	; 1
 392:	cc 24       	eor	r12, r12
 394:	c3 94       	inc	r12
 396:	d1 2c       	mov	r13, r1
 398:	e1 2c       	mov	r14, r1
 39a:	f1 2c       	mov	r15, r1
 39c:	80 d1       	rcall	.+768    	; 0x69e <rand>
 39e:	87 70       	andi	r24, 0x07	; 7
 3a0:	90 78       	andi	r25, 0x80	; 128
 3a2:	99 23       	and	r25, r25
 3a4:	24 f4       	brge	.+8      	; 0x3ae <setLootPosition+0x42>
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	88 6f       	ori	r24, 0xF8	; 248
 3aa:	9f 6f       	ori	r25, 0xFF	; 255
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	fc 01       	movw	r30, r24
 3b4:	ec 5f       	subi	r30, 0xFC	; 252
 3b6:	fe 4f       	sbci	r31, 0xFE	; 254
 3b8:	80 81       	ld	r24, Z
 3ba:	88 83       	st	Y, r24
 3bc:	70 d1       	rcall	.+736    	; 0x69e <rand>
 3be:	87 70       	andi	r24, 0x07	; 7
 3c0:	90 78       	andi	r25, 0x80	; 128
 3c2:	99 23       	and	r25, r25
 3c4:	24 f4       	brge	.+8      	; 0x3ce <setLootPosition+0x62>
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	88 6f       	ori	r24, 0xF8	; 248
 3ca:	9f 6f       	ori	r25, 0xFF	; 255
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	fc 01       	movw	r30, r24
 3d4:	ec 5e       	subi	r30, 0xEC	; 236
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	80 81       	ld	r24, Z
 3da:	89 83       	std	Y+1, r24	; 0x01
 3dc:	60 91 26 01 	lds	r22, 0x0126
 3e0:	70 91 27 01 	lds	r23, 0x0127
 3e4:	16 16       	cp	r1, r22
 3e6:	17 06       	cpc	r1, r23
 3e8:	cc f4       	brge	.+50     	; 0x41c <setLootPosition+0xb0>
 3ea:	b8 80       	ld	r11, Y
 3ec:	a8 2e       	mov	r10, r24
 3ee:	f8 01       	movw	r30, r16
 3f0:	8c 2d       	mov	r24, r12
 3f2:	9d 2d       	mov	r25, r13
 3f4:	4c 2d       	mov	r20, r12
 3f6:	5d 2d       	mov	r21, r13
 3f8:	30 81       	ld	r19, Z
 3fa:	df 01       	movw	r26, r30
 3fc:	11 97       	sbiw	r26, 0x01	; 1
 3fe:	2c 91       	ld	r18, X
 400:	2b 11       	cpse	r18, r11
 402:	04 c0       	rjmp	.+8      	; 0x40c <setLootPosition+0xa0>
 404:	a3 12       	cpse	r10, r19
 406:	02 c0       	rjmp	.+4      	; 0x40c <setLootPosition+0xa0>
 408:	4e 2d       	mov	r20, r14
 40a:	5f 2d       	mov	r21, r15
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	32 96       	adiw	r30, 0x02	; 2
 410:	68 17       	cp	r22, r24
 412:	79 07       	cpc	r23, r25
 414:	8c f7       	brge	.-30     	; 0x3f8 <setLootPosition+0x8c>
 416:	45 2b       	or	r20, r21
 418:	09 f4       	brne	.+2      	; 0x41c <setLootPosition+0xb0>
 41a:	c0 cf       	rjmp	.-128    	; 0x39c <setLootPosition+0x30>
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	df 90       	pop	r13
 42a:	cf 90       	pop	r12
 42c:	bf 90       	pop	r11
 42e:	af 90       	pop	r10
 430:	08 95       	ret

00000432 <checkColission>:
 432:	2f 92       	push	r2
 434:	3f 92       	push	r3
 436:	4f 92       	push	r4
 438:	5f 92       	push	r5
 43a:	6f 92       	push	r6
 43c:	7f 92       	push	r7
 43e:	8f 92       	push	r8
 440:	9f 92       	push	r9
 442:	af 92       	push	r10
 444:	bf 92       	push	r11
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	ee e2       	ldi	r30, 0x2E	; 46
 458:	f1 e0       	ldi	r31, 0x01	; 1
 45a:	92 81       	ldd	r25, Z+2	; 0x02
 45c:	80 81       	ld	r24, Z
 45e:	98 17       	cp	r25, r24
 460:	f9 f0       	breq	.+62     	; 0x4a0 <checkColission+0x6e>
 462:	80 91 26 01 	lds	r24, 0x0126
 466:	90 91 27 01 	lds	r25, 0x0127
 46a:	18 16       	cp	r1, r24
 46c:	19 06       	cpc	r1, r25
 46e:	0c f0       	brlt	.+2      	; 0x472 <checkColission+0x40>
 470:	79 c0       	rjmp	.+242    	; 0x564 <checkColission+0x132>
 472:	0f 2e       	mov	r0, r31
 474:	f1 e3       	ldi	r31, 0x31	; 49
 476:	6f 2e       	mov	r6, r31
 478:	f1 e0       	ldi	r31, 0x01	; 1
 47a:	7f 2e       	mov	r7, r31
 47c:	f0 2d       	mov	r31, r0
 47e:	88 24       	eor	r8, r8
 480:	83 94       	inc	r8
 482:	91 2c       	mov	r9, r1
 484:	21 2c       	mov	r2, r1
 486:	0f 2e       	mov	r0, r31
 488:	fe e2       	ldi	r31, 0x2E	; 46
 48a:	af 2e       	mov	r10, r31
 48c:	f1 e0       	ldi	r31, 0x01	; 1
 48e:	bf 2e       	mov	r11, r31
 490:	f0 2d       	mov	r31, r0
 492:	68 94       	set
 494:	55 24       	eor	r5, r5
 496:	53 f8       	bld	r5, 3
 498:	33 24       	eor	r3, r3
 49a:	33 94       	inc	r3
 49c:	42 2c       	mov	r4, r2
 49e:	59 c0       	rjmp	.+178    	; 0x552 <checkColission+0x120>
 4a0:	ee e2       	ldi	r30, 0x2E	; 46
 4a2:	f1 e0       	ldi	r31, 0x01	; 1
 4a4:	93 81       	ldd	r25, Z+3	; 0x03
 4a6:	81 81       	ldd	r24, Z+1	; 0x01
 4a8:	98 13       	cpse	r25, r24
 4aa:	db cf       	rjmp	.-74     	; 0x462 <checkColission+0x30>
 4ac:	5f df       	rcall	.-322    	; 0x36c <setLootPosition>
 4ae:	43 df       	rcall	.-378    	; 0x336 <addSnakeLength>
 4b0:	80 91 2c 01 	lds	r24, 0x012C
 4b4:	90 91 2d 01 	lds	r25, 0x012D
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	90 93 2d 01 	sts	0x012D, r25
 4be:	80 93 2c 01 	sts	0x012C, r24
 4c2:	50 c0       	rjmp	.+160    	; 0x564 <checkColission+0x132>
 4c4:	c1 e3       	ldi	r28, 0x31	; 49
 4c6:	d1 e0       	ldi	r29, 0x01	; 1
 4c8:	01 e0       	ldi	r16, 0x01	; 1
 4ca:	12 2d       	mov	r17, r2
 4cc:	63 01       	movw	r12, r6
 4ce:	73 01       	movw	r14, r6
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	e8 1a       	sub	r14, r24
 4d4:	f1 08       	sbc	r15, r1
 4d6:	f7 01       	movw	r30, r14
 4d8:	90 81       	ld	r25, Z
 4da:	fe 01       	movw	r30, r28
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	80 81       	ld	r24, Z
 4e0:	98 13       	cpse	r25, r24
 4e2:	20 c0       	rjmp	.+64     	; 0x524 <checkColission+0xf2>
 4e4:	f6 01       	movw	r30, r12
 4e6:	90 81       	ld	r25, Z
 4e8:	88 81       	ld	r24, Y
 4ea:	98 13       	cpse	r25, r24
 4ec:	1b c0       	rjmp	.+54     	; 0x524 <checkColission+0xf2>
 4ee:	80 16       	cp	r8, r16
 4f0:	91 06       	cpc	r9, r17
 4f2:	c1 f0       	breq	.+48     	; 0x524 <checkColission+0xf2>
 4f4:	30 92 26 01 	sts	0x0126, r3
 4f8:	40 92 27 01 	sts	0x0127, r4
 4fc:	f5 01       	movw	r30, r10
 4fe:	53 82       	std	Z+3, r5	; 0x03
 500:	52 82       	std	Z+2, r5	; 0x02
 502:	10 92 2d 01 	sts	0x012D, r1
 506:	10 92 2c 01 	sts	0x012C, r1
 50a:	39 de       	rcall	.-910    	; 0x17e <twi_fill>
 50c:	88 ee       	ldi	r24, 0xE8	; 232
 50e:	93 e0       	ldi	r25, 0x03	; 3
 510:	1c df       	rcall	.-456    	; 0x34a <wait>
 512:	f4 dd       	rcall	.-1048   	; 0xfc <twi_clear>
 514:	88 ee       	ldi	r24, 0xE8	; 232
 516:	93 e0       	ldi	r25, 0x03	; 3
 518:	18 df       	rcall	.-464    	; 0x34a <wait>
 51a:	31 de       	rcall	.-926    	; 0x17e <twi_fill>
 51c:	88 ee       	ldi	r24, 0xE8	; 232
 51e:	93 e0       	ldi	r25, 0x03	; 3
 520:	14 df       	rcall	.-472    	; 0x34a <wait>
 522:	ec dd       	rcall	.-1064   	; 0xfc <twi_clear>
 524:	0f 5f       	subi	r16, 0xFF	; 255
 526:	1f 4f       	sbci	r17, 0xFF	; 255
 528:	22 96       	adiw	r28, 0x02	; 2
 52a:	80 91 26 01 	lds	r24, 0x0126
 52e:	90 91 27 01 	lds	r25, 0x0127
 532:	80 17       	cp	r24, r16
 534:	91 07       	cpc	r25, r17
 536:	7c f6       	brge	.-98     	; 0x4d6 <checkColission+0xa4>
 538:	ff ef       	ldi	r31, 0xFF	; 255
 53a:	8f 1a       	sub	r8, r31
 53c:	9f 0a       	sbc	r9, r31
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	68 0e       	add	r6, r24
 542:	71 1c       	adc	r7, r1
 544:	80 91 26 01 	lds	r24, 0x0126
 548:	90 91 27 01 	lds	r25, 0x0127
 54c:	88 15       	cp	r24, r8
 54e:	99 05       	cpc	r25, r9
 550:	4c f0       	brlt	.+18     	; 0x564 <checkColission+0x132>
 552:	80 91 26 01 	lds	r24, 0x0126
 556:	90 91 27 01 	lds	r25, 0x0127
 55a:	18 16       	cp	r1, r24
 55c:	19 06       	cpc	r1, r25
 55e:	0c f4       	brge	.+2      	; 0x562 <checkColission+0x130>
 560:	b1 cf       	rjmp	.-158    	; 0x4c4 <checkColission+0x92>
 562:	ea cf       	rjmp	.-44     	; 0x538 <checkColission+0x106>
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	df 90       	pop	r13
 572:	cf 90       	pop	r12
 574:	bf 90       	pop	r11
 576:	af 90       	pop	r10
 578:	9f 90       	pop	r9
 57a:	8f 90       	pop	r8
 57c:	7f 90       	pop	r7
 57e:	6f 90       	pop	r6
 580:	5f 90       	pop	r5
 582:	4f 90       	pop	r4
 584:	3f 90       	pop	r3
 586:	2f 90       	pop	r2
 588:	08 95       	ret

0000058a <main>:
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	//init dot
	initMatrix();
 58a:	d1 dd       	rcall	.-1118   	; 0x12e <initMatrix>

	//set position of head snake
	allPositions[HEAD].x = 0x08;
 58c:	ee e2       	ldi	r30, 0x2E	; 46
 58e:	f1 e0       	ldi	r31, 0x01	; 1
 590:	88 e0       	ldi	r24, 0x08	; 8
 592:	82 83       	std	Z+2, r24	; 0x02
	allPositions[HEAD].y = 0x08;
 594:	83 83       	std	Z+3, r24	; 0x03
	//allPositions[HEAD +1].x = 0x06;
	//allPositions[HEAD +1].y = 0x08;
	//snakelength ++;

	//set loot at random position
	setLootPosition();
 596:	ea de       	rcall	.-556    	; 0x36c <setLootPosition>

				//clear the screen
				twi_clear();

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
 598:	e1 2c       	mov	r14, r1
 59a:	f1 2c       	mov	r15, r1
 59c:	0e e1       	ldi	r16, 0x1E	; 30
 59e:	10 e0       	ldi	r17, 0x00	; 0
	setLootPosition();
	//twi_position(allPositions[HEAD]);

	while (1)
	{
		switch(status)
 5a0:	80 91 28 01 	lds	r24, 0x0128
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <main+0x1a>
				//twi_write(MatrixText);
				break;

			case PLAYING:
				//refresh locations of the snake:
				for(int i = snakelength; i > 0; i--)
 5a8:	c0 91 26 01 	lds	r28, 0x0126
 5ac:	d0 91 27 01 	lds	r29, 0x0127
 5b0:	1c 16       	cp	r1, r28
 5b2:	1d 06       	cpc	r1, r29
 5b4:	44 f4       	brge	.+16     	; 0x5c6 <main+0x3c>
					changePosition(i, lastPressed);
 5b6:	60 91 24 01 	lds	r22, 0x0124
 5ba:	70 91 25 01 	lds	r23, 0x0125
 5be:	ce 01       	movw	r24, r28
 5c0:	6b de       	rcall	.-810    	; 0x298 <changePosition>
				//twi_write(MatrixText);
				break;

			case PLAYING:
				//refresh locations of the snake:
				for(int i = snakelength; i > 0; i--)
 5c2:	21 97       	sbiw	r28, 0x01	; 1
 5c4:	c1 f7       	brne	.-16     	; 0x5b6 <main+0x2c>
					changePosition(i, lastPressed);
				//check for collision
				checkColission();
 5c6:	35 df       	rcall	.-406    	; 0x432 <checkColission>

				//clear the screen
				twi_clear();
 5c8:	99 dd       	rcall	.-1230   	; 0xfc <twi_clear>

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
 5ca:	80 91 26 01 	lds	r24, 0x0126
 5ce:	90 91 27 01 	lds	r25, 0x0127
 5d2:	99 23       	and	r25, r25
 5d4:	d4 f0       	brlt	.+52     	; 0x60a <main+0x80>
 5d6:	ce 2d       	mov	r28, r14
 5d8:	df 2d       	mov	r29, r15
					twi_position(allPositions[i]);
 5da:	fe 01       	movw	r30, r28
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	e2 5d       	subi	r30, 0xD2	; 210
 5e2:	fe 4f       	sbci	r31, 0xFE	; 254
 5e4:	80 81       	ld	r24, Z
 5e6:	91 81       	ldd	r25, Z+1	; 0x01
 5e8:	e3 dd       	rcall	.-1082   	; 0x1b0 <twi_position>

				//clear the screen
				twi_clear();

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
 5ea:	21 96       	adiw	r28, 0x01	; 1
 5ec:	80 91 26 01 	lds	r24, 0x0126
 5f0:	90 91 27 01 	lds	r25, 0x0127
 5f4:	8c 17       	cp	r24, r28
 5f6:	9d 07       	cpc	r25, r29
 5f8:	84 f7       	brge	.-32     	; 0x5da <main+0x50>
 5fa:	07 c0       	rjmp	.+14     	; 0x60a <main+0x80>
					twi_position(allPositions[i]);
				
				for(int i = 0; i < 30; i++){
					checkinput();
 5fc:	0f de       	rcall	.-994    	; 0x21c <checkinput>
					wait(100);
 5fe:	84 e6       	ldi	r24, 0x64	; 100
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	a3 de       	rcall	.-698    	; 0x34a <wait>
 604:	21 97       	sbiw	r28, 0x01	; 1

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
					twi_position(allPositions[i]);
				
				for(int i = 0; i < 30; i++){
 606:	d1 f7       	brne	.-12     	; 0x5fc <main+0x72>
 608:	cb cf       	rjmp	.-106    	; 0x5a0 <main+0x16>

				//clear the screen
				twi_clear();

				//fill the screen
				for(int i = 0; i <=snakelength; i ++)
 60a:	c0 2f       	mov	r28, r16
 60c:	d1 2f       	mov	r29, r17
 60e:	f6 cf       	rjmp	.-20     	; 0x5fc <main+0x72>

00000610 <do_rand>:
 610:	8f 92       	push	r8
 612:	9f 92       	push	r9
 614:	af 92       	push	r10
 616:	bf 92       	push	r11
 618:	cf 92       	push	r12
 61a:	df 92       	push	r13
 61c:	ef 92       	push	r14
 61e:	ff 92       	push	r15
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	ec 01       	movw	r28, r24
 626:	68 81       	ld	r22, Y
 628:	79 81       	ldd	r23, Y+1	; 0x01
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	9b 81       	ldd	r25, Y+3	; 0x03
 62e:	61 15       	cp	r22, r1
 630:	71 05       	cpc	r23, r1
 632:	81 05       	cpc	r24, r1
 634:	91 05       	cpc	r25, r1
 636:	21 f4       	brne	.+8      	; 0x640 <do_rand+0x30>
 638:	64 e2       	ldi	r22, 0x24	; 36
 63a:	79 ed       	ldi	r23, 0xD9	; 217
 63c:	8b e5       	ldi	r24, 0x5B	; 91
 63e:	97 e0       	ldi	r25, 0x07	; 7
 640:	2d e1       	ldi	r18, 0x1D	; 29
 642:	33 ef       	ldi	r19, 0xF3	; 243
 644:	41 e0       	ldi	r20, 0x01	; 1
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	38 d0       	rcall	.+112    	; 0x6ba <__divmodsi4>
 64a:	49 01       	movw	r8, r18
 64c:	5a 01       	movw	r10, r20
 64e:	9b 01       	movw	r18, r22
 650:	ac 01       	movw	r20, r24
 652:	a7 ea       	ldi	r26, 0xA7	; 167
 654:	b1 e4       	ldi	r27, 0x41	; 65
 656:	4d d0       	rcall	.+154    	; 0x6f2 <__muluhisi3>
 658:	6b 01       	movw	r12, r22
 65a:	7c 01       	movw	r14, r24
 65c:	ac ee       	ldi	r26, 0xEC	; 236
 65e:	b4 ef       	ldi	r27, 0xF4	; 244
 660:	a5 01       	movw	r20, r10
 662:	94 01       	movw	r18, r8
 664:	52 d0       	rcall	.+164    	; 0x70a <__mulohisi3>
 666:	dc 01       	movw	r26, r24
 668:	cb 01       	movw	r24, r22
 66a:	8c 0d       	add	r24, r12
 66c:	9d 1d       	adc	r25, r13
 66e:	ae 1d       	adc	r26, r14
 670:	bf 1d       	adc	r27, r15
 672:	b7 ff       	sbrs	r27, 7
 674:	03 c0       	rjmp	.+6      	; 0x67c <do_rand+0x6c>
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	a1 09       	sbc	r26, r1
 67a:	b0 48       	sbci	r27, 0x80	; 128
 67c:	88 83       	st	Y, r24
 67e:	99 83       	std	Y+1, r25	; 0x01
 680:	aa 83       	std	Y+2, r26	; 0x02
 682:	bb 83       	std	Y+3, r27	; 0x03
 684:	9f 77       	andi	r25, 0x7F	; 127
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	ff 90       	pop	r15
 68c:	ef 90       	pop	r14
 68e:	df 90       	pop	r13
 690:	cf 90       	pop	r12
 692:	bf 90       	pop	r11
 694:	af 90       	pop	r10
 696:	9f 90       	pop	r9
 698:	8f 90       	pop	r8
 69a:	08 95       	ret

0000069c <rand_r>:
 69c:	b9 cf       	rjmp	.-142    	; 0x610 <do_rand>

0000069e <rand>:
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	b6 cf       	rjmp	.-148    	; 0x610 <do_rand>

000006a4 <srand>:
 6a4:	a0 e0       	ldi	r26, 0x00	; 0
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	80 93 00 01 	sts	0x0100, r24
 6ac:	90 93 01 01 	sts	0x0101, r25
 6b0:	a0 93 02 01 	sts	0x0102, r26
 6b4:	b0 93 03 01 	sts	0x0103, r27
 6b8:	08 95       	ret

000006ba <__divmodsi4>:
 6ba:	05 2e       	mov	r0, r21
 6bc:	97 fb       	bst	r25, 7
 6be:	16 f4       	brtc	.+4      	; 0x6c4 <__divmodsi4+0xa>
 6c0:	00 94       	com	r0
 6c2:	0f d0       	rcall	.+30     	; 0x6e2 <__negsi2>
 6c4:	57 fd       	sbrc	r21, 7
 6c6:	05 d0       	rcall	.+10     	; 0x6d2 <__divmodsi4_neg2>
 6c8:	24 d0       	rcall	.+72     	; 0x712 <__udivmodsi4>
 6ca:	07 fc       	sbrc	r0, 7
 6cc:	02 d0       	rcall	.+4      	; 0x6d2 <__divmodsi4_neg2>
 6ce:	46 f4       	brtc	.+16     	; 0x6e0 <__divmodsi4_exit>
 6d0:	08 c0       	rjmp	.+16     	; 0x6e2 <__negsi2>

000006d2 <__divmodsi4_neg2>:
 6d2:	50 95       	com	r21
 6d4:	40 95       	com	r20
 6d6:	30 95       	com	r19
 6d8:	21 95       	neg	r18
 6da:	3f 4f       	sbci	r19, 0xFF	; 255
 6dc:	4f 4f       	sbci	r20, 0xFF	; 255
 6de:	5f 4f       	sbci	r21, 0xFF	; 255

000006e0 <__divmodsi4_exit>:
 6e0:	08 95       	ret

000006e2 <__negsi2>:
 6e2:	90 95       	com	r25
 6e4:	80 95       	com	r24
 6e6:	70 95       	com	r23
 6e8:	61 95       	neg	r22
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	8f 4f       	sbci	r24, 0xFF	; 255
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	08 95       	ret

000006f2 <__muluhisi3>:
 6f2:	31 d0       	rcall	.+98     	; 0x756 <__umulhisi3>
 6f4:	a5 9f       	mul	r26, r21
 6f6:	90 0d       	add	r25, r0
 6f8:	b4 9f       	mul	r27, r20
 6fa:	90 0d       	add	r25, r0
 6fc:	a4 9f       	mul	r26, r20
 6fe:	80 0d       	add	r24, r0
 700:	91 1d       	adc	r25, r1
 702:	11 24       	eor	r1, r1
 704:	08 95       	ret

00000706 <__mulshisi3>:
 706:	b7 ff       	sbrs	r27, 7
 708:	f4 cf       	rjmp	.-24     	; 0x6f2 <__muluhisi3>

0000070a <__mulohisi3>:
 70a:	f3 df       	rcall	.-26     	; 0x6f2 <__muluhisi3>
 70c:	82 1b       	sub	r24, r18
 70e:	93 0b       	sbc	r25, r19
 710:	08 95       	ret

00000712 <__udivmodsi4>:
 712:	a1 e2       	ldi	r26, 0x21	; 33
 714:	1a 2e       	mov	r1, r26
 716:	aa 1b       	sub	r26, r26
 718:	bb 1b       	sub	r27, r27
 71a:	fd 01       	movw	r30, r26
 71c:	0d c0       	rjmp	.+26     	; 0x738 <__udivmodsi4_ep>

0000071e <__udivmodsi4_loop>:
 71e:	aa 1f       	adc	r26, r26
 720:	bb 1f       	adc	r27, r27
 722:	ee 1f       	adc	r30, r30
 724:	ff 1f       	adc	r31, r31
 726:	a2 17       	cp	r26, r18
 728:	b3 07       	cpc	r27, r19
 72a:	e4 07       	cpc	r30, r20
 72c:	f5 07       	cpc	r31, r21
 72e:	20 f0       	brcs	.+8      	; 0x738 <__udivmodsi4_ep>
 730:	a2 1b       	sub	r26, r18
 732:	b3 0b       	sbc	r27, r19
 734:	e4 0b       	sbc	r30, r20
 736:	f5 0b       	sbc	r31, r21

00000738 <__udivmodsi4_ep>:
 738:	66 1f       	adc	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	1a 94       	dec	r1
 742:	69 f7       	brne	.-38     	; 0x71e <__udivmodsi4_loop>
 744:	60 95       	com	r22
 746:	70 95       	com	r23
 748:	80 95       	com	r24
 74a:	90 95       	com	r25
 74c:	9b 01       	movw	r18, r22
 74e:	ac 01       	movw	r20, r24
 750:	bd 01       	movw	r22, r26
 752:	cf 01       	movw	r24, r30
 754:	08 95       	ret

00000756 <__umulhisi3>:
 756:	a2 9f       	mul	r26, r18
 758:	b0 01       	movw	r22, r0
 75a:	b3 9f       	mul	r27, r19
 75c:	c0 01       	movw	r24, r0
 75e:	a3 9f       	mul	r26, r19
 760:	70 0d       	add	r23, r0
 762:	81 1d       	adc	r24, r1
 764:	11 24       	eor	r1, r1
 766:	91 1d       	adc	r25, r1
 768:	b2 9f       	mul	r27, r18
 76a:	70 0d       	add	r23, r0
 76c:	81 1d       	adc	r24, r1
 76e:	11 24       	eor	r1, r1
 770:	91 1d       	adc	r25, r1
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
