
eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800128  00800128  000005f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077b  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000246  00000000  00000000  00000e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071e  00000000  00000000  000010b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000743b  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c5  00000000  00000000  00008d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000003e1  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 3a       	cpi	r26, 0xAD	; 173
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	41 d1       	rcall	.+642    	; 0x346 <main>
  c4:	36 c2       	rjmp	.+1132   	; 0x532 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <buttoninit>:
		twi_tx(0xE0);	// Display I2C addres + R/W bit
		twi_tx(i);	// Address
		twi_tx(0xFF);	// data
		twi_stop();
	}
}
  c8:	17 ba       	out	0x17, r1	; 23
  ca:	14 ba       	out	0x14, r1	; 20
  cc:	08 95       	ret

000000ce <changePosition>:
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	91 05       	cpc	r25, r1
  d2:	51 f0       	breq	.+20     	; 0xe8 <changePosition+0x1a>
  d4:	1c f4       	brge	.+6      	; 0xdc <changePosition+0xe>
  d6:	89 2b       	or	r24, r25
  d8:	29 f1       	breq	.+74     	; 0x124 <changePosition+0x56>
  da:	08 95       	ret
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	91 05       	cpc	r25, r1
  e0:	59 f0       	breq	.+22     	; 0xf8 <changePosition+0x2a>
  e2:	03 97       	sbiw	r24, 0x03	; 3
  e4:	b9 f0       	breq	.+46     	; 0x114 <changePosition+0x46>
  e6:	08 95       	ret
  e8:	80 91 2f 01 	lds	r24, 0x012F
  ec:	88 23       	and	r24, r24
  ee:	49 f1       	breq	.+82     	; 0x142 <changePosition+0x74>
  f0:	82 50       	subi	r24, 0x02	; 2
  f2:	80 93 2f 01 	sts	0x012F, r24
  f6:	08 95       	ret
  f8:	80 91 30 01 	lds	r24, 0x0130
  fc:	80 34       	cpi	r24, 0x40	; 64
  fe:	20 f4       	brcc	.+8      	; 0x108 <changePosition+0x3a>
 100:	88 0f       	add	r24, r24
 102:	80 93 30 01 	sts	0x0130, r24
 106:	08 95       	ret
 108:	80 38       	cpi	r24, 0x80	; 128
 10a:	d9 f4       	brne	.+54     	; 0x142 <changePosition+0x74>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 30 01 	sts	0x0130, r24
 112:	08 95       	ret
 114:	80 91 2f 01 	lds	r24, 0x012F
 118:	8e 30       	cpi	r24, 0x0E	; 14
 11a:	98 f4       	brcc	.+38     	; 0x142 <changePosition+0x74>
 11c:	8e 5f       	subi	r24, 0xFE	; 254
 11e:	80 93 2f 01 	sts	0x012F, r24
 122:	08 95       	ret
 124:	80 91 30 01 	lds	r24, 0x0130
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	21 f4       	brne	.+8      	; 0x134 <changePosition+0x66>
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	80 93 30 01 	sts	0x0130, r24
 132:	08 95       	ret
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	28 f0       	brcs	.+10     	; 0x142 <changePosition+0x74>
 138:	80 38       	cpi	r24, 0x80	; 128
 13a:	19 f0       	breq	.+6      	; 0x142 <changePosition+0x74>
 13c:	86 95       	lsr	r24
 13e:	80 93 30 01 	sts	0x0130, r24
 142:	08 95       	ret

00000144 <checkinput>:
 144:	80 91 28 01 	lds	r24, 0x0128
 148:	90 91 29 01 	lds	r25, 0x0129
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	81 31       	cpi	r24, 0x11	; 17
 150:	27 e2       	ldi	r18, 0x27	; 39
 152:	92 07       	cpc	r25, r18
 154:	28 f4       	brcc	.+10     	; 0x160 <checkinput+0x1c>
 156:	90 93 29 01 	sts	0x0129, r25
 15a:	80 93 28 01 	sts	0x0128, r24
 15e:	04 c0       	rjmp	.+8      	; 0x168 <checkinput+0x24>
 160:	10 92 29 01 	sts	0x0129, r1
 164:	10 92 28 01 	sts	0x0128, r1
 168:	b0 9b       	sbis	0x16, 0	; 22
 16a:	07 c0       	rjmp	.+14     	; 0x17a <checkinput+0x36>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	90 93 05 01 	sts	0x0105, r25
 174:	80 93 04 01 	sts	0x0104, r24
 178:	22 c0       	rjmp	.+68     	; 0x1be <checkinput+0x7a>
 17a:	b1 9b       	sbis	0x16, 1	; 22
 17c:	07 c0       	rjmp	.+14     	; 0x18c <checkinput+0x48>
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 05 01 	sts	0x0105, r25
 186:	80 93 04 01 	sts	0x0104, r24
 18a:	19 c0       	rjmp	.+50     	; 0x1be <checkinput+0x7a>
 18c:	b2 9b       	sbis	0x16, 2	; 22
 18e:	07 c0       	rjmp	.+14     	; 0x19e <checkinput+0x5a>
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 05 01 	sts	0x0105, r25
 198:	80 93 04 01 	sts	0x0104, r24
 19c:	10 c0       	rjmp	.+32     	; 0x1be <checkinput+0x7a>
 19e:	99 9b       	sbis	0x13, 1	; 19
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <checkinput+0x68>
 1a2:	10 92 05 01 	sts	0x0105, r1
 1a6:	10 92 04 01 	sts	0x0104, r1
 1aa:	09 c0       	rjmp	.+18     	; 0x1be <checkinput+0x7a>
 1ac:	98 9b       	sbis	0x13, 0	; 19
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <checkinput+0x7a>
 1b0:	80 91 2c 01 	lds	r24, 0x012C
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	19 f0       	breq	.+6      	; 0x1be <checkinput+0x7a>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 2c 01 	sts	0x012C, r24
 1be:	80 91 04 01 	lds	r24, 0x0104
 1c2:	90 91 05 01 	lds	r25, 0x0105
 1c6:	83 cf       	rjmp	.-250    	; 0xce <changePosition>
 1c8:	08 95       	ret

000001ca <twi_init>:
 1ca:	10 92 71 00 	sts	0x0071, r1
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	80 93 70 00 	sts	0x0070, r24
 1d4:	08 95       	ret

000001d6 <twi_start>:
 1d6:	84 ea       	ldi	r24, 0xA4	; 164
 1d8:	80 93 74 00 	sts	0x0074, r24
 1dc:	e4 e7       	ldi	r30, 0x74	; 116
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 23       	and	r24, r24
 1e4:	ec f7       	brge	.-6      	; 0x1e0 <twi_start+0xa>
 1e6:	08 95       	ret

000001e8 <twi_tx>:
 1e8:	80 93 73 00 	sts	0x0073, r24
 1ec:	84 e8       	ldi	r24, 0x84	; 132
 1ee:	80 93 74 00 	sts	0x0074, r24
 1f2:	e4 e7       	ldi	r30, 0x74	; 116
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	ec f7       	brge	.-6      	; 0x1f6 <twi_tx+0xe>
 1fc:	08 95       	ret

000001fe <twi_clear>:
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	04 e7       	ldi	r16, 0x74	; 116
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	d4 e9       	ldi	r29, 0x94	; 148
 20e:	e3 df       	rcall	.-58     	; 0x1d6 <twi_start>
 210:	80 ee       	ldi	r24, 0xE0	; 224
 212:	ea df       	rcall	.-44     	; 0x1e8 <twi_tx>
 214:	8c 2f       	mov	r24, r28
 216:	e8 df       	rcall	.-48     	; 0x1e8 <twi_tx>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	e6 df       	rcall	.-52     	; 0x1e8 <twi_tx>
 21c:	f8 01       	movw	r30, r16
 21e:	d0 83       	st	Z, r29
 220:	ce 5f       	subi	r28, 0xFE	; 254
 222:	c0 31       	cpi	r28, 0x10	; 16
 224:	a1 f7       	brne	.-24     	; 0x20e <twi_clear+0x10>
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <twi_position>:

void twi_position(POSITION position){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	d8 2f       	mov	r29, r24
 236:	c9 2f       	mov	r28, r25
	

	twi_start();
 238:	ce df       	rcall	.-100    	; 0x1d6 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 23a:	80 ee       	ldi	r24, 0xE0	; 224
 23c:	d5 df       	rcall	.-86     	; 0x1e8 <twi_tx>
	twi_tx(position.x);	// Address
 23e:	8d 2f       	mov	r24, r29
 240:	d3 df       	rcall	.-90     	; 0x1e8 <twi_tx>
	if(allPositions[LOOT].x == allPositions[HEAD].x){
 242:	ed e2       	ldi	r30, 0x2D	; 45
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	90 81       	ld	r25, Z
 248:	82 81       	ldd	r24, Z+2	; 0x02
 24a:	98 13       	cpse	r25, r24
 24c:	03 c0       	rjmp	.+6      	; 0x254 <twi_position+0x24>
			position.y = allPositions[LOOT].y + allPositions[HEAD].y;
 24e:	c3 81       	ldd	r28, Z+3	; 0x03
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	c8 0f       	add	r28, r24
	}
		
	twi_tx(position.y);	// data
 254:	8c 2f       	mov	r24, r28
 256:	c8 df       	rcall	.-112    	; 0x1e8 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 258:	84 e9       	ldi	r24, 0x94	; 148
 25a:	80 93 74 00 	sts	0x0074, r24
			position.y = allPositions[LOOT].y + allPositions[HEAD].y;
	}
		
	twi_tx(position.y);	// data
	twi_stop();
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 264:	18 16       	cp	r1, r24
 266:	19 06       	cpc	r1, r25
 268:	6c f4       	brge	.+26     	; 0x284 <wait+0x20>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	e9 ef       	ldi	r30, 0xF9	; 249
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <wait+0xe>
 276:	00 c0       	rjmp	.+0      	; 0x278 <wait+0x14>
 278:	00 00       	nop
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	28 17       	cp	r18, r24
 280:	39 07       	cpc	r19, r25
 282:	a9 f7       	brne	.-22     	; 0x26e <wait+0xa>
 284:	08 95       	ret

00000286 <twi_write>:
	twi_tx(position.y);	// data
	twi_stop();
}

void twi_write(char text[])
{
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	7c 01       	movw	r14, r24
 294:	c0 e0       	ldi	r28, 0x00	; 0
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 296:	04 e7       	ldi	r16, 0x74	; 116
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	d4 e9       	ldi	r29, 0x94	; 148

void twi_write(char text[])
{
	int i = 0x00;
	for(; i <= 0x0E; i += 0x02){
		twi_clear();
 29c:	b0 df       	rcall	.-160    	; 0x1fe <twi_clear>
		twi_start();
 29e:	9b df       	rcall	.-202    	; 0x1d6 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 2a0:	80 ee       	ldi	r24, 0xE0	; 224
 2a2:	a2 df       	rcall	.-188    	; 0x1e8 <twi_tx>
		twi_tx(i);	// Address
 2a4:	8c 2f       	mov	r24, r28
 2a6:	a0 df       	rcall	.-192    	; 0x1e8 <twi_tx>
		twi_tx(text[1]);	// data
 2a8:	f7 01       	movw	r30, r14
 2aa:	81 81       	ldd	r24, Z+1	; 0x01
 2ac:	9d df       	rcall	.-198    	; 0x1e8 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 2ae:	f8 01       	movw	r30, r16
 2b0:	d0 83       	st	Z, r29
		twi_start();
		twi_tx(0xE0);	// Display I2C addres + R/W bit
		twi_tx(i);	// Address
		twi_tx(text[1]);	// data
		twi_stop();
		wait(1000);
 2b2:	88 ee       	ldi	r24, 0xE8	; 232
 2b4:	93 e0       	ldi	r25, 0x03	; 3
 2b6:	d6 df       	rcall	.-84     	; 0x264 <wait>
 2b8:	ce 5f       	subi	r28, 0xFE	; 254
}

void twi_write(char text[])
{
	int i = 0x00;
	for(; i <= 0x0E; i += 0x02){
 2ba:	c0 31       	cpi	r28, 0x10	; 16
 2bc:	79 f7       	brne	.-34     	; 0x29c <twi_write+0x16>
		twi_tx(i);	// Address
		twi_tx(text[1]);	// data
		twi_stop();
		wait(1000);
	}
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	08 95       	ret

000002cc <setLootPosition>:
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

void setLootPosition(){
	srand(seed);
 2cc:	80 91 28 01 	lds	r24, 0x0128
 2d0:	90 91 29 01 	lds	r25, 0x0129
 2d4:	c6 d0       	rcall	.+396    	; 0x462 <srand>
	//x value of the loot
	allPositions[LOOT].x = xPositions[rand() % 8]; //random index from xPositions array
 2d6:	c2 d0       	rcall	.+388    	; 0x45c <rand>
 2d8:	87 70       	andi	r24, 0x07	; 7
 2da:	90 78       	andi	r25, 0x80	; 128
 2dc:	99 23       	and	r25, r25
 2de:	24 f4       	brge	.+8      	; 0x2e8 <setLootPosition+0x1c>
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	88 6f       	ori	r24, 0xF8	; 248
 2e4:	9f 6f       	ori	r25, 0xFF	; 255
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	fc 01       	movw	r30, r24
 2ee:	e8 5f       	subi	r30, 0xF8	; 248
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	80 81       	ld	r24, Z
 2f4:	80 93 2d 01 	sts	0x012D, r24
	//y value of the loot
	allPositions[LOOT].y = yPositions[rand() % 8]; //random index from yPositions array
 2f8:	b1 d0       	rcall	.+354    	; 0x45c <rand>
 2fa:	87 70       	andi	r24, 0x07	; 7
 2fc:	90 78       	andi	r25, 0x80	; 128
 2fe:	99 23       	and	r25, r25
 300:	24 f4       	brge	.+8      	; 0x30a <setLootPosition+0x3e>
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	88 6f       	ori	r24, 0xF8	; 248
 306:	9f 6f       	ori	r25, 0xFF	; 255
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	fc 01       	movw	r30, r24
 310:	e8 5e       	subi	r30, 0xE8	; 232
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	80 81       	ld	r24, Z
 316:	80 93 2e 01 	sts	0x012E, r24
 31a:	08 95       	ret

0000031c <checkColission>:
	}
}

void checkColission()
{
	if(allPositions[HEAD].x == allPositions[LOOT].x && allPositions[HEAD].y == allPositions[LOOT].y)
 31c:	ed e2       	ldi	r30, 0x2D	; 45
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	92 81       	ldd	r25, Z+2	; 0x02
 322:	80 81       	ld	r24, Z
 324:	98 13       	cpse	r25, r24
 326:	0e c0       	rjmp	.+28     	; 0x344 <checkColission+0x28>
 328:	93 81       	ldd	r25, Z+3	; 0x03
 32a:	81 81       	ldd	r24, Z+1	; 0x01
 32c:	98 13       	cpse	r25, r24
 32e:	0a c0       	rjmp	.+20     	; 0x344 <checkColission+0x28>
	{
		setLootPosition();
 330:	cd df       	rcall	.-102    	; 0x2cc <setLootPosition>
		score++;
 332:	80 91 2a 01 	lds	r24, 0x012A
 336:	90 91 2b 01 	lds	r25, 0x012B
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	90 93 2b 01 	sts	0x012B, r25
 340:	80 93 2a 01 	sts	0x012A, r24
 344:	08 95       	ret

00000346 <main>:
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	wait(25);
 346:	89 e1       	ldi	r24, 0x19	; 25
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	8c df       	rcall	.-232    	; 0x264 <wait>
	twi_init();		// Init TWI interface
 34c:	3e df       	rcall	.-388    	; 0x1ca <twi_init>
	buttoninit();	// Init buttons for snake
 34e:	bc de       	rcall	.-648    	; 0xc8 <buttoninit>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 350:	42 df       	rcall	.-380    	; 0x1d6 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 352:	80 ee       	ldi	r24, 0xE0	; 224
 354:	49 df       	rcall	.-366    	; 0x1e8 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 356:	81 e2       	ldi	r24, 0x21	; 33
 358:	47 df       	rcall	.-370    	; 0x1e8 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 35a:	c4 e7       	ldi	r28, 0x74	; 116
 35c:	d0 e0       	ldi	r29, 0x00	; 0
 35e:	14 e9       	ldi	r17, 0x94	; 148
 360:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
	
	twi_start();
 362:	39 df       	rcall	.-398    	; 0x1d6 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 364:	80 ee       	ldi	r24, 0xE0	; 224
 366:	40 df       	rcall	.-384    	; 0x1e8 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 368:	80 ea       	ldi	r24, 0xA0	; 160
 36a:	3e df       	rcall	.-388    	; 0x1e8 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 36c:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 36e:	33 df       	rcall	.-410    	; 0x1d6 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 370:	80 ee       	ldi	r24, 0xE0	; 224
 372:	3a df       	rcall	.-396    	; 0x1e8 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 374:	83 ee       	ldi	r24, 0xE3	; 227
 376:	38 df       	rcall	.-400    	; 0x1e8 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 378:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 37a:	2d df       	rcall	.-422    	; 0x1d6 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 37c:	80 ee       	ldi	r24, 0xE0	; 224
 37e:	34 df       	rcall	.-408    	; 0x1e8 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 380:	81 e8       	ldi	r24, 0x81	; 129
 382:	32 df       	rcall	.-412    	; 0x1e8 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 384:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();

	twi_clear();
 386:	3b df       	rcall	.-394    	; 0x1fe <twi_clear>

	allPositions[HEAD].x = 0x08;
 388:	ed e2       	ldi	r30, 0x2D	; 45
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	88 e0       	ldi	r24, 0x08	; 8
 38e:	82 83       	std	Z+2, r24	; 0x02
	allPositions[HEAD].y = 0x08;
 390:	83 83       	std	Z+3, r24	; 0x03
	twi_position(allPositions[HEAD]);
 392:	82 81       	ldd	r24, Z+2	; 0x02
 394:	93 81       	ldd	r25, Z+3	; 0x03
 396:	4c df       	rcall	.-360    	; 0x230 <twi_position>
	
	setLootPosition();
 398:	99 df       	rcall	.-206    	; 0x2cc <setLootPosition>
				break;

			case PLAYING:
				checkColission();
				twi_clear();
				twi_position(allPositions[LOOT]);
 39a:	cd e2       	ldi	r28, 0x2D	; 45
 39c:	d1 e0       	ldi	r29, 0x01	; 1
	
	setLootPosition();

	while (1)
	{
		checkinput();
 39e:	d2 de       	rcall	.-604    	; 0x144 <checkinput>
		switch(status)
 3a0:	80 91 2c 01 	lds	r24, 0x012C
 3a4:	88 23       	and	r24, r24
 3a6:	19 f0       	breq	.+6      	; 0x3ae <main+0x68>
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	29 f0       	breq	.+10     	; 0x3b6 <main+0x70>
 3ac:	f8 cf       	rjmp	.-16     	; 0x39e <main+0x58>
		{
			case MENU:
				twi_write(Text);
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	69 df       	rcall	.-302    	; 0x286 <twi_write>
				break;
 3b4:	f4 cf       	rjmp	.-24     	; 0x39e <main+0x58>

			case PLAYING:
				checkColission();
 3b6:	b2 df       	rcall	.-156    	; 0x31c <checkColission>
				twi_clear();
 3b8:	22 df       	rcall	.-444    	; 0x1fe <twi_clear>
				twi_position(allPositions[LOOT]);
 3ba:	88 81       	ld	r24, Y
 3bc:	99 81       	ldd	r25, Y+1	; 0x01
 3be:	38 df       	rcall	.-400    	; 0x230 <twi_position>
				twi_position(allPositions[HEAD]);
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	9b 81       	ldd	r25, Y+3	; 0x03
 3c4:	35 df       	rcall	.-406    	; 0x230 <twi_position>
				wait(1000);
 3c6:	88 ee       	ldi	r24, 0xE8	; 232
 3c8:	93 e0       	ldi	r25, 0x03	; 3
 3ca:	4c df       	rcall	.-360    	; 0x264 <wait>
				break;
 3cc:	e8 cf       	rjmp	.-48     	; 0x39e <main+0x58>

000003ce <do_rand>:
 3ce:	8f 92       	push	r8
 3d0:	9f 92       	push	r9
 3d2:	af 92       	push	r10
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	ec 01       	movw	r28, r24
 3e4:	68 81       	ld	r22, Y
 3e6:	79 81       	ldd	r23, Y+1	; 0x01
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	9b 81       	ldd	r25, Y+3	; 0x03
 3ec:	61 15       	cp	r22, r1
 3ee:	71 05       	cpc	r23, r1
 3f0:	81 05       	cpc	r24, r1
 3f2:	91 05       	cpc	r25, r1
 3f4:	21 f4       	brne	.+8      	; 0x3fe <do_rand+0x30>
 3f6:	64 e2       	ldi	r22, 0x24	; 36
 3f8:	79 ed       	ldi	r23, 0xD9	; 217
 3fa:	8b e5       	ldi	r24, 0x5B	; 91
 3fc:	97 e0       	ldi	r25, 0x07	; 7
 3fe:	2d e1       	ldi	r18, 0x1D	; 29
 400:	33 ef       	ldi	r19, 0xF3	; 243
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	38 d0       	rcall	.+112    	; 0x478 <__divmodsi4>
 408:	49 01       	movw	r8, r18
 40a:	5a 01       	movw	r10, r20
 40c:	9b 01       	movw	r18, r22
 40e:	ac 01       	movw	r20, r24
 410:	a7 ea       	ldi	r26, 0xA7	; 167
 412:	b1 e4       	ldi	r27, 0x41	; 65
 414:	4d d0       	rcall	.+154    	; 0x4b0 <__muluhisi3>
 416:	6b 01       	movw	r12, r22
 418:	7c 01       	movw	r14, r24
 41a:	ac ee       	ldi	r26, 0xEC	; 236
 41c:	b4 ef       	ldi	r27, 0xF4	; 244
 41e:	a5 01       	movw	r20, r10
 420:	94 01       	movw	r18, r8
 422:	52 d0       	rcall	.+164    	; 0x4c8 <__mulohisi3>
 424:	dc 01       	movw	r26, r24
 426:	cb 01       	movw	r24, r22
 428:	8c 0d       	add	r24, r12
 42a:	9d 1d       	adc	r25, r13
 42c:	ae 1d       	adc	r26, r14
 42e:	bf 1d       	adc	r27, r15
 430:	b7 ff       	sbrs	r27, 7
 432:	03 c0       	rjmp	.+6      	; 0x43a <do_rand+0x6c>
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	a1 09       	sbc	r26, r1
 438:	b0 48       	sbci	r27, 0x80	; 128
 43a:	88 83       	st	Y, r24
 43c:	99 83       	std	Y+1, r25	; 0x01
 43e:	aa 83       	std	Y+2, r26	; 0x02
 440:	bb 83       	std	Y+3, r27	; 0x03
 442:	9f 77       	andi	r25, 0x7F	; 127
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	af 90       	pop	r10
 454:	9f 90       	pop	r9
 456:	8f 90       	pop	r8
 458:	08 95       	ret

0000045a <rand_r>:
 45a:	b9 cf       	rjmp	.-142    	; 0x3ce <do_rand>

0000045c <rand>:
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	b6 cf       	rjmp	.-148    	; 0x3ce <do_rand>

00000462 <srand>:
 462:	a0 e0       	ldi	r26, 0x00	; 0
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	80 93 00 01 	sts	0x0100, r24
 46a:	90 93 01 01 	sts	0x0101, r25
 46e:	a0 93 02 01 	sts	0x0102, r26
 472:	b0 93 03 01 	sts	0x0103, r27
 476:	08 95       	ret

00000478 <__divmodsi4>:
 478:	05 2e       	mov	r0, r21
 47a:	97 fb       	bst	r25, 7
 47c:	16 f4       	brtc	.+4      	; 0x482 <__divmodsi4+0xa>
 47e:	00 94       	com	r0
 480:	0f d0       	rcall	.+30     	; 0x4a0 <__negsi2>
 482:	57 fd       	sbrc	r21, 7
 484:	05 d0       	rcall	.+10     	; 0x490 <__divmodsi4_neg2>
 486:	24 d0       	rcall	.+72     	; 0x4d0 <__udivmodsi4>
 488:	07 fc       	sbrc	r0, 7
 48a:	02 d0       	rcall	.+4      	; 0x490 <__divmodsi4_neg2>
 48c:	46 f4       	brtc	.+16     	; 0x49e <__divmodsi4_exit>
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <__negsi2>

00000490 <__divmodsi4_neg2>:
 490:	50 95       	com	r21
 492:	40 95       	com	r20
 494:	30 95       	com	r19
 496:	21 95       	neg	r18
 498:	3f 4f       	sbci	r19, 0xFF	; 255
 49a:	4f 4f       	sbci	r20, 0xFF	; 255
 49c:	5f 4f       	sbci	r21, 0xFF	; 255

0000049e <__divmodsi4_exit>:
 49e:	08 95       	ret

000004a0 <__negsi2>:
 4a0:	90 95       	com	r25
 4a2:	80 95       	com	r24
 4a4:	70 95       	com	r23
 4a6:	61 95       	neg	r22
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	8f 4f       	sbci	r24, 0xFF	; 255
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	08 95       	ret

000004b0 <__muluhisi3>:
 4b0:	31 d0       	rcall	.+98     	; 0x514 <__umulhisi3>
 4b2:	a5 9f       	mul	r26, r21
 4b4:	90 0d       	add	r25, r0
 4b6:	b4 9f       	mul	r27, r20
 4b8:	90 0d       	add	r25, r0
 4ba:	a4 9f       	mul	r26, r20
 4bc:	80 0d       	add	r24, r0
 4be:	91 1d       	adc	r25, r1
 4c0:	11 24       	eor	r1, r1
 4c2:	08 95       	ret

000004c4 <__mulshisi3>:
 4c4:	b7 ff       	sbrs	r27, 7
 4c6:	f4 cf       	rjmp	.-24     	; 0x4b0 <__muluhisi3>

000004c8 <__mulohisi3>:
 4c8:	f3 df       	rcall	.-26     	; 0x4b0 <__muluhisi3>
 4ca:	82 1b       	sub	r24, r18
 4cc:	93 0b       	sbc	r25, r19
 4ce:	08 95       	ret

000004d0 <__udivmodsi4>:
 4d0:	a1 e2       	ldi	r26, 0x21	; 33
 4d2:	1a 2e       	mov	r1, r26
 4d4:	aa 1b       	sub	r26, r26
 4d6:	bb 1b       	sub	r27, r27
 4d8:	fd 01       	movw	r30, r26
 4da:	0d c0       	rjmp	.+26     	; 0x4f6 <__udivmodsi4_ep>

000004dc <__udivmodsi4_loop>:
 4dc:	aa 1f       	adc	r26, r26
 4de:	bb 1f       	adc	r27, r27
 4e0:	ee 1f       	adc	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	a2 17       	cp	r26, r18
 4e6:	b3 07       	cpc	r27, r19
 4e8:	e4 07       	cpc	r30, r20
 4ea:	f5 07       	cpc	r31, r21
 4ec:	20 f0       	brcs	.+8      	; 0x4f6 <__udivmodsi4_ep>
 4ee:	a2 1b       	sub	r26, r18
 4f0:	b3 0b       	sbc	r27, r19
 4f2:	e4 0b       	sbc	r30, r20
 4f4:	f5 0b       	sbc	r31, r21

000004f6 <__udivmodsi4_ep>:
 4f6:	66 1f       	adc	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	1a 94       	dec	r1
 500:	69 f7       	brne	.-38     	; 0x4dc <__udivmodsi4_loop>
 502:	60 95       	com	r22
 504:	70 95       	com	r23
 506:	80 95       	com	r24
 508:	90 95       	com	r25
 50a:	9b 01       	movw	r18, r22
 50c:	ac 01       	movw	r20, r24
 50e:	bd 01       	movw	r22, r26
 510:	cf 01       	movw	r24, r30
 512:	08 95       	ret

00000514 <__umulhisi3>:
 514:	a2 9f       	mul	r26, r18
 516:	b0 01       	movw	r22, r0
 518:	b3 9f       	mul	r27, r19
 51a:	c0 01       	movw	r24, r0
 51c:	a3 9f       	mul	r26, r19
 51e:	70 0d       	add	r23, r0
 520:	81 1d       	adc	r24, r1
 522:	11 24       	eor	r1, r1
 524:	91 1d       	adc	r25, r1
 526:	b2 9f       	mul	r27, r18
 528:	70 0d       	add	r23, r0
 52a:	81 1d       	adc	r24, r1
 52c:	11 24       	eor	r1, r1
 52e:	91 1d       	adc	r25, r1
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
