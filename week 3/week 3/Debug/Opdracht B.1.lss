
Opdracht B.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000288  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000793  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f3  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000099d  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011379  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cc  00000000  00000000  00012c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00012ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003ab6  00000000  00000000  00012f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	ba d0       	rcall	.+372    	; 0x228 <main>
  b4:	e7 c0       	rjmp	.+462    	; 0x284 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:
	 _delay_ms(25);
 }

 void lcd_command(unsigned char dat)
 {
	 PORTC = dat & 0xF0;		//hoge nibble
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
	 PORTC = PORTC | 0x08;	//data
  be:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	e9 e6       	ldi	r30, 0x69	; 105
  c2:	f8 e1       	ldi	r31, 0x18	; 24
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x12>
  ca:	00 00       	nop
	 _delay_ms(25);
	 PORTC = 0x04;			//stop
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21

	 PORTC = (dat & 0x0F) <<4;	//lage nibble
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
	 PORTC = PORTC | 0x08;
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	89 e6       	ldi	r24, 0x69	; 105
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x2e>
  e6:	00 00       	nop

	 _delay_ms(25);
	 PORTC =  0x00;
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	08 95       	ret

000000ec <init_lcd>:
 #include "LCD.h"

 void init_lcd()
 {
	 //return home8
	 DDRC = 0b11111111;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
  f0:	89 e6       	ldi	r24, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <init_lcd+0x8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <init_lcd+0xe>
  fa:	00 00       	nop
	 _delay_ms(25);
	 lcd_command(0x02);
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	dc df       	rcall	.-72     	; 0xb8 <lcd_command>
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <init_lcd+0x18>
 108:	00 c0       	rjmp	.+0      	; 0x10a <init_lcd+0x1e>
 10a:	00 00       	nop
	 _delay_ms(25);
	 //mode: 4 bits interface data, 2 lines, 5x data
	 lcd_command(0x28);
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	d4 df       	rcall	.-88     	; 0xb8 <lcd_command>
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	98 e1       	ldi	r25, 0x18	; 24
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <init_lcd+0x28>
 118:	00 c0       	rjmp	.+0      	; 0x11a <init_lcd+0x2e>
 11a:	00 00       	nop
	 _delay_ms(25);
	 // display: on, cursor off, blinking off
	 lcd_command( 0x0C );
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	cc df       	rcall	.-104    	; 0xb8 <lcd_command>
 120:	89 e6       	ldi	r24, 0x69	; 105
 122:	98 e1       	ldi	r25, 0x18	; 24
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <init_lcd+0x38>
 128:	00 c0       	rjmp	.+0      	; 0x12a <init_lcd+0x3e>
 12a:	00 00       	nop
	 _delay_ms(25);
	 //entry mode: cursor to right no shift
	 lcd_command(0x06);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	c4 df       	rcall	.-120    	; 0xb8 <lcd_command>
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <init_lcd+0x48>
 138:	00 c0       	rjmp	.+0      	; 0x13a <init_lcd+0x4e>
 13a:	00 00       	nop
	 _delay_ms(25);
	 //Ram adress: 0, first position, line 1
	 lcd_command(0x80);
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	bc df       	rcall	.-136    	; 0xb8 <lcd_command>
 140:	89 e6       	ldi	r24, 0x69	; 105
 142:	98 e1       	ldi	r25, 0x18	; 24
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <init_lcd+0x58>
 148:	00 c0       	rjmp	.+0      	; 0x14a <init_lcd+0x5e>
 14a:	00 00       	nop
	 _delay_ms(25);
	 lcd_command(0x01);
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	b4 df       	rcall	.-152    	; 0xb8 <lcd_command>
 150:	89 e6       	ldi	r24, 0x69	; 105
 152:	98 e1       	ldi	r25, 0x18	; 24
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <init_lcd+0x68>
 158:	00 c0       	rjmp	.+0      	; 0x15a <init_lcd+0x6e>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <lcd_writeChar>:
	 PORTC =  0x00;
 }

 void lcd_writeChar( unsigned char dat)
 {
	 PORTC = dat & 0xF0;
 15e:	98 2f       	mov	r25, r24
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	95 bb       	out	0x15, r25	; 21
	 PORTC = PORTC | 0x0C;
 164:	95 b3       	in	r25, 0x15	; 21
 166:	9c 60       	ori	r25, 0x0C	; 12
 168:	95 bb       	out	0x15, r25	; 21
 16a:	e9 e6       	ldi	r30, 0x69	; 105
 16c:	f8 e1       	ldi	r31, 0x18	; 24
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_writeChar+0x10>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_writeChar+0x16>
 174:	00 00       	nop

	 _delay_ms(25);
	 PORTC = 0x04;
 176:	94 e0       	ldi	r25, 0x04	; 4
 178:	95 bb       	out	0x15, r25	; 21

	 PORTC = (dat & 0x0F) << 4;
 17a:	f0 e1       	ldi	r31, 0x10	; 16
 17c:	8f 9f       	mul	r24, r31
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	85 bb       	out	0x15, r24	; 21
	 PORTC = PORTC | 0x0C;
 184:	85 b3       	in	r24, 0x15	; 21
 186:	8c 60       	ori	r24, 0x0C	; 12
 188:	85 bb       	out	0x15, r24	; 21
 18a:	89 e6       	ldi	r24, 0x69	; 105
 18c:	98 e1       	ldi	r25, 0x18	; 24
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_writeChar+0x30>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_writeChar+0x36>
 194:	00 00       	nop

	 _delay_ms(25);
	 PORTC = 0x00;
 196:	15 ba       	out	0x15, r1	; 21
 198:	08 95       	ret

0000019a <lcd_setCursorPosition>:
 }

 void lcd_setCursorPosition(unsigned char position, int line)
 {
	if(line == 2)
 19a:	62 30       	cpi	r22, 0x02	; 2
 19c:	71 05       	cpc	r23, r1
 19e:	19 f4       	brne	.+6      	; 0x1a6 <lcd_setCursorPosition+0xc>
	{
		char value;
		value = 0xc0 + position;
		lcd_command(value);
 1a0:	80 54       	subi	r24, 0x40	; 64
 1a2:	8a cf       	rjmp	.-236    	; 0xb8 <lcd_command>
 1a4:	08 95       	ret
	}
	else
	{
		char value;
		value = 0x80 + position;
		lcd_command(value);
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	87 cf       	rjmp	.-242    	; 0xb8 <lcd_command>
 1aa:	08 95       	ret

000001ac <lcd_writeLine>:
	}
 }

 void lcd_writeLine( char text[], int line)
 {
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
	 // eerst de eerste 8 karakters = regel 1
	 // eerste pos regel 1
	 if(line == 2)
 1ba:	62 30       	cpi	r22, 0x02	; 2
 1bc:	71 05       	cpc	r23, r1
 1be:	b9 f4       	brne	.+46     	; 0x1ee <lcd_writeLine+0x42>
	 {
		 lcd_command(0xC0);
 1c0:	80 ec       	ldi	r24, 0xC0	; 192
 1c2:	7a df       	rcall	.-268    	; 0xb8 <lcd_command>
 1c4:	7e 01       	movw	r14, r28
			for (int i=0; i < strlen(text); i++) {
 1c6:	00 e0       	ldi	r16, 0x00	; 0
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <lcd_writeLine+0x2c>
			 lcd_writeChar( text[i] );
 1cc:	f7 01       	movw	r30, r14
 1ce:	81 91       	ld	r24, Z+
 1d0:	7f 01       	movw	r14, r30
 1d2:	c5 df       	rcall	.-118    	; 0x15e <lcd_writeChar>
	 // eerst de eerste 8 karakters = regel 1
	 // eerste pos regel 1
	 if(line == 2)
	 {
		 lcd_command(0xC0);
			for (int i=0; i < strlen(text); i++) {
 1d4:	0f 5f       	subi	r16, 0xFF	; 255
 1d6:	1f 4f       	sbci	r17, 0xFF	; 255
 1d8:	fe 01       	movw	r30, r28
 1da:	01 90       	ld	r0, Z+
 1dc:	00 20       	and	r0, r0
 1de:	e9 f7       	brne	.-6      	; 0x1da <lcd_writeLine+0x2e>
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	ec 1b       	sub	r30, r28
 1e4:	fd 0b       	sbc	r31, r29
 1e6:	0e 17       	cp	r16, r30
 1e8:	1f 07       	cpc	r17, r31
 1ea:	80 f3       	brcs	.-32     	; 0x1cc <lcd_writeLine+0x20>
 1ec:	16 c0       	rjmp	.+44     	; 0x21a <lcd_writeLine+0x6e>
			 lcd_writeChar( text[i] );
			}
	 }
	 else
	 {
	 	 lcd_command(0x80);
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	63 df       	rcall	.-314    	; 0xb8 <lcd_command>
 1f2:	7e 01       	movw	r14, r28
	 	 for (int i=0; i < strlen(text); i++) {
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	10 e0       	ldi	r17, 0x00	; 0
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <lcd_writeLine+0x5a>
		 	 lcd_writeChar( text[i] );
 1fa:	f7 01       	movw	r30, r14
 1fc:	81 91       	ld	r24, Z+
 1fe:	7f 01       	movw	r14, r30
 200:	ae df       	rcall	.-164    	; 0x15e <lcd_writeChar>
			}
	 }
	 else
	 {
	 	 lcd_command(0x80);
	 	 for (int i=0; i < strlen(text); i++) {
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	fe 01       	movw	r30, r28
 208:	01 90       	ld	r0, Z+
 20a:	00 20       	and	r0, r0
 20c:	e9 f7       	brne	.-6      	; 0x208 <lcd_writeLine+0x5c>
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	ec 1b       	sub	r30, r28
 212:	fd 0b       	sbc	r31, r29
 214:	0e 17       	cp	r16, r30
 216:	1f 07       	cpc	r17, r31
 218:	80 f3       	brcs	.-32     	; 0x1fa <lcd_writeLine+0x4e>
		 	 lcd_writeChar( text[i] );
	 	 }
	 }
 }
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <main>:
#include "LCD.h"



int main (void)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 d0       	rcall	.+0      	; 0x22e <main+0x6>
 22e:	00 d0       	rcall	.+0      	; 0x230 <main+0x8>
 230:	1f 92       	push	r1
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
	/* Insert system clock initialization code here (sysclk_init()). */
	char c[] = "Test";
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	e0 e0       	ldi	r30, 0x00	; 0
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	de 01       	movw	r26, r28
 23e:	11 96       	adiw	r26, 0x01	; 1
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	8a 95       	dec	r24
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x18>
	init_lcd();
 248:	51 df       	rcall	.-350    	; 0xec <init_lcd>
 24a:	89 e6       	ldi	r24, 0x69	; 105
 24c:	98 e1       	ldi	r25, 0x18	; 24
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <main+0x26>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x2c>
 254:	00 00       	nop
	_delay_ms(25);
	while(1)
	{
		lcd_command(0x01);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	2f df       	rcall	.-418    	; 0xb8 <lcd_command>
		lcd_writeLine(c, 1);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	a4 df       	rcall	.-184    	; 0x1ac <lcd_writeLine>
		//_delay_ms(5000);
		//lcd_writeLine2(c, sizeof(c));
		//_delay_ms(5000);
		lcd_setCursorPosition(0x0a, 2);
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	8a e0       	ldi	r24, 0x0A	; 10
 26a:	97 df       	rcall	.-210    	; 0x19a <lcd_setCursorPosition>
		lcd_writeChar('A');
 26c:	81 e4       	ldi	r24, 0x41	; 65
 26e:	77 df       	rcall	.-274    	; 0x15e <lcd_writeChar>
 270:	9f e3       	ldi	r25, 0x3F	; 63
 272:	22 e4       	ldi	r18, 0x42	; 66
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	91 50       	subi	r25, 0x01	; 1
 278:	20 40       	sbci	r18, 0x00	; 0
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x4e>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x58>
 280:	00 00       	nop
 282:	e9 cf       	rjmp	.-46     	; 0x256 <main+0x2e>

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
