
Opdracht B.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000282  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063b  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001be  00000000  00000000  000009eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ad  00000000  00000000  00000ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000111e0  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b8  00000000  00000000  000123fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000126b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002da  00000000  00000000  000126ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e8       	ldi	r30, 0x82	; 130
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	af d0       	rcall	.+350    	; 0x212 <main>
  b4:	e4 c0       	rjmp	.+456    	; 0x27e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:
	lcd_command(0x01);
	_delay_ms(25);
}

void lcd_command(unsigned char dat){
	PORTC = dat & 0xF0;		//hoge nibble
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;	//data
  be:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	e9 e6       	ldi	r30, 0x69	; 105
  c2:	f8 e1       	ldi	r31, 0x18	; 24
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x12>
  ca:	00 00       	nop
	_delay_ms(25);
	PORTC = 0x04;			//stop 
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21

	PORTC = (dat & 0x0F) <<4;	//lage nibble
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	89 e6       	ldi	r24, 0x69	; 105
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x2e>
  e6:	00 00       	nop

	_delay_ms(25);
	PORTC =  0x00;
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	08 95       	ret

000000ec <init_lcd>:
	}
}

void init_lcd(){
	//return home8
	DDRC = 0b11111111;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
  f0:	89 e6       	ldi	r24, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <init_lcd+0x8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <init_lcd+0xe>
  fa:	00 00       	nop
	_delay_ms(25);
	lcd_command(0x02);
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	dc df       	rcall	.-72     	; 0xb8 <lcd_command>
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <init_lcd+0x18>
 108:	00 c0       	rjmp	.+0      	; 0x10a <init_lcd+0x1e>
 10a:	00 00       	nop
	_delay_ms(25);
	//mode: 4 bits interface data, 2 lines, 5x data
	lcd_command(0x28);
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	d4 df       	rcall	.-88     	; 0xb8 <lcd_command>
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	98 e1       	ldi	r25, 0x18	; 24
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <init_lcd+0x28>
 118:	00 c0       	rjmp	.+0      	; 0x11a <init_lcd+0x2e>
 11a:	00 00       	nop
	_delay_ms(25);
	// display: on, cursor off, blinking off 
	lcd_command( 0x0C ); 
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	cc df       	rcall	.-104    	; 0xb8 <lcd_command>
 120:	89 e6       	ldi	r24, 0x69	; 105
 122:	98 e1       	ldi	r25, 0x18	; 24
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <init_lcd+0x38>
 128:	00 c0       	rjmp	.+0      	; 0x12a <init_lcd+0x3e>
 12a:	00 00       	nop
	_delay_ms(25);
	//entry mode: cursor to right no shift
	lcd_command(0x06);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	c4 df       	rcall	.-120    	; 0xb8 <lcd_command>
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <init_lcd+0x48>
 138:	00 c0       	rjmp	.+0      	; 0x13a <init_lcd+0x4e>
 13a:	00 00       	nop
	_delay_ms(25);
	//Ram adress: 0, first position, line 1
	lcd_command(0x80);
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	bc df       	rcall	.-136    	; 0xb8 <lcd_command>
 140:	89 e6       	ldi	r24, 0x69	; 105
 142:	98 e1       	ldi	r25, 0x18	; 24
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <init_lcd+0x58>
 148:	00 c0       	rjmp	.+0      	; 0x14a <init_lcd+0x5e>
 14a:	00 00       	nop
	_delay_ms(25);
	lcd_command(0x01);
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	b4 df       	rcall	.-152    	; 0xb8 <lcd_command>
 150:	89 e6       	ldi	r24, 0x69	; 105
 152:	98 e1       	ldi	r25, 0x18	; 24
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <init_lcd+0x68>
 158:	00 c0       	rjmp	.+0      	; 0x15a <init_lcd+0x6e>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <lcd_writeChar>:
	PORTC =  0x00;
}

void lcd_writeChar( unsigned char dat)
{
	PORTC = dat & 0xF0;
 15e:	98 2f       	mov	r25, r24
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C;
 164:	95 b3       	in	r25, 0x15	; 21
 166:	9c 60       	ori	r25, 0x0C	; 12
 168:	95 bb       	out	0x15, r25	; 21
 16a:	e9 e6       	ldi	r30, 0x69	; 105
 16c:	f8 e1       	ldi	r31, 0x18	; 24
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_writeChar+0x10>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_writeChar+0x16>
 174:	00 00       	nop

	_delay_ms(25);
	PORTC = 0x04;
 176:	94 e0       	ldi	r25, 0x04	; 4
 178:	95 bb       	out	0x15, r25	; 21

	PORTC = (dat & 0x0F) << 4;
 17a:	f0 e1       	ldi	r31, 0x10	; 16
 17c:	8f 9f       	mul	r24, r31
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C;
 184:	85 b3       	in	r24, 0x15	; 21
 186:	8c 60       	ori	r24, 0x0C	; 12
 188:	85 bb       	out	0x15, r24	; 21
 18a:	89 e6       	ldi	r24, 0x69	; 105
 18c:	98 e1       	ldi	r25, 0x18	; 24
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_writeChar+0x30>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_writeChar+0x36>
 194:	00 00       	nop

	_delay_ms(25);
	PORTC = 0x00;
 196:	15 ba       	out	0x15, r1	; 21
 198:	08 95       	ret

0000019a <lcd_writeLine1>:
}

void lcd_writeLine1 ( char text1[], int length)
{
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	8c 01       	movw	r16, r24
 1a8:	7b 01       	movw	r14, r22
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	lcd_command(0x80);
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	85 df       	rcall	.-246    	; 0xb8 <lcd_command>
	for (int i=0; i<length - 1; i++) {
 1ae:	c7 01       	movw	r24, r14
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	18 16       	cp	r1, r24
 1b4:	19 06       	cpc	r1, r25
 1b6:	44 f4       	brge	.+16     	; 0x1c8 <lcd_writeLine1+0x2e>
 1b8:	e8 01       	movw	r28, r16
 1ba:	08 0f       	add	r16, r24
 1bc:	19 1f       	adc	r17, r25
		lcd_writeChar( text1[i] );
 1be:	89 91       	ld	r24, Y+
 1c0:	ce df       	rcall	.-100    	; 0x15e <lcd_writeChar>
void lcd_writeLine1 ( char text1[], int length)
{
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	lcd_command(0x80);
	for (int i=0; i<length - 1; i++) {
 1c2:	c0 17       	cp	r28, r16
 1c4:	d1 07       	cpc	r29, r17
 1c6:	d9 f7       	brne	.-10     	; 0x1be <lcd_writeLine1+0x24>
		lcd_writeChar( text1[i] );
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	08 95       	ret

000001d6 <lcd_writeLine2>:

void lcd_writeLine2 ( char text2[], int length )
{
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	8c 01       	movw	r16, r24
 1e4:	7b 01       	movw	r14, r22
	// dan de eerste 8 karakters = regel 2
	// eerste pos regel 2
	lcd_command(0xC0);
 1e6:	80 ec       	ldi	r24, 0xC0	; 192
 1e8:	67 df       	rcall	.-306    	; 0xb8 <lcd_command>
	for (int i=0; i<length - 1; i++) {
 1ea:	c7 01       	movw	r24, r14
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	18 16       	cp	r1, r24
 1f0:	19 06       	cpc	r1, r25
 1f2:	44 f4       	brge	.+16     	; 0x204 <lcd_writeLine2+0x2e>
 1f4:	e8 01       	movw	r28, r16
 1f6:	08 0f       	add	r16, r24
 1f8:	19 1f       	adc	r17, r25
		lcd_writeChar( text2[i] );
 1fa:	89 91       	ld	r24, Y+
 1fc:	b0 df       	rcall	.-160    	; 0x15e <lcd_writeChar>
void lcd_writeLine2 ( char text2[], int length )
{
	// dan de eerste 8 karakters = regel 2
	// eerste pos regel 2
	lcd_command(0xC0);
	for (int i=0; i<length - 1; i++) {
 1fe:	c0 17       	cp	r28, r16
 200:	d1 07       	cpc	r29, r17
 202:	d9 f7       	brne	.-10     	; 0x1fa <lcd_writeLine2+0x24>
		lcd_writeChar( text2[i] );
	}
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	08 95       	ret

00000212 <main>:
#include "main.h"



int main (void)
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 d0       	rcall	.+0      	; 0x218 <main+0x6>
 218:	00 d0       	rcall	.+0      	; 0x21a <main+0x8>
 21a:	1f 92       	push	r1
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
	/* Insert system clock initialization code here (sysclk_init()). */
	char c[] = "RENE";
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	e0 e0       	ldi	r30, 0x00	; 0
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	de 01       	movw	r26, r28
 228:	11 96       	adiw	r26, 0x01	; 1
 22a:	01 90       	ld	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	8a 95       	dec	r24
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x18>
	init_lcd();
 232:	5c df       	rcall	.-328    	; 0xec <init_lcd>
 234:	89 e6       	ldi	r24, 0x69	; 105
 236:	98 e1       	ldi	r25, 0x18	; 24
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x26>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x2c>
 23e:	00 00       	nop
	
	//lcd_command(0x81);
	_delay_ms(25);
	while(1)
	{
		lcd_command(0x01);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	3a df       	rcall	.-396    	; 0xb8 <lcd_command>
		//lcd_writeChar('A');
		lcd_writeLine1(c, sizeof(c));
 244:	65 e0       	ldi	r22, 0x05	; 5
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	ce 01       	movw	r24, r28
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	a6 df       	rcall	.-180    	; 0x19a <lcd_writeLine1>
 24e:	9f e3       	ldi	r25, 0x3F	; 63
 250:	22 e4       	ldi	r18, 0x42	; 66
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	91 50       	subi	r25, 0x01	; 1
 256:	20 40       	sbci	r18, 0x00	; 0
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x42>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x4c>
 25e:	00 00       	nop
		_delay_ms(5000);
		lcd_writeLine2(c, sizeof(c));
 260:	65 e0       	ldi	r22, 0x05	; 5
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	b6 df       	rcall	.-148    	; 0x1d6 <lcd_writeLine2>
 26a:	9f e3       	ldi	r25, 0x3F	; 63
 26c:	22 e4       	ldi	r18, 0x42	; 66
 26e:	8f e0       	ldi	r24, 0x0F	; 15
 270:	91 50       	subi	r25, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x5e>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x68>
 27a:	00 00       	nop
 27c:	e1 cf       	rjmp	.-62     	; 0x240 <main+0x2e>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
