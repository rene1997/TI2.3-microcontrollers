
Opdracht B.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001ec  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000486  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001be  00000000  00000000  000007a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000526  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000111c4  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015f  00000000  00000000  000120d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00012237  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002da  00000000  00000000  00012267  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	79 d0       	rcall	.+242    	; 0x1a6 <main>
  b4:	99 c0       	rjmp	.+306    	; 0x1e8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:
	//Ram adress: 0, first position, line 1
	lcd_command(0x80);
}

void lcd_command(unsigned char dat){
	PORTC = dat & 0xF0;		//hoge nibble
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;	//data
  be:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	e9 e6       	ldi	r30, 0x69	; 105
  c2:	f8 e1       	ldi	r31, 0x18	; 24
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x12>
  ca:	00 00       	nop
	_delay_ms(25);
	PORTC = 0x04;			//stop 
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21

	PORTC = (dat & 0x0F) <<4;	//lage nibble
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	89 e6       	ldi	r24, 0x69	; 105
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x2e>
  e6:	00 00       	nop

	_delay_ms(25);
	PORTC =  0x00;
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	08 95       	ret

000000ec <init_lcd>:
	/* Insert application code here, after the board has been initialized. */
}

void init_lcd(){
	//return home8
	DDRC = 0b11111111;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
  f0:	89 e6       	ldi	r24, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <init_lcd+0x8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <init_lcd+0xe>
  fa:	00 00       	nop
	_delay_ms(25);
	lcd_command(0x02);
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	dc df       	rcall	.-72     	; 0xb8 <lcd_command>
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <init_lcd+0x18>
 108:	00 c0       	rjmp	.+0      	; 0x10a <init_lcd+0x1e>
 10a:	00 00       	nop
	_delay_ms(25);
	//mode: 4 bits interface data, 2 lines, 5x data
	lcd_command(0x28);
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	d4 df       	rcall	.-88     	; 0xb8 <lcd_command>
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	98 e1       	ldi	r25, 0x18	; 24
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <init_lcd+0x28>
 118:	00 c0       	rjmp	.+0      	; 0x11a <init_lcd+0x2e>
 11a:	00 00       	nop
	_delay_ms(25);
	// display: on, cursor off, blinking off 
	lcd_command( 0x0C ); 
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	cc df       	rcall	.-104    	; 0xb8 <lcd_command>
 120:	89 e6       	ldi	r24, 0x69	; 105
 122:	98 e1       	ldi	r25, 0x18	; 24
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <init_lcd+0x38>
 128:	00 c0       	rjmp	.+0      	; 0x12a <init_lcd+0x3e>
 12a:	00 00       	nop
	_delay_ms(25);
	//entry mode: cursor to right no shift
	lcd_command(0x06);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	c4 df       	rcall	.-120    	; 0xb8 <lcd_command>
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <init_lcd+0x48>
 138:	00 c0       	rjmp	.+0      	; 0x13a <init_lcd+0x4e>
 13a:	00 00       	nop
	_delay_ms(25);
	//Ram adress: 0, first position, line 1
	lcd_command(0x80);
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	bc cf       	rjmp	.-136    	; 0xb8 <lcd_command>
 140:	08 95       	ret

00000142 <lcd_writeChar>:
	PORTC =  0x00;
}

void lcd_writeChar( unsigned char dat)
{
	PORTC = dat & 0xF0;
 142:	98 2f       	mov	r25, r24
 144:	90 7f       	andi	r25, 0xF0	; 240
 146:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C;
 148:	95 b3       	in	r25, 0x15	; 21
 14a:	9c 60       	ori	r25, 0x0C	; 12
 14c:	95 bb       	out	0x15, r25	; 21
 14e:	e9 e6       	ldi	r30, 0x69	; 105
 150:	f8 e1       	ldi	r31, 0x18	; 24
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_writeChar+0x10>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_writeChar+0x16>
 158:	00 00       	nop

	_delay_ms(25);
	PORTC = 0x04;
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	95 bb       	out	0x15, r25	; 21

	PORTC = (dat & 0x0F) << 4;
 15e:	f0 e1       	ldi	r31, 0x10	; 16
 160:	8f 9f       	mul	r24, r31
 162:	c0 01       	movw	r24, r0
 164:	11 24       	eor	r1, r1
 166:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C;
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	8c 60       	ori	r24, 0x0C	; 12
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	89 e6       	ldi	r24, 0x69	; 105
 170:	98 e1       	ldi	r25, 0x18	; 24
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_writeChar+0x30>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_writeChar+0x36>
 178:	00 00       	nop

	_delay_ms(25);
	PORTC = 0x00;
 17a:	15 ba       	out	0x15, r1	; 21
 17c:	08 95       	ret

0000017e <lcd_writeLine1>:
}

void lcd_writeLine1 ( char text1[] )
{
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	lcd_command(0x80);
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	96 df       	rcall	.-212    	; 0xb8 <lcd_command>
 18c:	e8 01       	movw	r28, r16
 18e:	00 5f       	subi	r16, 0xF0	; 240
 190:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i=0; i<16; i++) {
		lcd_writeChar( text1[i] );
 192:	89 91       	ld	r24, Y+
 194:	d6 df       	rcall	.-84     	; 0x142 <lcd_writeChar>
void lcd_writeLine1 ( char text1[] )
{
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	lcd_command(0x80);
	for (int i=0; i<16; i++) {
 196:	c0 17       	cp	r28, r16
 198:	d1 07       	cpc	r29, r17
 19a:	d9 f7       	brne	.-10     	; 0x192 <lcd_writeLine1+0x14>
		lcd_writeChar( text1[i] );
	}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <main>:
#include "main.h"



int main (void)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	62 97       	sbiw	r28, 0x12	; 18
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
	/* Insert system clock initialization code here (sysclk_init()). */
	char c[] = "Test 1234567 TEST";
 1ba:	82 e1       	ldi	r24, 0x12	; 18
 1bc:	e0 e0       	ldi	r30, 0x00	; 0
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	de 01       	movw	r26, r28
 1c2:	11 96       	adiw	r26, 0x01	; 1
 1c4:	01 90       	ld	r0, Z+
 1c6:	0d 92       	st	X+, r0
 1c8:	8a 95       	dec	r24
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x1e>
	init_lcd();
 1cc:	8f df       	rcall	.-226    	; 0xec <init_lcd>
	

	while(1)
	{
		//lcd_writeChar('A');
		lcd_writeLine1(c);
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	d5 df       	rcall	.-86     	; 0x17e <lcd_writeLine1>
 1d4:	2f e3       	ldi	r18, 0x3F	; 63
 1d6:	82 e4       	ldi	r24, 0x42	; 66
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x34>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x3e>
 1e4:	00 00       	nop
 1e6:	f3 cf       	rjmp	.-26     	; 0x1ce <main+0x28>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
