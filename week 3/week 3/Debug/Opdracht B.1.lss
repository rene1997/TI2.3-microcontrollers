
Opdracht B.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001c0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000434  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000216  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000085a  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011253  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015f  00000000  00000000  000124b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00012616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003a48  00000000  00000000  00012656  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	62 d0       	rcall	.+196    	; 0x178 <main>
  b4:	83 c0       	rjmp	.+262    	; 0x1bc <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <board_init>:
  b8:	08 95       	ret

000000ba <lcd_command>:
	//Ram adress: 0, first position, line 1
	lcd_command(0x80);
}

void lcd_command(unsigned char dat){
	PORTC = dat & 0xF0;		//hoge nibble
  ba:	98 2f       	mov	r25, r24
  bc:	90 7f       	andi	r25, 0xF0	; 240
  be:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;	//data
  c0:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	e9 ef       	ldi	r30, 0xF9	; 249
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_command+0xc>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_command+0x12>
  cc:	00 00       	nop
	_delay_ms(1);
	PORTC = 0x04;			//stop 
  ce:	94 e0       	ldi	r25, 0x04	; 4
  d0:	95 bb       	out	0x15, r25	; 21

	PORTC = (dat & 0x0F) <<4;	//lage nibble
  d2:	f0 e1       	ldi	r31, 0x10	; 16
  d4:	8f 9f       	mul	r24, r31
  d6:	c0 01       	movw	r24, r0
  d8:	11 24       	eor	r1, r1
  da:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;
  dc:	ab 9a       	sbi	0x15, 3	; 21
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_command+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_command+0x2e>
  e8:	00 00       	nop

	_delay_ms(1);
	PORTC =  0x00;
  ea:	15 ba       	out	0x15, r1	; 21
  ec:	08 95       	ret

000000ee <init_lcd>:
	/* Insert application code here, after the board has been initialized. */
}

void init_lcd(){
	//return home8
	DDRC = 0b11111111;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 bb       	out	0x14, r24	; 20
  f2:	87 ea       	ldi	r24, 0xA7	; 167
  f4:	91 e6       	ldi	r25, 0x61	; 97
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <init_lcd+0x8>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <init_lcd+0xe>
  fc:	00 00       	nop
	_delay_ms(100);
	lcd_command(0x02);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	dc df       	rcall	.-72     	; 0xba <lcd_command>

	//mode: 4 bits interface data, 2 lines, 5x data
	lcd_command(0x28);
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	da df       	rcall	.-76     	; 0xba <lcd_command>

	// display: on, cursor off, blinking off 
	lcd_command( 0x0C ); 
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	d8 df       	rcall	.-80     	; 0xba <lcd_command>

	//entry mode: cursor to right no shift
	lcd_command(0x06);
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	d6 df       	rcall	.-84     	; 0xba <lcd_command>

	//Ram adress: 0, first position, line 1
	lcd_command(0x80);
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	d4 cf       	rjmp	.-88     	; 0xba <lcd_command>
 112:	08 95       	ret

00000114 <lcd_writeChar>:
	PORTC =  0x00;
}

void lcd_writeChar( unsigned char dat)
{
	PORTC = dat & 0xF0;
 114:	98 2f       	mov	r25, r24
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C;
 11a:	95 b3       	in	r25, 0x15	; 21
 11c:	9c 60       	ori	r25, 0x0C	; 12
 11e:	95 bb       	out	0x15, r25	; 21
 120:	e9 ef       	ldi	r30, 0xF9	; 249
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_writeChar+0x10>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_writeChar+0x16>
 12a:	00 00       	nop

	_delay_ms(1);
	PORTC = 0x04;
 12c:	94 e0       	ldi	r25, 0x04	; 4
 12e:	95 bb       	out	0x15, r25	; 21

	PORTC = (dat & 0x0F) << 4;
 130:	f0 e1       	ldi	r31, 0x10	; 16
 132:	8f 9f       	mul	r24, r31
 134:	c0 01       	movw	r24, r0
 136:	11 24       	eor	r1, r1
 138:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C;
 13a:	85 b3       	in	r24, 0x15	; 21
 13c:	8c 60       	ori	r24, 0x0C	; 12
 13e:	85 bb       	out	0x15, r24	; 21
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_writeChar+0x30>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_writeChar+0x36>
 14a:	00 00       	nop

	_delay_ms(1);
	PORTC = 0x00;
 14c:	15 ba       	out	0x15, r1	; 21
 14e:	08 95       	ret

00000150 <lcd_writeLine1>:
}

void lcd_writeLine1 ( char text1[] )
{
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	8c 01       	movw	r16, r24
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	lcd_command(0x80);
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	ae df       	rcall	.-164    	; 0xba <lcd_command>
 15e:	e8 01       	movw	r28, r16
 160:	00 5f       	subi	r16, 0xF0	; 240
 162:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i=0; i<16; i++) {
		lcd_writeChar( text1[i] );
 164:	89 91       	ld	r24, Y+
 166:	d6 df       	rcall	.-84     	; 0x114 <lcd_writeChar>
void lcd_writeLine1 ( char text1[] )
{
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	lcd_command(0x80);
	for (int i=0; i<16; i++) {
 168:	c0 17       	cp	r28, r16
 16a:	d1 07       	cpc	r29, r17
 16c:	d9 f7       	brne	.-10     	; 0x164 <lcd_writeLine1+0x14>
		lcd_writeChar( text1[i] );
	}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <main>:
#include "main.h"



int main (void)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	62 97       	sbiw	r28, 0x12	; 18
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	/* Insert system clock initialization code here (sysclk_init()). */
	char c[] = "Test 1234567 TEST";
 18c:	82 e1       	ldi	r24, 0x12	; 18
 18e:	e0 e0       	ldi	r30, 0x00	; 0
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	de 01       	movw	r26, r28
 194:	11 96       	adiw	r26, 0x01	; 1
 196:	01 90       	ld	r0, Z+
 198:	0d 92       	st	X+, r0
 19a:	8a 95       	dec	r24
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x1e>
	board_init();
 19e:	8c df       	rcall	.-232    	; 0xb8 <board_init>
	init_lcd();
 1a0:	a6 df       	rcall	.-180    	; 0xee <init_lcd>

	while(1)
	{
		//lcd_writeChar('A');
		lcd_writeLine1(c);
 1a2:	ce 01       	movw	r24, r28
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	d4 df       	rcall	.-88     	; 0x150 <lcd_writeLine1>
 1a8:	2f e3       	ldi	r18, 0x3F	; 63
 1aa:	82 e4       	ldi	r24, 0x42	; 66
 1ac:	9f e0       	ldi	r25, 0x0F	; 15
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x36>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x40>
 1b8:	00 00       	nop
 1ba:	f3 cf       	rjmp	.-26     	; 0x1a2 <main+0x2a>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
