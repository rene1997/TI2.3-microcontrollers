
Opdracht B.7A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000392  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001dc  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000811  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011296  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011e  00000000  00000000  000122fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0001241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003a44  00000000  00000000  0001246c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	26 d0       	rcall	.+76     	; 0xf6 <main>
  aa:	30 c0       	rjmp	.+96     	; 0x10c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <board_init>:
  ae:	08 95       	ret

000000b0 <wait>:
void start(int state)
{
	state = startState;
	PORTC ^= BIT(1);
	wait(1000); 
	PORTC = 0b00000000;
  b0:	18 16       	cp	r1, r24
  b2:	19 06       	cpc	r1, r25
  b4:	6c f4       	brge	.+26     	; 0xd0 <wait+0x20>
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	e9 ef       	ldi	r30, 0xF9	; 249
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <wait+0xe>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <wait+0x14>
  c4:	00 00       	nop
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	a9 f7       	brne	.-22     	; 0xba <wait+0xa>
  d0:	08 95       	ret

000000d2 <s1>:
}

void s1(int state)
{
	state = s1State;
	PORTC ^= BIT(2);
  d2:	95 b3       	in	r25, 0x15	; 21
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	89 27       	eor	r24, r25
  d8:	85 bb       	out	0x15, r24	; 21
	wait(1000); 
  da:	88 ee       	ldi	r24, 0xE8	; 232
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	e8 df       	rcall	.-48     	; 0xb0 <wait>
	PORTC = 0b00000000;
  e0:	15 ba       	out	0x15, r1	; 21
  e2:	08 95       	ret

000000e4 <s2>:
}

void s2(int state)
{
	state = s2State;
	PORTC ^= BIT(3);
  e4:	95 b3       	in	r25, 0x15	; 21
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	89 27       	eor	r24, r25
  ea:	85 bb       	out	0x15, r24	; 21
	wait(1000);
  ec:	88 ee       	ldi	r24, 0xE8	; 232
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	df df       	rcall	.-66     	; 0xb0 <wait>
	PORTC = 0b00000000;
  f2:	15 ba       	out	0x15, r1	; 21
  f4:	08 95       	ret

000000f6 <main>:
void wait(int milliseconds);

int main (void)
{
	int state;
	DDRD = 0b0000000; //Port D is input
  f6:	11 ba       	out	0x11, r1	; 17
	DDRC = 0b11111111; //Port C is output
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	84 bb       	out	0x14, r24	; 20

	board_init();
  fc:	d8 df       	rcall	.-80     	; 0xae <board_init>
	state = startState;
	while (1)
	{
		if(PIND5 && (state == startState || state == s1State))
		{
			s2(state);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	f0 df       	rcall	.-32     	; 0xe4 <s2>
		{
			end(state);
		}
		if(PIND6 && (state == s2State || state == startState))
		{
			s1(state);
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	e4 df       	rcall	.-56     	; 0xd2 <s1>
 10a:	f9 cf       	rjmp	.-14     	; 0xfe <main+0x8>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
