
Opdracht B.7A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003ce  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e5  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000083b  00000000  00000000  00000857  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001094  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011236  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000166  00000000  00000000  00012382  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000124e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003a44  00000000  00000000  00012538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	38 d0       	rcall	.+112    	; 0x11a <main>
  aa:	62 c0       	rjmp	.+196    	; 0x170 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  ae:	08 95       	ret

000000b0 <wait>:
void s3(int* state)
{
	state = s3State;
	PORTC ^= BIT(4);
	wait(1000);
	PORTC = 0b00000000;
  b0:	18 16       	cp	r1, r24
  b2:	19 06       	cpc	r1, r25
  b4:	6c f4       	brge	.+26     	; 0xd0 <wait+0x20>
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	e9 ef       	ldi	r30, 0xF9	; 249
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <wait+0xe>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <wait+0x14>
  c4:	00 00       	nop
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	a9 f7       	brne	.-22     	; 0xba <wait+0xa>
  d0:	08 95       	ret

000000d2 <start>:
  d2:	95 b3       	in	r25, 0x15	; 21
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	89 27       	eor	r24, r25
  d8:	85 bb       	out	0x15, r24	; 21
  da:	88 ee       	ldi	r24, 0xE8	; 232
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	e8 df       	rcall	.-48     	; 0xb0 <wait>
  e0:	15 ba       	out	0x15, r1	; 21
  e2:	08 95       	ret

000000e4 <s1>:
  e4:	95 b3       	in	r25, 0x15	; 21
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	89 27       	eor	r24, r25
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	88 ee       	ldi	r24, 0xE8	; 232
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	df df       	rcall	.-66     	; 0xb0 <wait>
  f2:	15 ba       	out	0x15, r1	; 21
  f4:	08 95       	ret

000000f6 <s2>:
  f6:	95 b3       	in	r25, 0x15	; 21
  f8:	88 e0       	ldi	r24, 0x08	; 8
  fa:	89 27       	eor	r24, r25
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	88 ee       	ldi	r24, 0xE8	; 232
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	d6 df       	rcall	.-84     	; 0xb0 <wait>
 104:	15 ba       	out	0x15, r1	; 21
 106:	08 95       	ret

00000108 <end>:
}

void end(int* state){
	state = endState;
	PORTC ^= BIT(5);
 108:	95 b3       	in	r25, 0x15	; 21
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	89 27       	eor	r24, r25
 10e:	85 bb       	out	0x15, r24	; 21
	wait(1000);
 110:	88 ee       	ldi	r24, 0xE8	; 232
 112:	93 e0       	ldi	r25, 0x03	; 3
 114:	cd df       	rcall	.-102    	; 0xb0 <wait>
	PORTC = 0b00000000;
 116:	15 ba       	out	0x15, r1	; 21
 118:	08 95       	ret

0000011a <main>:
void end(int* state);

void wait(int milliseconds);

int main (void)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <main+0x6>
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	int state;
	DDRD = 0b0000000; //Port D is input
 124:	11 ba       	out	0x11, r1	; 17
	DDRC = 0b11111111; //Port C is output
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	84 bb       	out	0x14, r24	; 20

	board_init();
 12a:	c1 df       	rcall	.-126    	; 0xae <board_init>

	state = startState;
 12c:	1a 82       	std	Y+2, r1	; 0x02
 12e:	19 82       	std	Y+1, r1	; 0x01
	if(PIND5 && (state == startState || state == s1State))
	{
		s2(&state);
 130:	ce 01       	movw	r24, r28
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	e0 df       	rcall	.-64     	; 0xf6 <s2>
	}
	else if(PIND5 && state == s3State)
	{
		end(&state);
	}
	if(PIND6 && (state == s2State || state == startState))
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	9a 81       	ldd	r25, Y+2	; 0x02
 13a:	9c 01       	movw	r18, r24
 13c:	2d 7f       	andi	r18, 0xFD	; 253
 13e:	23 2b       	or	r18, r19
 140:	21 f4       	brne	.+8      	; 0x14a <main+0x30>
	{
		s1(&state);
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	ce df       	rcall	.-100    	; 0xe4 <s1>
 148:	05 c0       	rjmp	.+10     	; 0x154 <main+0x3a>
	}
	else if(PIND6 && state == s3State)
 14a:	03 97       	sbiw	r24, 0x03	; 3
 14c:	39 f4       	brne	.+14     	; 0x15c <main+0x42>
	{
		end(&state);
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	da df       	rcall	.-76     	; 0x108 <end>
	}
	if(PIND7 && !state == startState)
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	89 2b       	or	r24, r25
 15a:	19 f0       	breq	.+6      	; 0x162 <main+0x48>
	{
		start(&state);
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	b8 df       	rcall	.-144    	; 0xd2 <start>
	}

}
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
