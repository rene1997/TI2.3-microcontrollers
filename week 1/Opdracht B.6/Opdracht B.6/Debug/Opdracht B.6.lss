
Opdracht B.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000021f  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018c  00000000  00000000  0000042f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000079a  00000000  00000000  000005bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00000d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000111fd  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000089  00000000  00000000  00011fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00012036  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003a44  00000000  00000000  0001205e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	14 d0       	rcall	.+40     	; 0xc2 <main>
  9a:	34 c0       	rjmp	.+104    	; 0x104 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  9e:	08 95       	ret

000000a0 <wait>:
}

void wait(int milliseconds)
{
	int i = 0;
	for(; i < milliseconds; i++)
  a0:	18 16       	cp	r1, r24
  a2:	19 06       	cpc	r1, r25
  a4:	6c f4       	brge	.+26     	; 0xc0 <wait+0x20>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	e9 ef       	ldi	r30, 0xF9	; 249
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <wait+0xe>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <wait+0x14>
  b4:	00 00       	nop
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	a9 f7       	brne	.-22     	; 0xaa <wait+0xa>
  c0:	08 95       	ret

000000c2 <main>:
void wait(int);

int main (void)
{
	bool buttonPressed = false; //veranderd van status wanneer portC.0 wordt ingedrukt
	DDRD = 0b11111111; //port D is output
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b0000000; //port c is input
  c6:	14 ba       	out	0x14, r1	; 20

	board_init();
  c8:	ea df       	rcall	.-44     	; 0x9e <board_init>

void wait(int);

int main (void)
{
	bool buttonPressed = false; //veranderd van status wanneer portC.0 wordt ingedrukt
  ca:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		if (PINC)
		{
			if(buttonPressed) buttonPressed = false;
  cc:	d1 e0       	ldi	r29, 0x01	; 1

	board_init();
	
	while (1)
	{
		if (PINC)
  ce:	83 b3       	in	r24, 0x13	; 19
  d0:	81 11       	cpse	r24, r1
		{
			if(buttonPressed) buttonPressed = false;
  d2:	cd 27       	eor	r28, r29
			else buttonPressed = true;
		}
		if(buttonPressed & PINC) //controleert of C0 is ingedrukt;
  d4:	23 b3       	in	r18, 0x13	; 19
  d6:	8c 2f       	mov	r24, r28
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	82 23       	and	r24, r18
  de:	93 23       	and	r25, r19
  e0:	89 2b       	or	r24, r25
  e2:	41 f0       	breq	.+16     	; 0xf4 <main+0x32>
		{
			PORTD ^= BIT(7);
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	80 58       	subi	r24, 0x80	; 128
  e8:	82 bb       	out	0x12, r24	; 18
			wait(250);
  ea:	8a ef       	ldi	r24, 0xFA	; 250
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	d8 df       	rcall	.-80     	; 0xa0 <wait>
			PORTD = 0b00000000;
  f0:	12 ba       	out	0x12, r1	; 18
  f2:	ed cf       	rjmp	.-38     	; 0xce <main+0xc>
		}
		else
		{
			PORTD ^= BIT(7);
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	80 58       	subi	r24, 0x80	; 128
  f8:	82 bb       	out	0x12, r24	; 18
			wait(1000);
  fa:	88 ee       	ldi	r24, 0xE8	; 232
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	d0 df       	rcall	.-96     	; 0xa0 <wait>
			PORTD = 0b00000000;
 100:	12 ba       	out	0x12, r1	; 18
 102:	e5 cf       	rjmp	.-54     	; 0xce <main+0xc>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
