
Opdracht B.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000327  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ab  00000000  00000000  000005d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000902  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010ed0  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012b  00000000  00000000  00011fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0001210b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000393f  00000000  00000000  00012173  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	19 d0       	rcall	.+50     	; 0xcc <main>
  9a:	7a c0       	rjmp	.+244    	; 0x190 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  9e:	08 95       	ret

000000a0 <wait>:
#include <asf.h>
#include <util/delay.h>

void wait(int milliseconds)
{
	for(int i = 0; i< milliseconds; i++)
  a0:	18 16       	cp	r1, r24
  a2:	19 06       	cpc	r1, r25
  a4:	6c f4       	brge	.+26     	; 0xc0 <wait+0x20>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	e9 ef       	ldi	r30, 0xF9	; 249
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <wait+0xe>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <wait+0x14>
  b4:	00 00       	nop
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	a9 f7       	brne	.-22     	; 0xaa <wait+0xa>
  c0:	08 95       	ret

000000c2 <cleanLeds>:
	}
}

void cleanLeds(int milliseconds)
{
	PORTA = 0b00000000;
  c2:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0b00000000;
  c4:	18 ba       	out	0x18, r1	; 24
	PORTC = 0b00000000;
  c6:	15 ba       	out	0x15, r1	; 21
	PORTD = 0b00000000;
  c8:	12 ba       	out	0x12, r1	; 18
  ca:	08 95       	ret

000000cc <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  cc:	e8 df       	rcall	.-48     	; 0x9e <board_init>
	DDRA = 0b11111111;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;
  d2:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b11111111;
  d4:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;  //all pins are set to output
  d6:	81 bb       	out	0x11, r24	; 17
	DDRE = 0b11111111;
  d8:	82 b9       	out	0x02, r24	; 2
	DDRF = 0b11111111;
  da:	80 93 61 00 	sts	0x0061, r24
	DDRG = 0b11111111;
  de:	80 93 64 00 	sts	0x0064, r24
	

	//while true loop
	while(1)
	{
		for(int i = 0; i <8; i++)
  e2:	c1 2c       	mov	r12, r1
  e4:	d1 2c       	mov	r13, r1
		{
			PORTA = PORTA | (1<<i);
  e6:	ee 24       	eor	r14, r14
  e8:	e3 94       	inc	r14
  ea:	f1 2c       	mov	r15, r1
			wait(250);
		}
		for(int i = 0; i <8; i++)
		{
			PORTB = PORTB | (0b10000000>>i);
  ec:	00 e8       	ldi	r16, 0x80	; 128
  ee:	10 e0       	ldi	r17, 0x00	; 0
	

	//while true loop
	while(1)
	{
		for(int i = 0; i <8; i++)
  f0:	cc 2d       	mov	r28, r12
  f2:	dd 2d       	mov	r29, r13
		{
			PORTA = PORTA | (1<<i);
  f4:	2b b3       	in	r18, 0x1b	; 27
  f6:	c7 01       	movw	r24, r14
  f8:	0c 2e       	mov	r0, r28
  fa:	02 c0       	rjmp	.+4      	; 0x100 <main+0x34>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <main+0x30>
 104:	82 2b       	or	r24, r18
 106:	8b bb       	out	0x1b, r24	; 27
			wait(250);
 108:	8a ef       	ldi	r24, 0xFA	; 250
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	c9 df       	rcall	.-110    	; 0xa0 <wait>
	

	//while true loop
	while(1)
	{
		for(int i = 0; i <8; i++)
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	c8 30       	cpi	r28, 0x08	; 8
 112:	d1 05       	cpc	r29, r1
 114:	79 f7       	brne	.-34     	; 0xf4 <main+0x28>
 116:	cc 2d       	mov	r28, r12
 118:	dd 2d       	mov	r29, r13
			PORTA = PORTA | (1<<i);
			wait(250);
		}
		for(int i = 0; i <8; i++)
		{
			PORTB = PORTB | (0b10000000>>i);
 11a:	28 b3       	in	r18, 0x18	; 24
 11c:	c8 01       	movw	r24, r16
 11e:	0c 2e       	mov	r0, r28
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x5a>
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <main+0x56>
 12a:	82 2b       	or	r24, r18
 12c:	88 bb       	out	0x18, r24	; 24
			wait(250);
 12e:	8a ef       	ldi	r24, 0xFA	; 250
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	b6 df       	rcall	.-148    	; 0xa0 <wait>
		for(int i = 0; i <8; i++)
		{
			PORTA = PORTA | (1<<i);
			wait(250);
		}
		for(int i = 0; i <8; i++)
 134:	21 96       	adiw	r28, 0x01	; 1
 136:	c8 30       	cpi	r28, 0x08	; 8
 138:	d1 05       	cpc	r29, r1
 13a:	79 f7       	brne	.-34     	; 0x11a <main+0x4e>
 13c:	cc 2d       	mov	r28, r12
 13e:	dd 2d       	mov	r29, r13
			PORTB = PORTB | (0b10000000>>i);
			wait(250);
		}
		for(int i = 0; i <8; i++)
		{
			PORTC = PORTC | (1<<i);
 140:	25 b3       	in	r18, 0x15	; 21
 142:	c7 01       	movw	r24, r14
 144:	0c 2e       	mov	r0, r28
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x80>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <main+0x7c>
 150:	82 2b       	or	r24, r18
 152:	85 bb       	out	0x15, r24	; 21
			wait(250);
 154:	8a ef       	ldi	r24, 0xFA	; 250
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	a3 df       	rcall	.-186    	; 0xa0 <wait>
		for(int i = 0; i <8; i++)
		{
			PORTB = PORTB | (0b10000000>>i);
			wait(250);
		}
		for(int i = 0; i <8; i++)
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	c8 30       	cpi	r28, 0x08	; 8
 15e:	d1 05       	cpc	r29, r1
 160:	79 f7       	brne	.-34     	; 0x140 <main+0x74>
 162:	cc 2d       	mov	r28, r12
 164:	dd 2d       	mov	r29, r13
			PORTC = PORTC | (1<<i);
			wait(250);
		}
		for(int i = 0; i <8; i++)
		{
			PORTD = PORTD | (0b10000000>>i);
 166:	22 b3       	in	r18, 0x12	; 18
 168:	c8 01       	movw	r24, r16
 16a:	0c 2e       	mov	r0, r28
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0xa6>
 16e:	95 95       	asr	r25
 170:	87 95       	ror	r24
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <main+0xa2>
 176:	82 2b       	or	r24, r18
 178:	82 bb       	out	0x12, r24	; 18
			wait(250);
 17a:	8a ef       	ldi	r24, 0xFA	; 250
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 df       	rcall	.-224    	; 0xa0 <wait>
		for(int i = 0; i <8; i++)
		{
			PORTC = PORTC | (1<<i);
			wait(250);
		}
		for(int i = 0; i <8; i++)
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	c8 30       	cpi	r28, 0x08	; 8
 184:	d1 05       	cpc	r29, r1
 186:	79 f7       	brne	.-34     	; 0x166 <main+0x9a>
		{
			PORTD = PORTD | (0b10000000>>i);
			wait(250);
		}
		
		cleanLeds(10);
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	9a df       	rcall	.-204    	; 0xc2 <cleanLeds>
		
	}
 18e:	b0 cf       	rjmp	.-160    	; 0xf0 <main+0x24>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
