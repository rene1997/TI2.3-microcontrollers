
Opdracht B.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002ea  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091b  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000048d  00000000  00000000  00000d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c36  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011452  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000396  00000000  00000000  000133ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00013780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003c78  00000000  00000000  000137f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e5 d0       	rcall	.+458    	; 0x28e <main>
  c4:	10 c1       	rjmp	.+544    	; 0x2e6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_command>:
		lcd_command(value);
	}
	else
	{
		value = 0x80 + position;
		lcd_command(value);
  c8:	98 2f       	mov	r25, r24
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	95 bb       	out	0x15, r25	; 21
  ce:	ab 9a       	sbi	0x15, 3	; 21
  d0:	e9 e6       	ldi	r30, 0x69	; 105
  d2:	f8 e1       	ldi	r31, 0x18	; 24
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_command+0xc>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_command+0x12>
  da:	00 00       	nop
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	95 bb       	out	0x15, r25	; 21
  e0:	f0 e1       	ldi	r31, 0x10	; 16
  e2:	8f 9f       	mul	r24, r31
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	ab 9a       	sbi	0x15, 3	; 21
  ec:	89 e6       	ldi	r24, 0x69	; 105
  ee:	98 e1       	ldi	r25, 0x18	; 24
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_command+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_command+0x2e>
  f6:	00 00       	nop
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	08 95       	ret

000000fc <init_lcd>:
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	84 bb       	out	0x14, r24	; 20
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <init_lcd+0x8>
 108:	00 c0       	rjmp	.+0      	; 0x10a <init_lcd+0xe>
 10a:	00 00       	nop
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	dc df       	rcall	.-72     	; 0xc8 <lcd_command>
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	98 e1       	ldi	r25, 0x18	; 24
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <init_lcd+0x18>
 118:	00 c0       	rjmp	.+0      	; 0x11a <init_lcd+0x1e>
 11a:	00 00       	nop
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	d4 df       	rcall	.-88     	; 0xc8 <lcd_command>
 120:	89 e6       	ldi	r24, 0x69	; 105
 122:	98 e1       	ldi	r25, 0x18	; 24
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <init_lcd+0x28>
 128:	00 c0       	rjmp	.+0      	; 0x12a <init_lcd+0x2e>
 12a:	00 00       	nop
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	cc df       	rcall	.-104    	; 0xc8 <lcd_command>
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <init_lcd+0x38>
 138:	00 c0       	rjmp	.+0      	; 0x13a <init_lcd+0x3e>
 13a:	00 00       	nop
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	c4 df       	rcall	.-120    	; 0xc8 <lcd_command>
 140:	89 e6       	ldi	r24, 0x69	; 105
 142:	98 e1       	ldi	r25, 0x18	; 24
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <init_lcd+0x48>
 148:	00 c0       	rjmp	.+0      	; 0x14a <init_lcd+0x4e>
 14a:	00 00       	nop
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	bc df       	rcall	.-136    	; 0xc8 <lcd_command>
 150:	89 e6       	ldi	r24, 0x69	; 105
 152:	98 e1       	ldi	r25, 0x18	; 24
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <init_lcd+0x58>
 158:	00 c0       	rjmp	.+0      	; 0x15a <init_lcd+0x5e>
 15a:	00 00       	nop
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	b4 df       	rcall	.-152    	; 0xc8 <lcd_command>
 160:	89 e6       	ldi	r24, 0x69	; 105
 162:	98 e1       	ldi	r25, 0x18	; 24
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <init_lcd+0x68>
 168:	00 c0       	rjmp	.+0      	; 0x16a <init_lcd+0x6e>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <lcd_writeChar>:
 16e:	98 2f       	mov	r25, r24
 170:	90 7f       	andi	r25, 0xF0	; 240
 172:	95 bb       	out	0x15, r25	; 21
 174:	95 b3       	in	r25, 0x15	; 21
 176:	9c 60       	ori	r25, 0x0C	; 12
 178:	95 bb       	out	0x15, r25	; 21
 17a:	e9 e6       	ldi	r30, 0x69	; 105
 17c:	f8 e1       	ldi	r31, 0x18	; 24
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_writeChar+0x10>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_writeChar+0x16>
 184:	00 00       	nop
 186:	94 e0       	ldi	r25, 0x04	; 4
 188:	95 bb       	out	0x15, r25	; 21
 18a:	f0 e1       	ldi	r31, 0x10	; 16
 18c:	8f 9f       	mul	r24, r31
 18e:	c0 01       	movw	r24, r0
 190:	11 24       	eor	r1, r1
 192:	85 bb       	out	0x15, r24	; 21
 194:	85 b3       	in	r24, 0x15	; 21
 196:	8c 60       	ori	r24, 0x0C	; 12
 198:	85 bb       	out	0x15, r24	; 21
 19a:	89 e6       	ldi	r24, 0x69	; 105
 19c:	98 e1       	ldi	r25, 0x18	; 24
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_writeChar+0x30>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_writeChar+0x36>
 1a4:	00 00       	nop
 1a6:	15 ba       	out	0x15, r1	; 21
 1a8:	08 95       	ret

000001aa <lcd_writeLine>:
	}
 }

 void lcd_writeLine( char text[], int line)
 {
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
	 // eerst de eerste 8 karakters = regel 1
	 // eerste pos regel 1
	 if(line == 2)
 1b8:	62 30       	cpi	r22, 0x02	; 2
 1ba:	71 05       	cpc	r23, r1
 1bc:	b9 f4       	brne	.+46     	; 0x1ec <lcd_writeLine+0x42>
	 {
		 lcd_command(0xC0);
 1be:	80 ec       	ldi	r24, 0xC0	; 192
 1c0:	83 df       	rcall	.-250    	; 0xc8 <lcd_command>
 1c2:	7e 01       	movw	r14, r28
			for (int i=0; i < strlen(text); i++) {
 1c4:	00 e0       	ldi	r16, 0x00	; 0
 1c6:	10 e0       	ldi	r17, 0x00	; 0
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <lcd_writeLine+0x2c>
			 lcd_writeChar( text[i] );
 1ca:	f7 01       	movw	r30, r14
 1cc:	81 91       	ld	r24, Z+
 1ce:	7f 01       	movw	r14, r30
 1d0:	ce df       	rcall	.-100    	; 0x16e <lcd_writeChar>
	 // eerst de eerste 8 karakters = regel 1
	 // eerste pos regel 1
	 if(line == 2)
	 {
		 lcd_command(0xC0);
			for (int i=0; i < strlen(text); i++) {
 1d2:	0f 5f       	subi	r16, 0xFF	; 255
 1d4:	1f 4f       	sbci	r17, 0xFF	; 255
 1d6:	fe 01       	movw	r30, r28
 1d8:	01 90       	ld	r0, Z+
 1da:	00 20       	and	r0, r0
 1dc:	e9 f7       	brne	.-6      	; 0x1d8 <lcd_writeLine+0x2e>
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	ec 1b       	sub	r30, r28
 1e2:	fd 0b       	sbc	r31, r29
 1e4:	0e 17       	cp	r16, r30
 1e6:	1f 07       	cpc	r17, r31
 1e8:	80 f3       	brcs	.-32     	; 0x1ca <lcd_writeLine+0x20>
 1ea:	16 c0       	rjmp	.+44     	; 0x218 <lcd_writeLine+0x6e>
			 lcd_writeChar( text[i] );
			}
	 }
	 else
	 {
	 	 lcd_command(0x80);
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	6c df       	rcall	.-296    	; 0xc8 <lcd_command>
 1f0:	7e 01       	movw	r14, r28
	 	 for (int i=0; i < strlen(text); i++) {
 1f2:	00 e0       	ldi	r16, 0x00	; 0
 1f4:	10 e0       	ldi	r17, 0x00	; 0
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <lcd_writeLine+0x5a>
		 	 lcd_writeChar( text[i] );
 1f8:	f7 01       	movw	r30, r14
 1fa:	81 91       	ld	r24, Z+
 1fc:	7f 01       	movw	r14, r30
 1fe:	b7 df       	rcall	.-146    	; 0x16e <lcd_writeChar>
			}
	 }
	 else
	 {
	 	 lcd_command(0x80);
	 	 for (int i=0; i < strlen(text); i++) {
 200:	0f 5f       	subi	r16, 0xFF	; 255
 202:	1f 4f       	sbci	r17, 0xFF	; 255
 204:	fe 01       	movw	r30, r28
 206:	01 90       	ld	r0, Z+
 208:	00 20       	and	r0, r0
 20a:	e9 f7       	brne	.-6      	; 0x206 <lcd_writeLine+0x5c>
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	ec 1b       	sub	r30, r28
 210:	fd 0b       	sbc	r31, r29
 212:	0e 17       	cp	r16, r30
 214:	1f 07       	cpc	r17, r31
 216:	80 f3       	brcs	.-32     	; 0x1f8 <lcd_writeLine+0x4e>
		 	 lcd_writeChar( text[i] );
	 	 }
	 }
 }
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	08 95       	ret

00000226 <usart0_init>:
int uart0_sendChar( char ch )
{
	while (!(UCSR0A & BIT(UDRE0))) ;		// wait until UDRE0 is set: transmit buffer is ready
	UDR0 = character;								// send ch
	return 0;								// OK
}
 226:	10 92 90 00 	sts	0x0090, r1
 22a:	89 e1       	ldi	r24, 0x19	; 25
 22c:	89 b9       	out	0x09, r24	; 9
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	80 93 95 00 	sts	0x0095, r24
 234:	1a b8       	out	0x0a, r1	; 10
 236:	08 95       	ret

00000238 <usart0_start>:
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	88 61       	ori	r24, 0x18	; 24
 23c:	8a b9       	out	0x0a, r24	; 10
 23e:	08 95       	ret

00000240 <uart0_receiveChar>:

char uart0_receiveChar( void )
{
	while (!(UCSR0A & BIT(RXC0))) ;			// if RX0 is set: unread data present in buffer
 240:	5f 9b       	sbis	0x0b, 7	; 11
 242:	fe cf       	rjmp	.-4      	; 0x240 <uart0_receiveChar>
	return UDR0;							// read ch
 244:	8c b1       	in	r24, 0x0c	; 12
}
 246:	08 95       	ret

00000248 <uart0_receiveString>:

// UART0: receive string until LF
int uart0_receiveString( char* string)
{
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
	int stop = 0; // boolean for stop value
	char ch;
	while (!stop) // while contunie
	{
		ch = uart0_receiveChar(); // read ch
 252:	f6 df       	rcall	.-20     	; 0x240 <uart0_receiveChar>
		if ( ch == LF ) // stop at LF
 254:	8a 30       	cpi	r24, 0x0A	; 10
 256:	11 f0       	breq	.+4      	; 0x25c <uart0_receiveString+0x14>
		stop = 1;
		else
		*string++ = ch; // else fill buffer
 258:	89 93       	st	Y+, r24
 25a:	fb cf       	rjmp	.-10     	; 0x252 <uart0_receiveString+0xa>
	}
	*string = '\0'; // string terminator
 25c:	18 82       	st	Y, r1
	return 0;
}
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
 26c:	18 16       	cp	r1, r24
 26e:	19 06       	cpc	r1, r25
 270:	6c f4       	brge	.+26     	; 0x28c <wait+0x20>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	e9 ef       	ldi	r30, 0xF9	; 249
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <wait+0xe>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <wait+0x14>
 280:	00 00       	nop
 282:	2f 5f       	subi	r18, 0xFF	; 255
 284:	3f 4f       	sbci	r19, 0xFF	; 255
 286:	28 17       	cp	r18, r24
 288:	39 07       	cpc	r19, r25
 28a:	a9 f7       	brne	.-22     	; 0x276 <wait+0xa>
 28c:	08 95       	ret

0000028e <main>:
}


// send/receive uart - dB-meter
int main( void )
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	65 97       	sbiw	r28, 0x15	; 21
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
	char buffer[16];						// declare string buffer 
	char c[] = "Test";
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	e0 e0       	ldi	r30, 0x00	; 0
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	de 01       	movw	r26, r28
 2aa:	51 96       	adiw	r26, 0x11	; 17
 2ac:	01 90       	ld	r0, Z+
 2ae:	0d 92       	st	X+, r0
 2b0:	8a 95       	dec	r24
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x1e>
	DDRB = 0xFF;							// set PORTB for output
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	87 bb       	out	0x17, r24	; 23

	init_lcd();								// initialize LCD-display
 2b8:	21 df       	rcall	.-446    	; 0xfc <init_lcd>
	wait(25);
 2ba:	89 e1       	ldi	r24, 0x19	; 25
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	d6 df       	rcall	.-84     	; 0x26c <wait>
	usart0_init();							// initialize USART0
 2c0:	b2 df       	rcall	.-156    	; 0x226 <usart0_init>
	usart0_start();
 2c2:	ba df       	rcall	.-140    	; 0x238 <usart0_start>

	while (1)
	{
		
		wait(5000);							// every 50 ms (busy waiting)
 2c4:	88 e8       	ldi	r24, 0x88	; 136
 2c6:	93 e1       	ldi	r25, 0x13	; 19
 2c8:	d1 df       	rcall	.-94     	; 0x26c <wait>
		lcd_command(0x01);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	fd de       	rcall	.-518    	; 0xc8 <lcd_command>
		PORTB ^= BIT(7);					// toggle bit 7 for testing
 2ce:	88 b3       	in	r24, 0x18	; 24
 2d0:	80 58       	subi	r24, 0x80	; 128
 2d2:	88 bb       	out	0x18, r24	; 24

		uart0_receiveString(buffer);		// receive string from uart
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	b7 df       	rcall	.-146    	; 0x248 <uart0_receiveString>
		lcd_writeLine(c, 1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	ce 01       	movw	r24, r28
 2e0:	41 96       	adiw	r24, 0x11	; 17
 2e2:	63 df       	rcall	.-314    	; 0x1aa <lcd_writeLine>
		
		// write string to LCD display
	}
 2e4:	ef cf       	rjmp	.-34     	; 0x2c4 <main+0x36>

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
