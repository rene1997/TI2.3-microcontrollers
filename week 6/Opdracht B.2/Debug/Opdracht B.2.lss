
Opdracht B.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000918  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000048b  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c30  00000000  00000000  000011cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011460  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000396  00000000  00000000  0001339c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00013732  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003c84  00000000  00000000  000137aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	e5 d0       	rcall	.+458    	; 0x274 <main>
  aa:	07 c1       	rjmp	.+526    	; 0x2ba <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_command>:
		lcd_command(value);
	}
	else
	{
		value = 0x80 + position;
		lcd_command(value);
  ae:	98 2f       	mov	r25, r24
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	95 bb       	out	0x15, r25	; 21
  b4:	ab 9a       	sbi	0x15, 3	; 21
  b6:	e9 e6       	ldi	r30, 0x69	; 105
  b8:	f8 e1       	ldi	r31, 0x18	; 24
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_command+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_command+0x12>
  c0:	00 00       	nop
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	95 bb       	out	0x15, r25	; 21
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	ab 9a       	sbi	0x15, 3	; 21
  d2:	89 e6       	ldi	r24, 0x69	; 105
  d4:	98 e1       	ldi	r25, 0x18	; 24
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_command+0x28>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_command+0x2e>
  dc:	00 00       	nop
  de:	15 ba       	out	0x15, r1	; 21
  e0:	08 95       	ret

000000e2 <init_lcd>:
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 bb       	out	0x14, r24	; 20
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <init_lcd+0x8>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <init_lcd+0xe>
  f0:	00 00       	nop
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	dc df       	rcall	.-72     	; 0xae <lcd_command>
  f6:	89 e6       	ldi	r24, 0x69	; 105
  f8:	98 e1       	ldi	r25, 0x18	; 24
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <init_lcd+0x18>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <init_lcd+0x1e>
 100:	00 00       	nop
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	d4 df       	rcall	.-88     	; 0xae <lcd_command>
 106:	89 e6       	ldi	r24, 0x69	; 105
 108:	98 e1       	ldi	r25, 0x18	; 24
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <init_lcd+0x28>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <init_lcd+0x2e>
 110:	00 00       	nop
 112:	8c e0       	ldi	r24, 0x0C	; 12
 114:	cc df       	rcall	.-104    	; 0xae <lcd_command>
 116:	89 e6       	ldi	r24, 0x69	; 105
 118:	98 e1       	ldi	r25, 0x18	; 24
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <init_lcd+0x38>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <init_lcd+0x3e>
 120:	00 00       	nop
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	c4 df       	rcall	.-120    	; 0xae <lcd_command>
 126:	89 e6       	ldi	r24, 0x69	; 105
 128:	98 e1       	ldi	r25, 0x18	; 24
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <init_lcd+0x48>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <init_lcd+0x4e>
 130:	00 00       	nop
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	bc df       	rcall	.-136    	; 0xae <lcd_command>
 136:	89 e6       	ldi	r24, 0x69	; 105
 138:	98 e1       	ldi	r25, 0x18	; 24
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <init_lcd+0x58>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <init_lcd+0x5e>
 140:	00 00       	nop
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	b4 df       	rcall	.-152    	; 0xae <lcd_command>
 146:	89 e6       	ldi	r24, 0x69	; 105
 148:	98 e1       	ldi	r25, 0x18	; 24
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <init_lcd+0x68>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <init_lcd+0x6e>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <lcd_writeChar>:
 154:	98 2f       	mov	r25, r24
 156:	90 7f       	andi	r25, 0xF0	; 240
 158:	95 bb       	out	0x15, r25	; 21
 15a:	95 b3       	in	r25, 0x15	; 21
 15c:	9c 60       	ori	r25, 0x0C	; 12
 15e:	95 bb       	out	0x15, r25	; 21
 160:	e9 e6       	ldi	r30, 0x69	; 105
 162:	f8 e1       	ldi	r31, 0x18	; 24
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_writeChar+0x10>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_writeChar+0x16>
 16a:	00 00       	nop
 16c:	94 e0       	ldi	r25, 0x04	; 4
 16e:	95 bb       	out	0x15, r25	; 21
 170:	f0 e1       	ldi	r31, 0x10	; 16
 172:	8f 9f       	mul	r24, r31
 174:	c0 01       	movw	r24, r0
 176:	11 24       	eor	r1, r1
 178:	85 bb       	out	0x15, r24	; 21
 17a:	85 b3       	in	r24, 0x15	; 21
 17c:	8c 60       	ori	r24, 0x0C	; 12
 17e:	85 bb       	out	0x15, r24	; 21
 180:	89 e6       	ldi	r24, 0x69	; 105
 182:	98 e1       	ldi	r25, 0x18	; 24
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_writeChar+0x30>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_writeChar+0x36>
 18a:	00 00       	nop
 18c:	15 ba       	out	0x15, r1	; 21
 18e:	08 95       	ret

00000190 <lcd_writeLine>:
	}
 }

 void lcd_writeLine( char text[], int line)
 {
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
	 // eerst de eerste 8 karakters = regel 1
	 // eerste pos regel 1
	 if(line == 2)
 19e:	62 30       	cpi	r22, 0x02	; 2
 1a0:	71 05       	cpc	r23, r1
 1a2:	b9 f4       	brne	.+46     	; 0x1d2 <lcd_writeLine+0x42>
	 {
		 lcd_command(0xC0);
 1a4:	80 ec       	ldi	r24, 0xC0	; 192
 1a6:	83 df       	rcall	.-250    	; 0xae <lcd_command>
 1a8:	7e 01       	movw	r14, r28
			for (int i=0; i < strlen(text); i++) {
 1aa:	00 e0       	ldi	r16, 0x00	; 0
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <lcd_writeLine+0x2c>
			 lcd_writeChar( text[i] );
 1b0:	f7 01       	movw	r30, r14
 1b2:	81 91       	ld	r24, Z+
 1b4:	7f 01       	movw	r14, r30
 1b6:	ce df       	rcall	.-100    	; 0x154 <lcd_writeChar>
	 // eerst de eerste 8 karakters = regel 1
	 // eerste pos regel 1
	 if(line == 2)
	 {
		 lcd_command(0xC0);
			for (int i=0; i < strlen(text); i++) {
 1b8:	0f 5f       	subi	r16, 0xFF	; 255
 1ba:	1f 4f       	sbci	r17, 0xFF	; 255
 1bc:	fe 01       	movw	r30, r28
 1be:	01 90       	ld	r0, Z+
 1c0:	00 20       	and	r0, r0
 1c2:	e9 f7       	brne	.-6      	; 0x1be <lcd_writeLine+0x2e>
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	ec 1b       	sub	r30, r28
 1c8:	fd 0b       	sbc	r31, r29
 1ca:	0e 17       	cp	r16, r30
 1cc:	1f 07       	cpc	r17, r31
 1ce:	80 f3       	brcs	.-32     	; 0x1b0 <lcd_writeLine+0x20>
 1d0:	16 c0       	rjmp	.+44     	; 0x1fe <lcd_writeLine+0x6e>
			 lcd_writeChar( text[i] );
			}
	 }
	 else
	 {
	 	 lcd_command(0x80);
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	6c df       	rcall	.-296    	; 0xae <lcd_command>
 1d6:	7e 01       	movw	r14, r28
	 	 for (int i=0; i < strlen(text); i++) {
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <lcd_writeLine+0x5a>
		 	 lcd_writeChar( text[i] );
 1de:	f7 01       	movw	r30, r14
 1e0:	81 91       	ld	r24, Z+
 1e2:	7f 01       	movw	r14, r30
 1e4:	b7 df       	rcall	.-146    	; 0x154 <lcd_writeChar>
			}
	 }
	 else
	 {
	 	 lcd_command(0x80);
	 	 for (int i=0; i < strlen(text); i++) {
 1e6:	0f 5f       	subi	r16, 0xFF	; 255
 1e8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ea:	fe 01       	movw	r30, r28
 1ec:	01 90       	ld	r0, Z+
 1ee:	00 20       	and	r0, r0
 1f0:	e9 f7       	brne	.-6      	; 0x1ec <lcd_writeLine+0x5c>
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	ec 1b       	sub	r30, r28
 1f6:	fd 0b       	sbc	r31, r29
 1f8:	0e 17       	cp	r16, r30
 1fa:	1f 07       	cpc	r17, r31
 1fc:	80 f3       	brcs	.-32     	; 0x1de <lcd_writeLine+0x4e>
		 	 lcd_writeChar( text[i] );
	 	 }
	 }
 }
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	08 95       	ret

0000020c <usart0_init>:
int uart0_sendChar( char ch )
{
	while (!(UCSR0A & BIT(UDRE0))) ;		// wait until UDRE0 is set: transmit buffer is ready
	UDR0 = character;								// send ch
	return 0;								// OK
}
 20c:	10 92 90 00 	sts	0x0090, r1
 210:	8f ec       	ldi	r24, 0xCF	; 207
 212:	89 b9       	out	0x09, r24	; 9
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	80 93 95 00 	sts	0x0095, r24
 21a:	1a b8       	out	0x0a, r1	; 10
 21c:	08 95       	ret

0000021e <usart0_start>:
 21e:	8a b1       	in	r24, 0x0a	; 10
 220:	88 61       	ori	r24, 0x18	; 24
 222:	8a b9       	out	0x0a, r24	; 10
 224:	08 95       	ret

00000226 <uart0_receiveChar>:

char uart0_receiveChar( void )
{
	while (!(UCSR0A & BIT(RXC0))) ;			// if RX0 is set: unread data present in buffer
 226:	5f 9b       	sbis	0x0b, 7	; 11
 228:	fe cf       	rjmp	.-4      	; 0x226 <uart0_receiveChar>
	return UDR0;							// read ch
 22a:	8c b1       	in	r24, 0x0c	; 12
}
 22c:	08 95       	ret

0000022e <uart0_receiveString>:

// UART0: receive string until LF
int uart0_receiveString( char* string)
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
	int stop = 0; // boolean for stop value
	char ch;
	while (!stop) // while contunie
	{
		ch = uart0_receiveChar(); // read ch
 238:	f6 df       	rcall	.-20     	; 0x226 <uart0_receiveChar>
		if ( ch == LF ) // stop at LF
 23a:	8a 30       	cpi	r24, 0x0A	; 10
 23c:	11 f0       	breq	.+4      	; 0x242 <uart0_receiveString+0x14>
		stop = 1;
		else
		*string++ = ch; // else fill buffer
 23e:	89 93       	st	Y+, r24
 240:	fb cf       	rjmp	.-10     	; 0x238 <uart0_receiveString+0xa>
	}
	*string = '\0'; // string terminator
 242:	18 82       	st	Y, r1
	return 0;
}
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	08 95       	ret

00000252 <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
 252:	18 16       	cp	r1, r24
 254:	19 06       	cpc	r1, r25
 256:	6c f4       	brge	.+26     	; 0x272 <wait+0x20>
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	e9 ef       	ldi	r30, 0xF9	; 249
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <wait+0xe>
 264:	00 c0       	rjmp	.+0      	; 0x266 <wait+0x14>
 266:	00 00       	nop
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	28 17       	cp	r18, r24
 26e:	39 07       	cpc	r19, r25
 270:	a9 f7       	brne	.-22     	; 0x25c <wait+0xa>
 272:	08 95       	ret

00000274 <main>:
}


// send/receive uart - dB-meter
int main( void )
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	60 97       	sbiw	r28, 0x10	; 16
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
	char buffer[16];						// declare string buffer 
	char c[] = "Test";
	DDRB = 0xFF;							// set PORTB for output
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	87 bb       	out	0x17, r24	; 23

	init_lcd();								// initialize LCD-display
 28c:	2a df       	rcall	.-428    	; 0xe2 <init_lcd>
	wait(25);
 28e:	89 e1       	ldi	r24, 0x19	; 25
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	df df       	rcall	.-66     	; 0x252 <wait>
	usart0_init();							// initialize USART0
 294:	bb df       	rcall	.-138    	; 0x20c <usart0_init>
	usart0_start();
 296:	c3 df       	rcall	.-122    	; 0x21e <usart0_start>

	while (1)
	{
		
		wait(5000);							// every 50 ms (busy waiting)
 298:	88 e8       	ldi	r24, 0x88	; 136
 29a:	93 e1       	ldi	r25, 0x13	; 19
 29c:	da df       	rcall	.-76     	; 0x252 <wait>
		lcd_command(0x01);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	06 df       	rcall	.-500    	; 0xae <lcd_command>
		PORTB ^= BIT(7);					// toggle bit 7 for testing
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	80 58       	subi	r24, 0x80	; 128
 2a6:	88 bb       	out	0x18, r24	; 24

		uart0_receiveString(buffer);		// receive string from uart
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	c0 df       	rcall	.-128    	; 0x22e <uart0_receiveString>
		lcd_writeLine(buffer, 1);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	ce 01       	movw	r24, r28
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	6c df       	rcall	.-296    	; 0x190 <lcd_writeLine>
		
		// write string to LCD display
	}
 2b8:	ef cf       	rjmp	.-34     	; 0x298 <main+0x24>

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
