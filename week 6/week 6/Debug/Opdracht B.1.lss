
Opdracht B.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000381  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000028d  00000000  00000000  00000611  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c0  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007088  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e9  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00008169  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002a07  00000000  00000000  000081b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2c d0       	rcall	.+88     	; 0x102 <main>
  aa:	4a c0       	rjmp	.+148    	; 0x140 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <usart0_init>:
char character;

void usart0_init( void )						// initialize USART0 - receive/transmit
{
	int	ubrr = MYUBRR;
	UBRR0H = ubrr>>8;						// baudrate register, hoge byte
  ae:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = ubrr;							// baudrate register, lage byte
  b2:	89 e1       	ldi	r24, 0x19	; 25
  b4:	89 b9       	out	0x09, r24	; 9
	UCSR0C = 0b00000110;					// asynchroon, 8 data - 1 stop - no parity
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 95 00 	sts	0x0095, r24
	UCSR0B = 0b00000000;					// receiver & transmitter enable
  bc:	1a b8       	out	0x0a, r1	; 10
  be:	08 95       	ret

000000c0 <usart0_start>:
}

void usart0_start( void )					// receiver & transmitter enable
{
	UCSR0B |= BIT(RXEN0)|BIT(TXEN0);			// set bit RXEN = Receiver enable and TXEN = Transmitter enable
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	88 61       	ori	r24, 0x18	; 24
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	08 95       	ret

000000c8 <uart0_sendChar>:
}

int uart0_sendChar( char ch )
{
	while (!(UCSR0A & BIT(UDRE0))) ;		// wait until UDRE0 is set: transmit buffer is ready
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <uart0_sendChar>
	UDR0 = character;								// send ch
  cc:	80 91 00 01 	lds	r24, 0x0100
  d0:	8c b9       	out	0x0c, r24	; 12
	return 0;								// OK
}
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret

000000d8 <uart0_receiveChar>:

char uart0_receiveChar( void )
{
	while (!(UCSR0A & BIT(RXC0))) ;			// if RX0 is set: unread data present in buffer
  d8:	5f 9b       	sbis	0x0b, 7	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <uart0_receiveChar>
	return UDR0;							// read ch
  dc:	8c b1       	in	r24, 0x0c	; 12
}
  de:	08 95       	ret

000000e0 <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
  e0:	18 16       	cp	r1, r24
  e2:	19 06       	cpc	r1, r25
  e4:	6c f4       	brge	.+26     	; 0x100 <wait+0x20>
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	ef ec       	ldi	r30, 0xCF	; 207
  ec:	f7 e0       	ldi	r31, 0x07	; 7
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <wait+0xe>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <wait+0x14>
  f4:	00 00       	nop
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	28 17       	cp	r18, r24
  fc:	39 07       	cpc	r19, r25
  fe:	a9 f7       	brne	.-22     	; 0xea <wait+0xa>
 100:	08 95       	ret

00000102 <main>:


// Main program: USART0: send & receive
int main( void )
{
	DDRB = 0xFF;							// set PORTB for output, for testing
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;							// set PORTA for output, for testing
 106:	8a bb       	out	0x1a, r24	; 26
	usart0_init();							// initialize USART0
 108:	d2 df       	rcall	.-92     	; 0xae <usart0_init>
	usart0_start();							// uart0: start send & receive
 10a:	da df       	rcall	.-76     	; 0xc0 <usart0_start>

	while (1)
	{
		wait(50);							// every 50 ms (busy waiting)
 10c:	82 e3       	ldi	r24, 0x32	; 50
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	e7 df       	rcall	.-50     	; 0xe0 <wait>
		PORTB ^= BIT(7);					// toggle bit 7 for testing
 112:	88 b3       	in	r24, 0x18	; 24
 114:	80 58       	subi	r24, 0x80	; 128
 116:	88 bb       	out	0x18, r24	; 24

		char tempchar = uart0_receiveChar();// read char
 118:	df df       	rcall	.-66     	; 0xd8 <uart0_receiveChar>
		character = toupper(tempchar);		// character to upper case
 11a:	08 2e       	mov	r0, r24
 11c:	00 0c       	add	r0, r0
 11e:	99 0b       	sbc	r25, r25
 120:	07 d0       	rcall	.+14     	; 0x130 <toupper>
 122:	80 93 00 01 	sts	0x0100, r24

		PORTA = character;					// show read character, for testing
 126:	8b bb       	out	0x1b, r24	; 27

		uart0_sendChar(character);			// send back
 128:	80 91 00 01 	lds	r24, 0x0100
 12c:	cd df       	rcall	.-102    	; 0xc8 <uart0_sendChar>
	}
 12e:	ee cf       	rjmp	.-36     	; 0x10c <main+0xa>

00000130 <toupper>:
 130:	91 11       	cpse	r25, r1
 132:	08 95       	ret
 134:	81 56       	subi	r24, 0x61	; 97
 136:	8a 51       	subi	r24, 0x1A	; 26
 138:	08 f4       	brcc	.+2      	; 0x13c <toupper+0xc>
 13a:	80 52       	subi	r24, 0x20	; 32
 13c:	85 58       	subi	r24, 0x85	; 133
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
