
Opdracht B.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062b  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a5  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000559  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000073df  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fe  00000000  00000000  000085b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000087b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000003ce  00000000  00000000  00008821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	ae d0       	rcall	.+348    	; 0x1f6 <main>
  9a:	de c0       	rjmp	.+444    	; 0x258 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <spi_masterInit>:
{
	spi_slaveSelect(0);			// Select display chip
	spi_write(0x0A);			// Register 0A: Intensity
	spi_write(brightness);			// -> Level 4 (in range [1..F])
	spi_slaveDeSelect(0);		// Deselect display chip
}
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	bb 98       	cbi	0x17, 3	; 23
  a4:	c0 9a       	sbi	0x18, 0	; 24
  a6:	82 e5       	ldi	r24, 0x52	; 82
  a8:	8d b9       	out	0x0d, r24	; 13
  aa:	08 95       	ret

000000ac <spi_write>:
  ac:	8f b9       	out	0x0f, r24	; 15
  ae:	77 9b       	sbis	0x0e, 7	; 14
  b0:	fe cf       	rjmp	.-4      	; 0xae <spi_write+0x2>
  b2:	08 95       	ret

000000b4 <spi_slaveSelect>:
  b4:	98 b3       	in	r25, 0x18	; 24
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <spi_slaveSelect+0xc>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	8a 95       	dec	r24
  c2:	e2 f7       	brpl	.-8      	; 0xbc <spi_slaveSelect+0x8>
  c4:	20 95       	com	r18
  c6:	29 23       	and	r18, r25
  c8:	28 bb       	out	0x18, r18	; 24
  ca:	08 95       	ret

000000cc <spi_slaveDeSelect>:
  cc:	98 b3       	in	r25, 0x18	; 24
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <spi_slaveDeSelect+0xc>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <spi_slaveDeSelect+0x8>
  dc:	29 2b       	or	r18, r25
  de:	28 bb       	out	0x18, r18	; 24
  e0:	08 95       	ret

000000e2 <displayDriverInit>:
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	e7 df       	rcall	.-50     	; 0xb4 <spi_slaveSelect>
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	e1 df       	rcall	.-62     	; 0xac <spi_write>
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	df df       	rcall	.-66     	; 0xac <spi_write>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	ed df       	rcall	.-38     	; 0xcc <spi_slaveDeSelect>
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	df df       	rcall	.-66     	; 0xb4 <spi_slaveSelect>
  f6:	8a e0       	ldi	r24, 0x0A	; 10
  f8:	d9 df       	rcall	.-78     	; 0xac <spi_write>
  fa:	8f e0       	ldi	r24, 0x0F	; 15
  fc:	d7 df       	rcall	.-82     	; 0xac <spi_write>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	e5 df       	rcall	.-54     	; 0xcc <spi_slaveDeSelect>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	d7 df       	rcall	.-82     	; 0xb4 <spi_slaveSelect>
 106:	8b e0       	ldi	r24, 0x0B	; 11
 108:	d1 df       	rcall	.-94     	; 0xac <spi_write>
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	cf df       	rcall	.-98     	; 0xac <spi_write>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	dd df       	rcall	.-70     	; 0xcc <spi_slaveDeSelect>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	cf df       	rcall	.-98     	; 0xb4 <spi_slaveSelect>
 116:	8c e0       	ldi	r24, 0x0C	; 12
 118:	c9 df       	rcall	.-110    	; 0xac <spi_write>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	c7 df       	rcall	.-114    	; 0xac <spi_write>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	d5 cf       	rjmp	.-86     	; 0xcc <spi_slaveDeSelect>
 122:	08 95       	ret

00000124 <spi_writeWord>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	d8 2f       	mov	r29, r24
 12a:	c6 2f       	mov	r28, r22
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	c2 df       	rcall	.-124    	; 0xb4 <spi_slaveSelect>
 130:	8d 2f       	mov	r24, r29
 132:	bc df       	rcall	.-136    	; 0xac <spi_write>
 134:	8c 2f       	mov	r24, r28
 136:	ba df       	rcall	.-140    	; 0xac <spi_write>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	c8 df       	rcall	.-112    	; 0xcc <spi_slaveDeSelect>
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <writeLedDisplay>:

void writeLedDisplay( int value )
{
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	if(value < 0 && value >= -999)
 14c:	89 51       	subi	r24, 0x19	; 25
 14e:	9c 4f       	sbci	r25, 0xFC	; 252
 150:	87 3e       	cpi	r24, 0xE7	; 231
 152:	93 40       	sbci	r25, 0x03	; 3
 154:	40 f4       	brcc	.+16     	; 0x166 <writeLedDisplay+0x24>
	{
		value = abs(value);
 156:	dd 23       	and	r29, r29
 158:	1c f4       	brge	.+6      	; 0x160 <writeLedDisplay+0x1e>
 15a:	d1 95       	neg	r29
 15c:	c1 95       	neg	r28
 15e:	d1 09       	sbc	r29, r1
		spi_writeWord(4, '*'); //write a - to the display
 160:	6a e2       	ldi	r22, 0x2A	; 42
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	df df       	rcall	.-66     	; 0x124 <spi_writeWord>
	}
	if (value >= 10000)
 166:	c0 31       	cpi	r28, 0x10	; 16
 168:	87 e2       	ldi	r24, 0x27	; 39
 16a:	d8 07       	cpc	r29, r24
 16c:	0c f0       	brlt	.+2      	; 0x170 <writeLedDisplay+0x2e>
 16e:	3e c0       	rjmp	.+124    	; 0x1ec <writeLedDisplay+0xaa>
	{
		return;
	}
	if(value == 1000)
 170:	c8 3e       	cpi	r28, 0xE8	; 232
 172:	23 e0       	ldi	r18, 0x03	; 3
 174:	d2 07       	cpc	r29, r18
 176:	69 f4       	brne	.+26     	; 0x192 <writeLedDisplay+0x50>
	{
		spi_writeWord(4, 1);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	d3 df       	rcall	.-90     	; 0x124 <spi_writeWord>
		spi_writeWord(3, 0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	d0 df       	rcall	.-96     	; 0x124 <spi_writeWord>
		spi_writeWord(2, 0);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	cd df       	rcall	.-102    	; 0x124 <spi_writeWord>
		spi_writeWord(1, 0);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	ca df       	rcall	.-108    	; 0x124 <spi_writeWord>
 190:	04 c0       	rjmp	.+8      	; 0x19a <writeLedDisplay+0x58>
	}
	if(value >=1000)
 192:	c8 3e       	cpi	r28, 0xE8	; 232
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	d8 07       	cpc	r29, r24
 198:	54 f0       	brlt	.+20     	; 0x1ae <writeLedDisplay+0x6c>
	{
		spi_writeWord(4, value / 1000); //write first digit of the number
 19a:	ce 01       	movw	r24, r28
 19c:	68 ee       	ldi	r22, 0xE8	; 232
 19e:	73 e0       	ldi	r23, 0x03	; 3
 1a0:	34 d0       	rcall	.+104    	; 0x20a <__divmodhi4>
 1a2:	08 2f       	mov	r16, r24
 1a4:	19 2f       	mov	r17, r25
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	bd df       	rcall	.-134    	; 0x124 <spi_writeWord>
		value = value - value / 1000 * 1000; //remove first digit of the number
 1aa:	c0 2f       	mov	r28, r16
 1ac:	d1 2f       	mov	r29, r17
	}
	if(value >= 100)
 1ae:	c4 36       	cpi	r28, 0x64	; 100
 1b0:	d1 05       	cpc	r29, r1
 1b2:	54 f0       	brlt	.+20     	; 0x1c8 <writeLedDisplay+0x86>
	{
		spi_writeWord(3, value / 100);
 1b4:	ce 01       	movw	r24, r28
 1b6:	64 e6       	ldi	r22, 0x64	; 100
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	27 d0       	rcall	.+78     	; 0x20a <__divmodhi4>
 1bc:	08 2f       	mov	r16, r24
 1be:	19 2f       	mov	r17, r25
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	b0 df       	rcall	.-160    	; 0x124 <spi_writeWord>
		value = value - value / 100 * 100;
 1c4:	c0 2f       	mov	r28, r16
 1c6:	d1 2f       	mov	r29, r17
	}
	if(value >= 10)
 1c8:	ca 30       	cpi	r28, 0x0A	; 10
 1ca:	d1 05       	cpc	r29, r1
 1cc:	54 f0       	brlt	.+20     	; 0x1e2 <writeLedDisplay+0xa0>
	{
		spi_writeWord(2, value / 10);
 1ce:	ce 01       	movw	r24, r28
 1d0:	6a e0       	ldi	r22, 0x0A	; 10
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	1a d0       	rcall	.+52     	; 0x20a <__divmodhi4>
 1d6:	08 2f       	mov	r16, r24
 1d8:	19 2f       	mov	r17, r25
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	a3 df       	rcall	.-186    	; 0x124 <spi_writeWord>
		value = value - value / 10 * 10;
 1de:	c0 2f       	mov	r28, r16
 1e0:	d1 2f       	mov	r29, r17
	}
	if(value >= 0)
 1e2:	dd 23       	and	r29, r29
 1e4:	1c f0       	brlt	.+6      	; 0x1ec <writeLedDisplay+0xaa>
	{
		spi_writeWord(1, value);
 1e6:	6c 2f       	mov	r22, r28
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	9c df       	rcall	.-200    	; 0x124 <spi_writeWord>
		return;
	}
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	08 95       	ret

000001f6 <main>:

int main()
{
	DDRB=0x01;						// Set PB0 pin as output for display select
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();				// Initialize spi module
 1fa:	51 df       	rcall	.-350    	; 0x9e <spi_masterInit>
	displayDriverInit();			// Initialize display chip
 1fc:	72 df       	rcall	.-284    	; 0xe2 <displayDriverInit>
	
	writeLedDisplay(1000);
 1fe:	88 ee       	ldi	r24, 0xE8	; 232
 200:	93 e0       	ldi	r25, 0x03	; 3
 202:	9f df       	rcall	.-194    	; 0x142 <writeLedDisplay>
	return (1);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret

0000020a <__divmodhi4>:
 20a:	97 fb       	bst	r25, 7
 20c:	07 2e       	mov	r0, r23
 20e:	16 f4       	brtc	.+4      	; 0x214 <__divmodhi4+0xa>
 210:	00 94       	com	r0
 212:	06 d0       	rcall	.+12     	; 0x220 <__divmodhi4_neg1>
 214:	77 fd       	sbrc	r23, 7
 216:	08 d0       	rcall	.+16     	; 0x228 <__divmodhi4_neg2>
 218:	0b d0       	rcall	.+22     	; 0x230 <__udivmodhi4>
 21a:	07 fc       	sbrc	r0, 7
 21c:	05 d0       	rcall	.+10     	; 0x228 <__divmodhi4_neg2>
 21e:	3e f4       	brtc	.+14     	; 0x22e <__divmodhi4_exit>

00000220 <__divmodhi4_neg1>:
 220:	90 95       	com	r25
 222:	81 95       	neg	r24
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	08 95       	ret

00000228 <__divmodhi4_neg2>:
 228:	70 95       	com	r23
 22a:	61 95       	neg	r22
 22c:	7f 4f       	sbci	r23, 0xFF	; 255

0000022e <__divmodhi4_exit>:
 22e:	08 95       	ret

00000230 <__udivmodhi4>:
 230:	aa 1b       	sub	r26, r26
 232:	bb 1b       	sub	r27, r27
 234:	51 e1       	ldi	r21, 0x11	; 17
 236:	07 c0       	rjmp	.+14     	; 0x246 <__udivmodhi4_ep>

00000238 <__udivmodhi4_loop>:
 238:	aa 1f       	adc	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	a6 17       	cp	r26, r22
 23e:	b7 07       	cpc	r27, r23
 240:	10 f0       	brcs	.+4      	; 0x246 <__udivmodhi4_ep>
 242:	a6 1b       	sub	r26, r22
 244:	b7 0b       	sbc	r27, r23

00000246 <__udivmodhi4_ep>:
 246:	88 1f       	adc	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	5a 95       	dec	r21
 24c:	a9 f7       	brne	.-22     	; 0x238 <__udivmodhi4_loop>
 24e:	80 95       	com	r24
 250:	90 95       	com	r25
 252:	bc 01       	movw	r22, r24
 254:	cd 01       	movw	r24, r26
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
